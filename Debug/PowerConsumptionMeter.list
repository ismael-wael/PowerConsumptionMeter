
PowerConsumptionMeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005190  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d4  080055d4  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080055d4  080055d4  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055d4  080055d4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055d8  080055d8  000155d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080055dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045dc  20000030  0800560c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000460c  0800560c  0002460c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b356  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026e7  00000000  00000000  0002b3af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002da98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  0002e550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000426c  00000000  00000000  0002ee18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007db0  00000000  00000000  00033084  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000150fc  00000000  00000000  0003ae34  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004ff30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f8  00000000  00000000  0004ffac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000030 	.word	0x20000030
 800014c:	00000000 	.word	0x00000000
 8000150:	080052a8 	.word	0x080052a8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000034 	.word	0x20000034
 800016c:	080052a8 	.word	0x080052a8

08000170 <ActivateSerialModule_voidInit>:
#include "MCAL/NVIC_interface.h"
#include "MCAL/GPIO_interface.h"
#include "MCAL/RCC_interface.h"

void ActivateSerialModule_voidInit(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af02      	add	r7, sp, #8
	MRCC_enuEnableClock(APB2_BUS, GPIOB_RCC);
 8000176:	2103      	movs	r1, #3
 8000178:	2002      	movs	r0, #2
 800017a:	f004 fe0b 	bl	8004d94 <MRCC_enuEnableClock>
	MRCC_enuEnableClock(APB2_BUS, AFIO_RCC);
 800017e:	2100      	movs	r1, #0
 8000180:	2002      	movs	r0, #2
 8000182:	f004 fe07 	bl	8004d94 <MRCC_enuEnableClock>

	Hswitch_voidInit();
 8000186:	f004 f961 	bl	800444c <Hswitch_voidInit>

	/*Enable Interrupt for Button*/
	MEXTI_voidEnableEXTI(LINE5);
 800018a:	2005      	movs	r0, #5
 800018c:	f004 fb7c 	bl	8004888 <MEXTI_voidEnableEXTI>
	MNVIC_voidEnableInterrupt(EXTI5);
 8000190:	2017      	movs	r0, #23
 8000192:	f004 fda3 	bl	8004cdc <MNVIC_voidEnableInterrupt>
	AFIO_voidSetEXTIConfiguration(AFIO_EXTI5 ,GPIOB_Port);
 8000196:	2101      	movs	r1, #1
 8000198:	2005      	movs	r0, #5
 800019a:	f004 faef 	bl	800477c <AFIO_voidSetEXTIConfiguration>
	MEXTI_voidSetCallBack(ActivateSerialModule_voidActivateIsButtonStillPressedTask , LINE5);
 800019e:	2105      	movs	r1, #5
 80001a0:	480c      	ldr	r0, [pc, #48]	; (80001d4 <ActivateSerialModule_voidInit+0x64>)
 80001a2:	f004 fb87 	bl	80048b4 <MEXTI_voidSetCallBack>
	MEXTI_voidInit(LINE5, FALLING_EDGE);
 80001a6:	2101      	movs	r1, #1
 80001a8:	2005      	movs	r0, #5
 80001aa:	f004 fb21 	bl	80047f0 <MEXTI_voidInit>

	TaskHandle_t IsButtonPressed;
	xTaskCreate(ActivateSerialModule_voidIsButtonStillPressed, "CheckButton", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &IsButtonPressed);
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	9301      	str	r3, [sp, #4]
 80001b2:	2303      	movs	r3, #3
 80001b4:	9300      	str	r3, [sp, #0]
 80001b6:	2300      	movs	r3, #0
 80001b8:	2280      	movs	r2, #128	; 0x80
 80001ba:	4907      	ldr	r1, [pc, #28]	; (80001d8 <ActivateSerialModule_voidInit+0x68>)
 80001bc:	4807      	ldr	r0, [pc, #28]	; (80001dc <ActivateSerialModule_voidInit+0x6c>)
 80001be:	f001 fe9c 	bl	8001efa <xTaskCreate>
	vTaskSuspend( IsButtonPressed );
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	4618      	mov	r0, r3
 80001c6:	f001 fff5 	bl	80021b4 <vTaskSuspend>
}
 80001ca:	bf00      	nop
 80001cc:	3708      	adds	r7, #8
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	08000255 	.word	0x08000255
 80001d8:	080052c0 	.word	0x080052c0
 80001dc:	080001e1 	.word	0x080001e1

080001e0 <ActivateSerialModule_voidIsButtonStillPressed>:

void ActivateSerialModule_voidIsButtonStillPressed(void* pvParameters)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	u32 u32Counter = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	617b      	str	r3, [r7, #20]
	ToggleState_t SwitchState = On;
 80001ec:	2301      	movs	r3, #1
 80001ee:	74fb      	strb	r3, [r7, #19]

	/*To make the task handle local, so that no one else can use it*/
	TaskHandle_t ThisTaskHandle = xTaskGetHandle((pu8)"CheckButton");
 80001f0:	4816      	ldr	r0, [pc, #88]	; (800024c <ActivateSerialModule_voidIsButtonStillPressed+0x6c>)
 80001f2:	f002 fa3b 	bl	800266c <xTaskGetHandle>
 80001f6:	60f8      	str	r0, [r7, #12]
	TaskHandle_t InputTaskHandle = xTaskGetHandle((pu8)"UserInput");
 80001f8:	4815      	ldr	r0, [pc, #84]	; (8000250 <ActivateSerialModule_voidIsButtonStillPressed+0x70>)
 80001fa:	f002 fa37 	bl	800266c <xTaskGetHandle>
 80001fe:	60b8      	str	r0, [r7, #8]

	while(1)
	{
		SwitchState = Hswitch_voidGetSwitchState(SERIAL_SWITCH);
 8000200:	2000      	movs	r0, #0
 8000202:	f004 f94f 	bl	80044a4 <Hswitch_voidGetSwitchState>
 8000206:	4603      	mov	r3, r0
 8000208:	74fb      	strb	r3, [r7, #19]
		if(SwitchState == Off)/*still pressed*/
 800020a:	7cfb      	ldrb	r3, [r7, #19]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d114      	bne.n	800023a <ActivateSerialModule_voidIsButtonStillPressed+0x5a>
		{
			u32Counter++;
 8000210:	697b      	ldr	r3, [r7, #20]
 8000212:	3301      	adds	r3, #1
 8000214:	617b      	str	r3, [r7, #20]
			if(u32Counter == 150) /*if user kept pressing the button for 3 seconds [150 * 20 ms (periodicity)]*/
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	2b96      	cmp	r3, #150	; 0x96
 800021a:	d113      	bne.n	8000244 <ActivateSerialModule_voidIsButtonStillPressed+0x64>
			{
				/*Enable USART CLK*/
				MRCC_enuEnableClock(APB2_BUS, USART1_RCC);
 800021c:	210e      	movs	r1, #14
 800021e:	2002      	movs	r0, #2
 8000220:	f004 fdb8 	bl	8004d94 <MRCC_enuEnableClock>
				u32Counter = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	617b      	str	r3, [r7, #20]
				SwitchState = On; /*not pressed - default - pullup button*/
 8000228:	2301      	movs	r3, #1
 800022a:	74fb      	strb	r3, [r7, #19]

				/*Start Input Task*/
				vTaskResume( InputTaskHandle );
 800022c:	68b8      	ldr	r0, [r7, #8]
 800022e:	f002 f871 	bl	8002314 <vTaskResume>
				vTaskSuspend( ThisTaskHandle );
 8000232:	68f8      	ldr	r0, [r7, #12]
 8000234:	f001 ffbe 	bl	80021b4 <vTaskSuspend>
 8000238:	e004      	b.n	8000244 <ActivateSerialModule_voidIsButtonStillPressed+0x64>
			}
		}
		else
		{
			u32Counter = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
			vTaskSuspend( ThisTaskHandle );
 800023e:	68f8      	ldr	r0, [r7, #12]
 8000240:	f001 ffb8 	bl	80021b4 <vTaskSuspend>
		}
		vTaskDelay(20);//periodicity 20 msec
 8000244:	2014      	movs	r0, #20
 8000246:	f001 ff8f 	bl	8002168 <vTaskDelay>
		SwitchState = Hswitch_voidGetSwitchState(SERIAL_SWITCH);
 800024a:	e7d9      	b.n	8000200 <ActivateSerialModule_voidIsButtonStillPressed+0x20>
 800024c:	080052c0 	.word	0x080052c0
 8000250:	080052cc 	.word	0x080052cc

08000254 <ActivateSerialModule_voidActivateIsButtonStillPressedTask>:

/*if pushButton is pressed, an interrupt to EXTI9_5_IRQHandler will occur,
 * that function will be called when the interrupt occur
 * the function Activate : "ActivateCheckButtonStatus" Task*/
void ActivateSerialModule_voidActivateIsButtonStillPressedTask(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
	/*To make the task handle local, so that no one else can use it*/
	TaskHandle_t IsButtonStillPressedTaskHandle = xTaskGetHandle( "CheckButton" );
 800025a:	4805      	ldr	r0, [pc, #20]	; (8000270 <ActivateSerialModule_voidActivateIsButtonStillPressedTask+0x1c>)
 800025c:	f002 fa06 	bl	800266c <xTaskGetHandle>
 8000260:	6078      	str	r0, [r7, #4]
	vTaskResume(IsButtonStillPressedTaskHandle);
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f002 f856 	bl	8002314 <vTaskResume>
}
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	080052c0 	.word	0x080052c0

08000274 <ControlModule_voidUpdateTask>:
	xTaskCreate(ControlModule_voidUpdateTask, "UpdateTask", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES-1, &UpdateTaskHandle);
	vTaskSuspend( ControlModule_voidUpdateTask );
}

void ControlModule_voidUpdateTask(void* pvParameters)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	while(1)
 800027c:	e7fe      	b.n	800027c <ControlModule_voidUpdateTask+0x8>
	...

08000280 <DisplayModule_voidInit>:
extern MessageBufferHandle_t CurrentQuoteBuffer;
extern MessageBufferHandle_t CurrentPowerConsumptionBuffer;
extern MessageBufferHandle_t CurrentChargeBuffer;

void DisplayModule_voidInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	HLCD_enuInit();
 8000286:	f003 f9bf 	bl	8003608 <HLCD_enuInit>

	TaskHandle_t DisplayCurrentData;

	xTaskCreate(DisplayModule_voidDisplayCurrentDataTask, "CurrentData", configMINIMAL_STACK_SIZE, NULL, 2, &DisplayCurrentData);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	2302      	movs	r3, #2
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	2280      	movs	r2, #128	; 0x80
 8000296:	4904      	ldr	r1, [pc, #16]	; (80002a8 <DisplayModule_voidInit+0x28>)
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <DisplayModule_voidInit+0x2c>)
 800029a:	f001 fe2e 	bl	8001efa <xTaskCreate>

}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	080052d8 	.word	0x080052d8
 80002ac:	080002b1 	.word	0x080002b1

080002b0 <DisplayModule_voidDisplayCurrentDataTask>:

void DisplayModule_voidDisplayCurrentDataTask(void* pvParameters)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	Quote* Local_currentQuote;
	u16* Local_currentPowerConsumption;
	Tariff* Local_currentCharge;
	while(1)
	{
		msgSize = xMessageBufferReceive(CurrentQuoteBuffer ,(void*)Local_currentQuote ,sizeof(Quote) ,10);
 80002b8:	4b2c      	ldr	r3, [pc, #176]	; (800036c <DisplayModule_voidDisplayCurrentDataTask+0xbc>)
 80002ba:	6818      	ldr	r0, [r3, #0]
 80002bc:	230a      	movs	r3, #10
 80002be:	2208      	movs	r2, #8
 80002c0:	6979      	ldr	r1, [r7, #20]
 80002c2:	f001 fcb1 	bl	8001c28 <xStreamBufferReceive>
 80002c6:	6138      	str	r0, [r7, #16]

		if( msgSize > 0 )
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d014      	beq.n	80002f8 <DisplayModule_voidDisplayCurrentDataTask+0x48>
		{
			HLCD_enuGoToXY(HLCD_u8FirstRow,HLCD_u8FirstCol , HLCD_u8NUmber_1);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2100      	movs	r1, #0
 80002d2:	2000      	movs	r0, #0
 80002d4:	f004 f836 	bl	8004344 <HLCD_enuGoToXY>
			HLCD_voidIntegerToString((u32)Local_currentQuote->u16LE, HLCD_u8NUmber_1);
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f004 f864 	bl	80043ac <HLCD_voidIntegerToString>
			HLCD_enuWriteData('.', HLCD_u8NUmber_1);
 80002e4:	2100      	movs	r1, #0
 80002e6:	202e      	movs	r0, #46	; 0x2e
 80002e8:	f003 fb30 	bl	800394c <HLCD_enuWriteData>
			HLCD_voidIntegerToString((u32)Local_currentQuote->u16PT, HLCD_u8NUmber_1);
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f004 f85a 	bl	80043ac <HLCD_voidIntegerToString>
		}

		msgSize = xMessageBufferReceive(CurrentPowerConsumptionBuffer ,(void*)Local_currentPowerConsumption ,sizeof(u16) ,10);
 80002f8:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <DisplayModule_voidDisplayCurrentDataTask+0xc0>)
 80002fa:	6818      	ldr	r0, [r3, #0]
 80002fc:	230a      	movs	r3, #10
 80002fe:	2204      	movs	r2, #4
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	f001 fc91 	bl	8001c28 <xStreamBufferReceive>
 8000306:	6138      	str	r0, [r7, #16]


		if( msgSize > 0 )
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d009      	beq.n	8000322 <DisplayModule_voidDisplayCurrentDataTask+0x72>
		{
			HLCD_enuGoToXY(HLCD_u8FirstRow,8 , HLCD_u8NUmber_1);
 800030e:	2200      	movs	r2, #0
 8000310:	2108      	movs	r1, #8
 8000312:	2000      	movs	r0, #0
 8000314:	f004 f816 	bl	8004344 <HLCD_enuGoToXY>
			HLCD_voidIntegerToString((u32)Local_currentPowerConsumption, HLCD_u8NUmber_1);
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f004 f845 	bl	80043ac <HLCD_voidIntegerToString>
		}

		msgSize = xMessageBufferReceive(CurrentPowerConsumptionBuffer ,(void*)Local_currentCharge ,sizeof(Tariff) ,10);
 8000322:	4b13      	ldr	r3, [pc, #76]	; (8000370 <DisplayModule_voidDisplayCurrentDataTask+0xc0>)
 8000324:	6818      	ldr	r0, [r3, #0]
 8000326:	230a      	movs	r3, #10
 8000328:	2202      	movs	r2, #2
 800032a:	68b9      	ldr	r1, [r7, #8]
 800032c:	f001 fc7c 	bl	8001c28 <xStreamBufferReceive>
 8000330:	6138      	str	r0, [r7, #16]

		if( msgSize > 0 )
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d014      	beq.n	8000362 <DisplayModule_voidDisplayCurrentDataTask+0xb2>
		{
			HLCD_enuGoToXY(HLCD_u8SecRow,HLCD_u8FirstCol , HLCD_u8NUmber_1);
 8000338:	2200      	movs	r2, #0
 800033a:	2100      	movs	r1, #0
 800033c:	2001      	movs	r0, #1
 800033e:	f004 f801 	bl	8004344 <HLCD_enuGoToXY>
			HLCD_voidIntegerToString((u32)Local_currentCharge->u8LE, HLCD_u8NUmber_1);
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	785b      	ldrb	r3, [r3, #1]
 8000346:	2100      	movs	r1, #0
 8000348:	4618      	mov	r0, r3
 800034a:	f004 f82f 	bl	80043ac <HLCD_voidIntegerToString>
			HLCD_enuWriteData('.', HLCD_u8NUmber_1);
 800034e:	2100      	movs	r1, #0
 8000350:	202e      	movs	r0, #46	; 0x2e
 8000352:	f003 fafb 	bl	800394c <HLCD_enuWriteData>
			HLCD_voidIntegerToString((u32)Local_currentCharge->u8PT, HLCD_u8NUmber_1);
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2100      	movs	r1, #0
 800035c:	4618      	mov	r0, r3
 800035e:	f004 f825 	bl	80043ac <HLCD_voidIntegerToString>
		}

		vTaskDelay(1000);
 8000362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000366:	f001 feff 	bl	8002168 <vTaskDelay>
		msgSize = xMessageBufferReceive(CurrentQuoteBuffer ,(void*)Local_currentQuote ,sizeof(Quote) ,10);
 800036a:	e7a5      	b.n	80002b8 <DisplayModule_voidDisplayCurrentDataTask+0x8>
 800036c:	200045f8 	.word	0x200045f8
 8000370:	20004600 	.word	0x20004600

08000374 <PowerMeasureModule_voidInit>:
#include "MCAL/RCC_interface.h"

extern MessageBufferHandle_t PowerReadingBuffer;

void PowerMeasureModule_voidInit(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af02      	add	r7, sp, #8
	/*ADC H.W Initialization*/
	MRCC_enuEnableClock(APB2_BUS, ADC1_RCC);
 800037a:	2109      	movs	r1, #9
 800037c:	2002      	movs	r0, #2
 800037e:	f004 fd09 	bl	8004d94 <MRCC_enuEnableClock>
	MRCC_enuEnableClock(APB2_BUS, GPIOA_RCC);
 8000382:	2102      	movs	r1, #2
 8000384:	2002      	movs	r0, #2
 8000386:	f004 fd05 	bl	8004d94 <MRCC_enuEnableClock>
	MADC_voidInit();
 800038a:	f004 f94b 	bl	8004624 <MADC_voidInit>

	/*ADC Channel Init*/
	GPIO_t Pot_pin;
	Pot_pin.GPIO_Pin = PIN0; // ADC channel0
 800038e:	2300      	movs	r3, #0
 8000390:	713b      	strb	r3, [r7, #4]
	Pot_pin.GPIO_Port = GPIOA_Port;
 8000392:	2300      	movs	r3, #0
 8000394:	717b      	strb	r3, [r7, #5]
	MGPIO_voidSetPinDirection(Pot_pin, INPUT_ANALOG);
 8000396:	2100      	movs	r1, #0
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f004 fb13 	bl	80049c4 <MGPIO_voidSetPinDirection>

	MADC_voidStartConversion();//because in continous mood
 800039e:	f004 f9c3 	bl	8004728 <MADC_voidStartConversion>

	TaskHandle_t UpdateReadingTaskHandle;

	xTaskCreate(PowerMeasureModule_voidUpdateReadingEachSecond, "UpdateReading", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &UpdateReadingTaskHandle);
 80003a2:	463b      	mov	r3, r7
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	2303      	movs	r3, #3
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	2300      	movs	r3, #0
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	4904      	ldr	r1, [pc, #16]	; (80003c0 <PowerMeasureModule_voidInit+0x4c>)
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <PowerMeasureModule_voidInit+0x50>)
 80003b2:	f001 fda2 	bl	8001efa <xTaskCreate>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	080052e4 	.word	0x080052e4
 80003c4:	080003c9 	.word	0x080003c9

080003c8 <PowerMeasureModule_voidUpdateReadingEachSecond>:

void PowerMeasureModule_voidUpdateReadingEachSecond(void* pvParameters)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	u16 u16Potentiometer = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
	Bool_t returnState = False;
 80003d4:	2300      	movs	r3, #0
 80003d6:	72fb      	strb	r3, [r7, #11]
	while(1)
	{
		u16Potentiometer = MADC_u16ReadConvertedData();
 80003d8:	f004 f9ba 	bl	8004750 <MADC_u16ReadConvertedData>
 80003dc:	60f8      	str	r0, [r7, #12]
		returnState = xMessageBufferSend(PowerReadingBuffer ,(void*)u16Potentiometer ,sizeof(u16Potentiometer) ,0);
 80003de:	4b07      	ldr	r3, [pc, #28]	; (80003fc <PowerMeasureModule_voidUpdateReadingEachSecond+0x34>)
 80003e0:	6818      	ldr	r0, [r3, #0]
 80003e2:	68f9      	ldr	r1, [r7, #12]
 80003e4:	2300      	movs	r3, #0
 80003e6:	2204      	movs	r2, #4
 80003e8:	f001 fb50 	bl	8001a8c <xStreamBufferSend>
 80003ec:	4603      	mov	r3, r0
 80003ee:	72fb      	strb	r3, [r7, #11]
		/*check return status*/
		vTaskDelay(1000);
 80003f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f4:	f001 feb8 	bl	8002168 <vTaskDelay>
		u16Potentiometer = MADC_u16ReadConvertedData();
 80003f8:	e7ee      	b.n	80003d8 <PowerMeasureModule_voidUpdateReadingEachSecond+0x10>
 80003fa:	bf00      	nop
 80003fc:	200045fc 	.word	0x200045fc

08000400 <RegistryModule_voidInit>:

/*MCAL*/
#include "MCAL/RCC_interface.h"

void RegistryModule_voidInit(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0

}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr

0800040c <StatusModule_voidInit>:
#include "MCAL/RCC_interface.h"

static u8 u8Status;

void StatusModule_voidInit(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af02      	add	r7, sp, #8
	u8Status = NORMAL;
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <StatusModule_voidInit+0x2c>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]

	Hled_voidInit();
 8000418:	f004 f862 	bl	80044e0 <Hled_voidInit>

	TaskHandle_t CurrConsumptionTask;
	xTaskCreate(StatusModule_voidCurrentConsumptionStatusTask, "StatusTask", configMINIMAL_STACK_SIZE, NULL, 1, &CurrConsumptionTask);
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	2301      	movs	r3, #1
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	2300      	movs	r3, #0
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	4904      	ldr	r1, [pc, #16]	; (800043c <StatusModule_voidInit+0x30>)
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <StatusModule_voidInit+0x34>)
 800042c:	f001 fd65 	bl	8001efa <xTaskCreate>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	2000004c 	.word	0x2000004c
 800043c:	080052f4 	.word	0x080052f4
 8000440:	08000445 	.word	0x08000445

08000444 <StatusModule_voidCurrentConsumptionStatusTask>:

void StatusModule_voidCurrentConsumptionStatusTask(void* pvParameters)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch(u8Status)
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <StatusModule_voidCurrentConsumptionStatusTask+0x74>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d01e      	beq.n	8000492 <StatusModule_voidCurrentConsumptionStatusTask+0x4e>
 8000454:	2b64      	cmp	r3, #100	; 0x64
 8000456:	d00f      	beq.n	8000478 <StatusModule_voidCurrentConsumptionStatusTask+0x34>
 8000458:	2b00      	cmp	r3, #0
 800045a:	d000      	beq.n	800045e <StatusModule_voidCurrentConsumptionStatusTask+0x1a>
				Hled_voidLedOff(HLED_GREEN_NORMAL);
				Hled_voidLedOff(HLED_YELLOW_MODERATE);
				break;

			default :
				break;
 800045c:	e026      	b.n	80004ac <StatusModule_voidCurrentConsumptionStatusTask+0x68>
				Hled_voidToggleLed(HLED_GREEN_NORMAL);
 800045e:	2000      	movs	r0, #0
 8000460:	f004 f892 	bl	8004588 <Hled_voidToggleLed>
				Hled_voidLedOff(HLED_YELLOW_MODERATE);
 8000464:	2001      	movs	r0, #1
 8000466:	f004 f867 	bl	8004538 <Hled_voidLedOff>
				Hled_voidLedOff(HLED_RED_HIGH);
 800046a:	2002      	movs	r0, #2
 800046c:	f004 f864 	bl	8004538 <Hled_voidLedOff>
				Hled_voidLedOff(HBUZZER);
 8000470:	2003      	movs	r0, #3
 8000472:	f004 f861 	bl	8004538 <Hled_voidLedOff>
				break;
 8000476:	e019      	b.n	80004ac <StatusModule_voidCurrentConsumptionStatusTask+0x68>
				Hled_voidToggleLed(HLED_YELLOW_MODERATE);
 8000478:	2001      	movs	r0, #1
 800047a:	f004 f885 	bl	8004588 <Hled_voidToggleLed>
				Hled_voidLedOff(HLED_GREEN_NORMAL);
 800047e:	2000      	movs	r0, #0
 8000480:	f004 f85a 	bl	8004538 <Hled_voidLedOff>
				Hled_voidLedOff(HLED_RED_HIGH);
 8000484:	2002      	movs	r0, #2
 8000486:	f004 f857 	bl	8004538 <Hled_voidLedOff>
				Hled_voidLedOff(HBUZZER);
 800048a:	2003      	movs	r0, #3
 800048c:	f004 f854 	bl	8004538 <Hled_voidLedOff>
				break;
 8000490:	e00c      	b.n	80004ac <StatusModule_voidCurrentConsumptionStatusTask+0x68>
				Hled_voidToggleLed(HLED_RED_HIGH);
 8000492:	2002      	movs	r0, #2
 8000494:	f004 f878 	bl	8004588 <Hled_voidToggleLed>
				Hled_voidToggleLed(HBUZZER);
 8000498:	2003      	movs	r0, #3
 800049a:	f004 f875 	bl	8004588 <Hled_voidToggleLed>
				Hled_voidLedOff(HLED_GREEN_NORMAL);
 800049e:	2000      	movs	r0, #0
 80004a0:	f004 f84a 	bl	8004538 <Hled_voidLedOff>
				Hled_voidLedOff(HLED_YELLOW_MODERATE);
 80004a4:	2001      	movs	r0, #1
 80004a6:	f004 f847 	bl	8004538 <Hled_voidLedOff>
				break;
 80004aa:	bf00      	nop
		}
		vTaskDelay(1000);
 80004ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b0:	f001 fe5a 	bl	8002168 <vTaskDelay>
		switch(u8Status)
 80004b4:	e7ca      	b.n	800044c <StatusModule_voidCurrentConsumptionStatusTask+0x8>
 80004b6:	bf00      	nop
 80004b8:	2000004c 	.word	0x2000004c

080004bc <UserInteractModule_voidInit>:
#include "MCAL/USART_interface.h"

extern MessageBufferHandle_t InputDataBuffer;

void UserInteractModule_voidInit(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af02      	add	r7, sp, #8
	MRCC_enuEnableClock(APB2_BUS, GPIOA_RCC);
 80004c2:	2102      	movs	r1, #2
 80004c4:	2002      	movs	r0, #2
 80004c6:	f004 fc65 	bl	8004d94 <MRCC_enuEnableClock>
	MRCC_enuEnableClock(APB2_BUS, USART1_RCC);
 80004ca:	210e      	movs	r1, #14
 80004cc:	2002      	movs	r0, #2
 80004ce:	f004 fc61 	bl	8004d94 <MRCC_enuEnableClock>
	/*UART Pin Initialization*/
	GPIO_t Tx , Rx;

	Tx.GPIO_Pin = PIN9;
 80004d2:	2309      	movs	r3, #9
 80004d4:	733b      	strb	r3, [r7, #12]
	Tx.GPIO_Port = GPIOA_Port;
 80004d6:	2300      	movs	r3, #0
 80004d8:	737b      	strb	r3, [r7, #13]

	Rx.GPIO_Pin = PIN10;
 80004da:	230a      	movs	r3, #10
 80004dc:	723b      	strb	r3, [r7, #8]
	Rx.GPIO_Port = GPIOA_Port;
 80004de:	2300      	movs	r3, #0
 80004e0:	727b      	strb	r3, [r7, #9]

	MGPIO_voidSetPinDirection(Tx, OUTPUT_SPEED_2MHZ_AFPP);
 80004e2:	210a      	movs	r1, #10
 80004e4:	68f8      	ldr	r0, [r7, #12]
 80004e6:	f004 fa6d 	bl	80049c4 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(Rx, INPUT_FLOATING);
 80004ea:	2104      	movs	r1, #4
 80004ec:	68b8      	ldr	r0, [r7, #8]
 80004ee:	f004 fa69 	bl	80049c4 <MGPIO_voidSetPinDirection>

	MUSART1_voidInit();
 80004f2:	f004 fd45 	bl	8004f80 <MUSART1_voidInit>

	TaskHandle_t InputTaskHandle;
	xTaskCreate(UserInteractModule_voidInput, "UserInput", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES-1, &InputTaskHandle);
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2303      	movs	r3, #3
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2280      	movs	r2, #128	; 0x80
 8000502:	490f      	ldr	r1, [pc, #60]	; (8000540 <UserInteractModule_voidInit+0x84>)
 8000504:	480f      	ldr	r0, [pc, #60]	; (8000544 <UserInteractModule_voidInit+0x88>)
 8000506:	f001 fcf8 	bl	8001efa <xTaskCreate>
	vTaskSuspend( InputTaskHandle );
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4618      	mov	r0, r3
 800050e:	f001 fe51 	bl	80021b4 <vTaskSuspend>

	TaskHandle_t PrintRetrievedDataHandle;
	xTaskCreate(UserInteractModule_voidPrintRetrievedData, "RetrievedData", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES-1, &PrintRetrievedDataHandle);
 8000512:	463b      	mov	r3, r7
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2303      	movs	r3, #3
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	490a      	ldr	r1, [pc, #40]	; (8000548 <UserInteractModule_voidInit+0x8c>)
 8000520:	480a      	ldr	r0, [pc, #40]	; (800054c <UserInteractModule_voidInit+0x90>)
 8000522:	f001 fcea 	bl	8001efa <xTaskCreate>
	vTaskSuspend( PrintRetrievedDataHandle );
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f001 fe43 	bl	80021b4 <vTaskSuspend>

	MRCC_enuDisableClock(APB2_BUS, USART1_RCC);
 800052e:	210e      	movs	r1, #14
 8000530:	2002      	movs	r0, #2
 8000532:	f004 fc73 	bl	8004e1c <MRCC_enuDisableClock>
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	08005300 	.word	0x08005300
 8000544:	08000551 	.word	0x08000551
 8000548:	0800530c 	.word	0x0800530c
 800054c:	08000a65 	.word	0x08000a65

08000550 <UserInteractModule_voidInput>:

void UserInteractModule_voidInput(void* pvParameters)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	pu8 pu8UserInput  = NULL;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]

	u8 u8Counter = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	75fb      	strb	r3, [r7, #23]

	TaskHandle_t ThisTaskHandle;
	ThisTaskHandle = xTaskGetHandle( "UserInput" );
 8000560:	4816      	ldr	r0, [pc, #88]	; (80005bc <UserInteractModule_voidInput+0x6c>)
 8000562:	f002 f883 	bl	800266c <xTaskGetHandle>
 8000566:	60f8      	str	r0, [r7, #12]

	while(1)
	{
		if(u8Counter == 0)
 8000568:	7dfb      	ldrb	r3, [r7, #23]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d103      	bne.n	8000576 <UserInteractModule_voidInput+0x26>
		{
			UserInteractModule_voidParseInputData((pu8)"1");
 800056e:	4814      	ldr	r0, [pc, #80]	; (80005c0 <UserInteractModule_voidInput+0x70>)
 8000570:	f000 f828 	bl	80005c4 <UserInteractModule_voidParseInputData>
 8000574:	e00b      	b.n	800058e <UserInteractModule_voidInput+0x3e>
		}
		else if(u8Counter == 20)
 8000576:	7dfb      	ldrb	r3, [r7, #23]
 8000578:	2b14      	cmp	r3, #20
 800057a:	d108      	bne.n	800058e <UserInteractModule_voidInput+0x3e>
		{
			/*Serial Port TimeOut mechanism : if no input for 20 seconds, serial port will shut down*/
			u8Counter = 0;//for the next time the task be called
 800057c:	2300      	movs	r3, #0
 800057e:	75fb      	strb	r3, [r7, #23]
			MRCC_enuDisableClock(APB2_BUS, USART1_RCC);/*disable UART : Saves power*/
 8000580:	210e      	movs	r1, #14
 8000582:	2002      	movs	r0, #2
 8000584:	f004 fc4a 	bl	8004e1c <MRCC_enuDisableClock>
			vTaskSuspend(ThisTaskHandle);
 8000588:	68f8      	ldr	r0, [r7, #12]
 800058a:	f001 fe13 	bl	80021b4 <vTaskSuspend>
		}
				/*1 second timeout nearly*/
		pu8UserInput = MUSART1_pu8ReceiveString(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000592:	f004 fdad 	bl	80050f0 <MUSART1_pu8ReceiveString>
 8000596:	6138      	str	r0, [r7, #16]

		if(pu8UserInput[0] != '!')
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b21      	cmp	r3, #33	; 0x21
 800059e:	d005      	beq.n	80005ac <UserInteractModule_voidInput+0x5c>
		{
			u8Counter = 1; //reset the counter as long as user input data
 80005a0:	2301      	movs	r3, #1
 80005a2:	75fb      	strb	r3, [r7, #23]
			UserInteractModule_voidParseInputData(pu8UserInput);
 80005a4:	6938      	ldr	r0, [r7, #16]
 80005a6:	f000 f80d 	bl	80005c4 <UserInteractModule_voidParseInputData>
 80005aa:	e002      	b.n	80005b2 <UserInteractModule_voidInput+0x62>
		}
		else
		{
			u8Counter++;
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	3301      	adds	r3, #1
 80005b0:	75fb      	strb	r3, [r7, #23]
		}

		vTaskDelay(1);//check input frequently [the more frequent the more chance to catch input as it's polling]
 80005b2:	2001      	movs	r0, #1
 80005b4:	f001 fdd8 	bl	8002168 <vTaskDelay>
		if(u8Counter == 0)
 80005b8:	e7d6      	b.n	8000568 <UserInteractModule_voidInput+0x18>
 80005ba:	bf00      	nop
 80005bc:	08005300 	.word	0x08005300
 80005c0:	0800531c 	.word	0x0800531c

080005c4 <UserInteractModule_voidParseInputData>:
	}
}

void UserInteractModule_voidParseInputData(pu8 pu8InputString)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	static u16 u16PreviousInputs = NON;

	u8 u8FirstChar = pu8InputString[0] - 48;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	3b30      	subs	r3, #48	; 0x30
 80005d2:	73fb      	strb	r3, [r7, #15]
	u16PreviousInputs = u16PreviousInputs*10 + u8FirstChar;
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <UserInteractModule_voidParseInputData+0x9c>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	461a      	mov	r2, r3
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	4413      	add	r3, r2
 80005e6:	4a1e      	ldr	r2, [pc, #120]	; (8000660 <UserInteractModule_voidParseInputData+0x9c>)
 80005e8:	6013      	str	r3, [r2, #0]

	switch(u16PreviousInputs)
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <UserInteractModule_voidParseInputData+0x9c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b71      	cmp	r3, #113	; 0x71
 80005f0:	d809      	bhi.n	8000606 <UserInteractModule_voidParseInputData+0x42>
 80005f2:	2b6f      	cmp	r3, #111	; 0x6f
 80005f4:	d20a      	bcs.n	800060c <UserInteractModule_voidParseInputData+0x48>
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d008      	beq.n	800060c <UserInteractModule_voidParseInputData+0x48>
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d30c      	bcc.n	8000618 <UserInteractModule_voidParseInputData+0x54>
 80005fe:	3b0b      	subs	r3, #11
 8000600:	2b01      	cmp	r3, #1
 8000602:	d809      	bhi.n	8000618 <UserInteractModule_voidParseInputData+0x54>
 8000604:	e002      	b.n	800060c <UserInteractModule_voidParseInputData+0x48>
 8000606:	3b79      	subs	r3, #121	; 0x79
 8000608:	2b02      	cmp	r3, #2
 800060a:	d805      	bhi.n	8000618 <UserInteractModule_voidParseInputData+0x54>
		case ADJUST_POWER_LEVELS :
		case ADJUST_KWM_TARIFF :
		case ADJUST_TIME :
		case ADJUST_DATE :

			UserInteractModule_voidPrintData( u16PreviousInputs );
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <UserInteractModule_voidParseInputData+0x9c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f97f 	bl	8000914 <UserInteractModule_voidPrintData>
			break;
 8000616:	e01e      	b.n	8000656 <UserInteractModule_voidParseInputData+0x92>
		default ://previous command

			if( u16PreviousInputs == RETRIEVE_DATA || u16PreviousInputs == ADJUST_KWM_TARIFF
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <UserInteractModule_voidParseInputData+0x9c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b70      	cmp	r3, #112	; 0x70
 800061e:	d00b      	beq.n	8000638 <UserInteractModule_voidParseInputData+0x74>
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <UserInteractModule_voidParseInputData+0x9c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b79      	cmp	r3, #121	; 0x79
 8000626:	d007      	beq.n	8000638 <UserInteractModule_voidParseInputData+0x74>
			  || u16PreviousInputs == ADJUST_DATE || u16PreviousInputs == ADJUST_TIME )
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <UserInteractModule_voidParseInputData+0x9c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b7b      	cmp	r3, #123	; 0x7b
 800062e:	d003      	beq.n	8000638 <UserInteractModule_voidParseInputData+0x74>
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <UserInteractModule_voidParseInputData+0x9c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b7a      	cmp	r3, #122	; 0x7a
 8000636:	d107      	bne.n	8000648 <UserInteractModule_voidParseInputData+0x84>
			{
				u16PreviousInputs = u16PreviousInputs/10;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <UserInteractModule_voidParseInputData+0x9c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a09      	ldr	r2, [pc, #36]	; (8000664 <UserInteractModule_voidParseInputData+0xa0>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	08db      	lsrs	r3, r3, #3
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <UserInteractModule_voidParseInputData+0x9c>)
 8000646:	6013      	str	r3, [r2, #0]
			}
			UserInteractModule_voidProcessInputData(pu8InputString , u16PreviousInputs);
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <UserInteractModule_voidParseInputData+0x9c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f80a 	bl	8000668 <UserInteractModule_voidProcessInputData>
			break;
 8000654:	bf00      	nop
	}
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000050 	.word	0x20000050
 8000664:	cccccccd 	.word	0xcccccccd

08000668 <UserInteractModule_voidProcessInputData>:

void UserInteractModule_voidProcessInputData(pu8 Local_pu8InputString , u16 u16CommandID)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
	Tariff* tariffValuePtr;
	Date_t* datePtr;
	Time_t* timePtr;
	Quote* quoteptr;

	switch(u16CommandID)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f240 4257 	movw	r2, #1111	; 0x457
 8000678:	4293      	cmp	r3, r2
 800067a:	f000 80e5 	beq.w	8000848 <UserInteractModule_voidProcessInputData+0x1e0>
 800067e:	f5b3 6f8b 	cmp.w	r3, #1112	; 0x458
 8000682:	d20d      	bcs.n	80006a0 <UserInteractModule_voidProcessInputData+0x38>
 8000684:	2b79      	cmp	r3, #121	; 0x79
 8000686:	d07c      	beq.n	8000782 <UserInteractModule_voidProcessInputData+0x11a>
 8000688:	2b79      	cmp	r3, #121	; 0x79
 800068a:	d802      	bhi.n	8000692 <UserInteractModule_voidProcessInputData+0x2a>
 800068c:	2b70      	cmp	r3, #112	; 0x70
 800068e:	d022      	beq.n	80006d6 <UserInteractModule_voidProcessInputData+0x6e>
 8000690:	e128      	b.n	80008e4 <UserInteractModule_voidProcessInputData+0x27c>
 8000692:	2b7a      	cmp	r3, #122	; 0x7a
 8000694:	f000 80b4 	beq.w	8000800 <UserInteractModule_voidProcessInputData+0x198>
 8000698:	2b7b      	cmp	r3, #123	; 0x7b
 800069a:	f000 808d 	beq.w	80007b8 <UserInteractModule_voidProcessInputData+0x150>
 800069e:	e121      	b.n	80008e4 <UserInteractModule_voidProcessInputData+0x27c>
 80006a0:	f240 426b 	movw	r2, #1131	; 0x46b
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d01e      	beq.n	80006e6 <UserInteractModule_voidProcessInputData+0x7e>
 80006a8:	f240 426b 	movw	r2, #1131	; 0x46b
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d809      	bhi.n	80006c4 <UserInteractModule_voidProcessInputData+0x5c>
 80006b0:	f5b3 6f8b 	cmp.w	r3, #1112	; 0x458
 80006b4:	f000 80e2 	beq.w	800087c <UserInteractModule_voidProcessInputData+0x214>
 80006b8:	f240 4259 	movw	r2, #1113	; 0x459
 80006bc:	4293      	cmp	r3, r2
 80006be:	f000 80f7 	beq.w	80008b0 <UserInteractModule_voidProcessInputData+0x248>
 80006c2:	e10f      	b.n	80008e4 <UserInteractModule_voidProcessInputData+0x27c>
 80006c4:	f240 426c 	movw	r2, #1132	; 0x46c
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d026      	beq.n	800071a <UserInteractModule_voidProcessInputData+0xb2>
 80006cc:	f240 426d 	movw	r2, #1133	; 0x46d
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d03c      	beq.n	800074e <UserInteractModule_voidProcessInputData+0xe6>
 80006d4:	e106      	b.n	80008e4 <UserInteractModule_voidProcessInputData+0x27c>
	{
		case RETRIEVE_DATA :

			RetrievedDataTaskHandle = xTaskGetHandle( "RetrievedData" );
 80006d6:	488c      	ldr	r0, [pc, #560]	; (8000908 <UserInteractModule_voidProcessInputData+0x2a0>)
 80006d8:	f001 ffc8 	bl	800266c <xTaskGetHandle>
 80006dc:	6138      	str	r0, [r7, #16]
			vTaskResume(RetrievedDataTaskHandle);
 80006de:	6938      	ldr	r0, [r7, #16]
 80006e0:	f001 fe18 	bl	8002314 <vTaskResume>
			break;
 80006e4:	e102      	b.n	80008ec <UserInteractModule_voidProcessInputData+0x284>
		case ADJUST_LOW_POWER_LVL :

			powerLevelValuePtr = pvPortMalloc(sizeof(PowerLevel));
 80006e6:	2008      	movs	r0, #8
 80006e8:	f000 f9e8 	bl	8000abc <pvPortMalloc>
 80006ec:	6278      	str	r0, [r7, #36]	; 0x24
			powerLevelValuePtr->u16Start = UserInteractModule_boolExtractData(0 ,3, Local_pu8InputString);
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	2103      	movs	r1, #3
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 f9bb 	bl	8000a6e <UserInteractModule_boolExtractData>
 80006f8:	4602      	mov	r2, r0
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	601a      	str	r2, [r3, #0]
			powerLevelValuePtr->u16End = UserInteractModule_boolExtractData(5 ,8, Local_pu8InputString);
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	2108      	movs	r1, #8
 8000702:	2005      	movs	r0, #5
 8000704:	f000 f9b3 	bl	8000a6e <UserInteractModule_boolExtractData>
 8000708:	4602      	mov	r2, r0
 800070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070c:	605a      	str	r2, [r3, #4]

			QueueItem.u16InputID = ADJUST_LOW_POWER_LVL;
 800070e:	f240 436b 	movw	r3, #1131	; 0x46b
 8000712:	60bb      	str	r3, [r7, #8]
			QueueItem.Value = powerLevelValuePtr;
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	60fb      	str	r3, [r7, #12]
			break;
 8000718:	e0e8      	b.n	80008ec <UserInteractModule_voidProcessInputData+0x284>
		case ADJUST_MID_POWER_LVL :

			powerLevelValuePtr = pvPortMalloc(sizeof(PowerLevel));
 800071a:	2008      	movs	r0, #8
 800071c:	f000 f9ce 	bl	8000abc <pvPortMalloc>
 8000720:	6278      	str	r0, [r7, #36]	; 0x24
			powerLevelValuePtr->u16Start = UserInteractModule_boolExtractData(0 ,3, Local_pu8InputString);
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	2103      	movs	r1, #3
 8000726:	2000      	movs	r0, #0
 8000728:	f000 f9a1 	bl	8000a6e <UserInteractModule_boolExtractData>
 800072c:	4602      	mov	r2, r0
 800072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000730:	601a      	str	r2, [r3, #0]
			powerLevelValuePtr->u16End = UserInteractModule_boolExtractData(5 ,8, Local_pu8InputString);
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	2108      	movs	r1, #8
 8000736:	2005      	movs	r0, #5
 8000738:	f000 f999 	bl	8000a6e <UserInteractModule_boolExtractData>
 800073c:	4602      	mov	r2, r0
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	605a      	str	r2, [r3, #4]

			QueueItem.u16InputID = ADJUST_MID_POWER_LVL;
 8000742:	f240 436c 	movw	r3, #1132	; 0x46c
 8000746:	60bb      	str	r3, [r7, #8]
			QueueItem.Value = powerLevelValuePtr;
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	60fb      	str	r3, [r7, #12]
			break;
 800074c:	e0ce      	b.n	80008ec <UserInteractModule_voidProcessInputData+0x284>
		case ADJUST_HIGH_POWER_LVL :

			powerLevelValuePtr = pvPortMalloc(sizeof(PowerLevel));
 800074e:	2008      	movs	r0, #8
 8000750:	f000 f9b4 	bl	8000abc <pvPortMalloc>
 8000754:	6278      	str	r0, [r7, #36]	; 0x24
			powerLevelValuePtr->u16Start = UserInteractModule_boolExtractData(0 ,3, Local_pu8InputString);
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	2103      	movs	r1, #3
 800075a:	2000      	movs	r0, #0
 800075c:	f000 f987 	bl	8000a6e <UserInteractModule_boolExtractData>
 8000760:	4602      	mov	r2, r0
 8000762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000764:	601a      	str	r2, [r3, #0]
			powerLevelValuePtr->u16End = UserInteractModule_boolExtractData(5 ,8, Local_pu8InputString);
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	2108      	movs	r1, #8
 800076a:	2005      	movs	r0, #5
 800076c:	f000 f97f 	bl	8000a6e <UserInteractModule_boolExtractData>
 8000770:	4602      	mov	r2, r0
 8000772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000774:	605a      	str	r2, [r3, #4]

			QueueItem.u16InputID = ADJUST_HIGH_POWER_LVL;
 8000776:	f240 436d 	movw	r3, #1133	; 0x46d
 800077a:	60bb      	str	r3, [r7, #8]
			QueueItem.Value = powerLevelValuePtr;
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	60fb      	str	r3, [r7, #12]
			break;
 8000780:	e0b4      	b.n	80008ec <UserInteractModule_voidProcessInputData+0x284>
		case ADJUST_KWM_TARIFF :

			tariffValuePtr = pvPortMalloc(sizeof(Tariff));
 8000782:	2002      	movs	r0, #2
 8000784:	f000 f99a 	bl	8000abc <pvPortMalloc>
 8000788:	6178      	str	r0, [r7, #20]
			tariffValuePtr->u8LE = UserInteractModule_boolExtractData(0 ,2, Local_pu8InputString);
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	2102      	movs	r1, #2
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f96d 	bl	8000a6e <UserInteractModule_boolExtractData>
 8000794:	4603      	mov	r3, r0
 8000796:	b2da      	uxtb	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	705a      	strb	r2, [r3, #1]
			tariffValuePtr->u8PT = UserInteractModule_boolExtractData(4 ,6, Local_pu8InputString);
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	2106      	movs	r1, #6
 80007a0:	2004      	movs	r0, #4
 80007a2:	f000 f964 	bl	8000a6e <UserInteractModule_boolExtractData>
 80007a6:	4603      	mov	r3, r0
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	701a      	strb	r2, [r3, #0]

			QueueItem.u16InputID = ADJUST_KWM_TARIFF;
 80007ae:	2379      	movs	r3, #121	; 0x79
 80007b0:	60bb      	str	r3, [r7, #8]
			QueueItem.Value = tariffValuePtr;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	60fb      	str	r3, [r7, #12]
			break;
 80007b6:	e099      	b.n	80008ec <UserInteractModule_voidProcessInputData+0x284>
		case ADJUST_DATE :

			datePtr = pvPortMalloc(sizeof(Date_t));
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f97f 	bl	8000abc <pvPortMalloc>
 80007be:	61f8      	str	r0, [r7, #28]
			datePtr->u8Year = UserInteractModule_boolExtractData(0 ,3, Local_pu8InputString);
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	2103      	movs	r1, #3
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 f952 	bl	8000a6e <UserInteractModule_boolExtractData>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	709a      	strb	r2, [r3, #2]
			datePtr->u8Month = UserInteractModule_boolExtractData(5 ,6, Local_pu8InputString);
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	2106      	movs	r1, #6
 80007d6:	2005      	movs	r0, #5
 80007d8:	f000 f949 	bl	8000a6e <UserInteractModule_boolExtractData>
 80007dc:	4603      	mov	r3, r0
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	705a      	strb	r2, [r3, #1]
			datePtr->u8Day = UserInteractModule_boolExtractData(8 ,9, Local_pu8InputString);
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	2109      	movs	r1, #9
 80007e8:	2008      	movs	r0, #8
 80007ea:	f000 f940 	bl	8000a6e <UserInteractModule_boolExtractData>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	701a      	strb	r2, [r3, #0]

			QueueItem.u16InputID = ADJUST_DATE;
 80007f6:	237b      	movs	r3, #123	; 0x7b
 80007f8:	60bb      	str	r3, [r7, #8]
			QueueItem.Value = datePtr;
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	60fb      	str	r3, [r7, #12]
			break;
 80007fe:	e075      	b.n	80008ec <UserInteractModule_voidProcessInputData+0x284>
		case ADJUST_TIME :

			timePtr = pvPortMalloc(sizeof(Time_t));
 8000800:	2003      	movs	r0, #3
 8000802:	f000 f95b 	bl	8000abc <pvPortMalloc>
 8000806:	61b8      	str	r0, [r7, #24]
			timePtr->u8Hour = UserInteractModule_boolExtractData(0 ,1, Local_pu8InputString);
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	2101      	movs	r1, #1
 800080c:	2000      	movs	r0, #0
 800080e:	f000 f92e 	bl	8000a6e <UserInteractModule_boolExtractData>
 8000812:	4603      	mov	r3, r0
 8000814:	b2da      	uxtb	r2, r3
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	709a      	strb	r2, [r3, #2]
			timePtr->u8Minute = UserInteractModule_boolExtractData(3 ,4, Local_pu8InputString);
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	2104      	movs	r1, #4
 800081e:	2003      	movs	r0, #3
 8000820:	f000 f925 	bl	8000a6e <UserInteractModule_boolExtractData>
 8000824:	4603      	mov	r3, r0
 8000826:	b2da      	uxtb	r2, r3
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	705a      	strb	r2, [r3, #1]
			timePtr->u8Second = UserInteractModule_boolExtractData(6 ,7, Local_pu8InputString);
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	2107      	movs	r1, #7
 8000830:	2006      	movs	r0, #6
 8000832:	f000 f91c 	bl	8000a6e <UserInteractModule_boolExtractData>
 8000836:	4603      	mov	r3, r0
 8000838:	b2da      	uxtb	r2, r3
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	701a      	strb	r2, [r3, #0]

			QueueItem.u16InputID = ADJUST_TIME;
 800083e:	237a      	movs	r3, #122	; 0x7a
 8000840:	60bb      	str	r3, [r7, #8]
			QueueItem.Value = timePtr;
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	60fb      	str	r3, [r7, #12]
			break;
 8000846:	e051      	b.n	80008ec <UserInteractModule_voidProcessInputData+0x284>
		case RECHARGE_20_LE :

			quoteptr = pvPortMalloc(sizeof(Quote));
 8000848:	2008      	movs	r0, #8
 800084a:	f000 f937 	bl	8000abc <pvPortMalloc>
 800084e:	6238      	str	r0, [r7, #32]
			quoteptr->u16LE = UserInteractModule_boolExtractData(0 ,2, Local_pu8InputString);
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	2102      	movs	r1, #2
 8000854:	2000      	movs	r0, #0
 8000856:	f000 f90a 	bl	8000a6e <UserInteractModule_boolExtractData>
 800085a:	4602      	mov	r2, r0
 800085c:	6a3b      	ldr	r3, [r7, #32]
 800085e:	605a      	str	r2, [r3, #4]
			quoteptr->u16PT = UserInteractModule_boolExtractData(4 ,6, Local_pu8InputString);
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	2106      	movs	r1, #6
 8000864:	2004      	movs	r0, #4
 8000866:	f000 f902 	bl	8000a6e <UserInteractModule_boolExtractData>
 800086a:	4602      	mov	r2, r0
 800086c:	6a3b      	ldr	r3, [r7, #32]
 800086e:	601a      	str	r2, [r3, #0]

			QueueItem.u16InputID = RECHARGE_20_LE;
 8000870:	f240 4357 	movw	r3, #1111	; 0x457
 8000874:	60bb      	str	r3, [r7, #8]
			QueueItem.Value = quoteptr;
 8000876:	6a3b      	ldr	r3, [r7, #32]
 8000878:	60fb      	str	r3, [r7, #12]
			break;
 800087a:	e037      	b.n	80008ec <UserInteractModule_voidProcessInputData+0x284>
		case RECHARGE_50_LE :

			quoteptr = pvPortMalloc(sizeof(Quote));
 800087c:	2008      	movs	r0, #8
 800087e:	f000 f91d 	bl	8000abc <pvPortMalloc>
 8000882:	6238      	str	r0, [r7, #32]
			quoteptr->u16LE = UserInteractModule_boolExtractData(0 ,2, Local_pu8InputString);
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	2102      	movs	r1, #2
 8000888:	2000      	movs	r0, #0
 800088a:	f000 f8f0 	bl	8000a6e <UserInteractModule_boolExtractData>
 800088e:	4602      	mov	r2, r0
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	605a      	str	r2, [r3, #4]
			quoteptr->u16PT = UserInteractModule_boolExtractData(4 ,6, Local_pu8InputString);
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	2106      	movs	r1, #6
 8000898:	2004      	movs	r0, #4
 800089a:	f000 f8e8 	bl	8000a6e <UserInteractModule_boolExtractData>
 800089e:	4602      	mov	r2, r0
 80008a0:	6a3b      	ldr	r3, [r7, #32]
 80008a2:	601a      	str	r2, [r3, #0]

			QueueItem.u16InputID = RECHARGE_50_LE;
 80008a4:	f44f 638b 	mov.w	r3, #1112	; 0x458
 80008a8:	60bb      	str	r3, [r7, #8]
			QueueItem.Value = quoteptr;
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	60fb      	str	r3, [r7, #12]
			break;
 80008ae:	e01d      	b.n	80008ec <UserInteractModule_voidProcessInputData+0x284>
		case RECHARGE_100_LE :

			quoteptr = pvPortMalloc(sizeof(Quote));
 80008b0:	2008      	movs	r0, #8
 80008b2:	f000 f903 	bl	8000abc <pvPortMalloc>
 80008b6:	6238      	str	r0, [r7, #32]
			quoteptr->u16LE = UserInteractModule_boolExtractData(0 ,2, Local_pu8InputString);
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	2102      	movs	r1, #2
 80008bc:	2000      	movs	r0, #0
 80008be:	f000 f8d6 	bl	8000a6e <UserInteractModule_boolExtractData>
 80008c2:	4602      	mov	r2, r0
 80008c4:	6a3b      	ldr	r3, [r7, #32]
 80008c6:	605a      	str	r2, [r3, #4]
			quoteptr->u16PT = UserInteractModule_boolExtractData(4 ,6, Local_pu8InputString);
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	2106      	movs	r1, #6
 80008cc:	2004      	movs	r0, #4
 80008ce:	f000 f8ce 	bl	8000a6e <UserInteractModule_boolExtractData>
 80008d2:	4602      	mov	r2, r0
 80008d4:	6a3b      	ldr	r3, [r7, #32]
 80008d6:	601a      	str	r2, [r3, #0]

			QueueItem.u16InputID = RECHARGE_100_LE;
 80008d8:	f240 4359 	movw	r3, #1113	; 0x459
 80008dc:	60bb      	str	r3, [r7, #8]
			QueueItem.Value = quoteptr;
 80008de:	6a3b      	ldr	r3, [r7, #32]
 80008e0:	60fb      	str	r3, [r7, #12]
			break;
 80008e2:	e003      	b.n	80008ec <UserInteractModule_voidProcessInputData+0x284>
		default :

			UserInteractModule_voidPrintData(WRONG_DATA );
 80008e4:	20ff      	movs	r0, #255	; 0xff
 80008e6:	f000 f815 	bl	8000914 <UserInteractModule_voidPrintData>
			break;
 80008ea:	bf00      	nop
	}

	/*Make Sure Sth is written to message buffer*/
	xMessageBufferSend(InputDataBuffer ,(void*)QueueItem.Value ,QueueItem.u16InputID ,0);
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <UserInteractModule_voidProcessInputData+0x2a4>)
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	68f9      	ldr	r1, [r7, #12]
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	2300      	movs	r3, #0
 80008f6:	f001 f8c9 	bl	8001a8c <xStreamBufferSend>
	vTaskResume( ControlModule_voidUpdateTask );
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <UserInteractModule_voidProcessInputData+0x2a8>)
 80008fc:	f001 fd0a 	bl	8002314 <vTaskResume>
}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	; 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	0800530c 	.word	0x0800530c
 800090c:	20004604 	.word	0x20004604
 8000910:	08000275 	.word	0x08000275

08000914 <UserInteractModule_voidPrintData>:

void UserInteractModule_voidPrintData(u16 Local_u16Input )
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	switch(Local_u16Input)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b70      	cmp	r3, #112	; 0x70
 8000920:	d04d      	beq.n	80009be <UserInteractModule_voidPrintData+0xaa>
 8000922:	2b70      	cmp	r3, #112	; 0x70
 8000924:	d80b      	bhi.n	800093e <UserInteractModule_voidPrintData+0x2a>
 8000926:	2b0b      	cmp	r3, #11
 8000928:	d022      	beq.n	8000970 <UserInteractModule_voidPrintData+0x5c>
 800092a:	2b0b      	cmp	r3, #11
 800092c:	d802      	bhi.n	8000934 <UserInteractModule_voidPrintData+0x20>
 800092e:	2b01      	cmp	r3, #1
 8000930:	d011      	beq.n	8000956 <UserInteractModule_voidPrintData+0x42>
 8000932:	e061      	b.n	80009f8 <UserInteractModule_voidPrintData+0xe4>
 8000934:	2b0c      	cmp	r3, #12
 8000936:	d028      	beq.n	800098a <UserInteractModule_voidPrintData+0x76>
 8000938:	2b6f      	cmp	r3, #111	; 0x6f
 800093a:	d033      	beq.n	80009a4 <UserInteractModule_voidPrintData+0x90>
 800093c:	e05c      	b.n	80009f8 <UserInteractModule_voidPrintData+0xe4>
 800093e:	2b79      	cmp	r3, #121	; 0x79
 8000940:	d04e      	beq.n	80009e0 <UserInteractModule_voidPrintData+0xcc>
 8000942:	2b79      	cmp	r3, #121	; 0x79
 8000944:	d802      	bhi.n	800094c <UserInteractModule_voidPrintData+0x38>
 8000946:	2b71      	cmp	r3, #113	; 0x71
 8000948:	d040      	beq.n	80009cc <UserInteractModule_voidPrintData+0xb8>
 800094a:	e055      	b.n	80009f8 <UserInteractModule_voidPrintData+0xe4>
 800094c:	2b7a      	cmp	r3, #122	; 0x7a
 800094e:	d04b      	beq.n	80009e8 <UserInteractModule_voidPrintData+0xd4>
 8000950:	2b7b      	cmp	r3, #123	; 0x7b
 8000952:	d04d      	beq.n	80009f0 <UserInteractModule_voidPrintData+0xdc>
 8000954:	e050      	b.n	80009f8 <UserInteractModule_voidPrintData+0xe4>
	{
		case INTRO_DATA:
			MUSART1_voidTransmitStringln((pu8)"*** Welcome ***");
 8000956:	482c      	ldr	r0, [pc, #176]	; (8000a08 <UserInteractModule_voidPrintData+0xf4>)
 8000958:	f004 fb7c 	bl	8005054 <MUSART1_voidTransmitStringln>
			MUSART1_voidTransmitStringln((pu8)"1 - User Mode.");
 800095c:	482b      	ldr	r0, [pc, #172]	; (8000a0c <UserInteractModule_voidPrintData+0xf8>)
 800095e:	f004 fb79 	bl	8005054 <MUSART1_voidTransmitStringln>
			MUSART1_voidTransmitStringln((pu8)"2 - Private Mode.");
 8000962:	482b      	ldr	r0, [pc, #172]	; (8000a10 <UserInteractModule_voidPrintData+0xfc>)
 8000964:	f004 fb76 	bl	8005054 <MUSART1_voidTransmitStringln>
			MUSART1_voidTransmitStringln((pu8)"Enter your selected choice : ");
 8000968:	482a      	ldr	r0, [pc, #168]	; (8000a14 <UserInteractModule_voidPrintData+0x100>)
 800096a:	f004 fb73 	bl	8005054 <MUSART1_voidTransmitStringln>
			break;
 800096e:	e047      	b.n	8000a00 <UserInteractModule_voidPrintData+0xec>

		case USER_MODE:
			MUSART1_voidTransmitStringln((pu8)"1 - Recharge.");
 8000970:	4829      	ldr	r0, [pc, #164]	; (8000a18 <UserInteractModule_voidPrintData+0x104>)
 8000972:	f004 fb6f 	bl	8005054 <MUSART1_voidTransmitStringln>
			MUSART1_voidTransmitStringln((pu8)"2 - Retrieve your power Consumption details since last charge.");
 8000976:	4829      	ldr	r0, [pc, #164]	; (8000a1c <UserInteractModule_voidPrintData+0x108>)
 8000978:	f004 fb6c 	bl	8005054 <MUSART1_voidTransmitStringln>
			MUSART1_voidTransmitStringln((pu8)"3 - Adjust Power Consumption Use Levels.");
 800097c:	4828      	ldr	r0, [pc, #160]	; (8000a20 <UserInteractModule_voidPrintData+0x10c>)
 800097e:	f004 fb69 	bl	8005054 <MUSART1_voidTransmitStringln>
			//MUSART1_voidTransmitStringln((pu8)"4 - Back.");
			MUSART1_voidTransmitStringln((pu8)"Enter your selected choice : ");
 8000982:	4824      	ldr	r0, [pc, #144]	; (8000a14 <UserInteractModule_voidPrintData+0x100>)
 8000984:	f004 fb66 	bl	8005054 <MUSART1_voidTransmitStringln>
			break;
 8000988:	e03a      	b.n	8000a00 <UserInteractModule_voidPrintData+0xec>

		case PRIVATE_MODE:
			MUSART1_voidTransmitStringln((pu8)"1 - Adjust KWm tariff.");
 800098a:	4826      	ldr	r0, [pc, #152]	; (8000a24 <UserInteractModule_voidPrintData+0x110>)
 800098c:	f004 fb62 	bl	8005054 <MUSART1_voidTransmitStringln>
			MUSART1_voidTransmitStringln((pu8)"2 - Adjust Time.");
 8000990:	4825      	ldr	r0, [pc, #148]	; (8000a28 <UserInteractModule_voidPrintData+0x114>)
 8000992:	f004 fb5f 	bl	8005054 <MUSART1_voidTransmitStringln>
			MUSART1_voidTransmitStringln((pu8)"3 - Adjust Date.");
 8000996:	4825      	ldr	r0, [pc, #148]	; (8000a2c <UserInteractModule_voidPrintData+0x118>)
 8000998:	f004 fb5c 	bl	8005054 <MUSART1_voidTransmitStringln>
			//MUSART1_voidTransmitStringln((pu8)"4 - Back.");
			MUSART1_voidTransmitStringln((pu8)"Enter your selected choice : ");
 800099c:	481d      	ldr	r0, [pc, #116]	; (8000a14 <UserInteractModule_voidPrintData+0x100>)
 800099e:	f004 fb59 	bl	8005054 <MUSART1_voidTransmitStringln>
			break;
 80009a2:	e02d      	b.n	8000a00 <UserInteractModule_voidPrintData+0xec>
/*		case PASSWORD:
			MUSART1_voidTransmitStringln((pu8)"Password : ");
			break;*/

		case RECHARGE :
			MUSART1_voidTransmitStringln((pu8)"1 - 20 L.E ");
 80009a4:	4822      	ldr	r0, [pc, #136]	; (8000a30 <UserInteractModule_voidPrintData+0x11c>)
 80009a6:	f004 fb55 	bl	8005054 <MUSART1_voidTransmitStringln>
			MUSART1_voidTransmitStringln((pu8)"2 - 50 L.E ");
 80009aa:	4822      	ldr	r0, [pc, #136]	; (8000a34 <UserInteractModule_voidPrintData+0x120>)
 80009ac:	f004 fb52 	bl	8005054 <MUSART1_voidTransmitStringln>
			MUSART1_voidTransmitStringln((pu8)"3 - 100 L.E ");
 80009b0:	4821      	ldr	r0, [pc, #132]	; (8000a38 <UserInteractModule_voidPrintData+0x124>)
 80009b2:	f004 fb4f 	bl	8005054 <MUSART1_voidTransmitStringln>
			//MUSART1_voidTransmitStringln((pu8)"4 - Back.");
			MUSART1_voidTransmitStringln((pu8)"Enter Value (L.E) : ");
 80009b6:	4821      	ldr	r0, [pc, #132]	; (8000a3c <UserInteractModule_voidPrintData+0x128>)
 80009b8:	f004 fb4c 	bl	8005054 <MUSART1_voidTransmitStringln>
			break;
 80009bc:	e020      	b.n	8000a00 <UserInteractModule_voidPrintData+0xec>

		case RETRIEVE_DATA :
			MUSART1_voidTransmitStringln((pu8)"Date    |  Time | Power Consumed(KWm) |	Price(L.E)");
 80009be:	4820      	ldr	r0, [pc, #128]	; (8000a40 <UserInteractModule_voidPrintData+0x12c>)
 80009c0:	f004 fb48 	bl	8005054 <MUSART1_voidTransmitStringln>
			MUSART1_voidTransmitStringln((pu8)"___________________________________________________");
 80009c4:	481f      	ldr	r0, [pc, #124]	; (8000a44 <UserInteractModule_voidPrintData+0x130>)
 80009c6:	f004 fb45 	bl	8005054 <MUSART1_voidTransmitStringln>
			break;
 80009ca:	e019      	b.n	8000a00 <UserInteractModule_voidPrintData+0xec>

		case ADJUST_POWER_LEVELS :
			MUSART1_voidTransmitStringln((pu8)"1 - Normal use.");
 80009cc:	481e      	ldr	r0, [pc, #120]	; (8000a48 <UserInteractModule_voidPrintData+0x134>)
 80009ce:	f004 fb41 	bl	8005054 <MUSART1_voidTransmitStringln>
			MUSART1_voidTransmitStringln((pu8)"2 - Moderate use.");
 80009d2:	481e      	ldr	r0, [pc, #120]	; (8000a4c <UserInteractModule_voidPrintData+0x138>)
 80009d4:	f004 fb3e 	bl	8005054 <MUSART1_voidTransmitStringln>
			MUSART1_voidTransmitStringln((pu8)"3 - High use.");
 80009d8:	481d      	ldr	r0, [pc, #116]	; (8000a50 <UserInteractModule_voidPrintData+0x13c>)
 80009da:	f004 fb3b 	bl	8005054 <MUSART1_voidTransmitStringln>
			//MUSART1_voidTransmitStringln((pu8)"4 - Back.");
			break;
 80009de:	e00f      	b.n	8000a00 <UserInteractModule_voidPrintData+0xec>

		case ADJUST_KWM_TARIFF :
			MUSART1_voidTransmitStringln((pu8)"Power Consumption Tariff in(L.E,	P.T) fotmat: ");
 80009e0:	481c      	ldr	r0, [pc, #112]	; (8000a54 <UserInteractModule_voidPrintData+0x140>)
 80009e2:	f004 fb37 	bl	8005054 <MUSART1_voidTransmitStringln>
			break;
 80009e6:	e00b      	b.n	8000a00 <UserInteractModule_voidPrintData+0xec>

		case ADJUST_TIME :
			MUSART1_voidTransmitStringln((pu8)"Time in(hour[0 -> 23] : minute[0 -> 59]) fotmat: ");
 80009e8:	481b      	ldr	r0, [pc, #108]	; (8000a58 <UserInteractModule_voidPrintData+0x144>)
 80009ea:	f004 fb33 	bl	8005054 <MUSART1_voidTransmitStringln>
			break;
 80009ee:	e007      	b.n	8000a00 <UserInteractModule_voidPrintData+0xec>

		case ADJUST_DATE :
			MUSART1_voidTransmitStringln((pu8)"Date in(Year / month / day) fotmat: ");
 80009f0:	481a      	ldr	r0, [pc, #104]	; (8000a5c <UserInteractModule_voidPrintData+0x148>)
 80009f2:	f004 fb2f 	bl	8005054 <MUSART1_voidTransmitStringln>
			break;
 80009f6:	e003      	b.n	8000a00 <UserInteractModule_voidPrintData+0xec>

		default :
			MUSART1_voidTransmitStringln((pu8)"Wrong Input. please Try Again.");
 80009f8:	4819      	ldr	r0, [pc, #100]	; (8000a60 <UserInteractModule_voidPrintData+0x14c>)
 80009fa:	f004 fb2b 	bl	8005054 <MUSART1_voidTransmitStringln>
			break;
 80009fe:	bf00      	nop
	}
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	08005320 	.word	0x08005320
 8000a0c:	08005330 	.word	0x08005330
 8000a10:	08005340 	.word	0x08005340
 8000a14:	08005354 	.word	0x08005354
 8000a18:	08005374 	.word	0x08005374
 8000a1c:	08005384 	.word	0x08005384
 8000a20:	080053c4 	.word	0x080053c4
 8000a24:	080053f0 	.word	0x080053f0
 8000a28:	08005408 	.word	0x08005408
 8000a2c:	0800541c 	.word	0x0800541c
 8000a30:	08005430 	.word	0x08005430
 8000a34:	0800543c 	.word	0x0800543c
 8000a38:	08005448 	.word	0x08005448
 8000a3c:	08005458 	.word	0x08005458
 8000a40:	08005470 	.word	0x08005470
 8000a44:	080054a4 	.word	0x080054a4
 8000a48:	080054d8 	.word	0x080054d8
 8000a4c:	080054e8 	.word	0x080054e8
 8000a50:	080054fc 	.word	0x080054fc
 8000a54:	0800550c 	.word	0x0800550c
 8000a58:	0800553c 	.word	0x0800553c
 8000a5c:	08005570 	.word	0x08005570
 8000a60:	08005598 	.word	0x08005598

08000a64 <UserInteractModule_voidPrintRetrievedData>:

void UserInteractModule_voidPrintRetrievedData(void* pvParameters)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	while(1)
 8000a6c:	e7fe      	b.n	8000a6c <UserInteractModule_voidPrintRetrievedData+0x8>

08000a6e <UserInteractModule_boolExtractData>:
	else
		return False;
}

u32 UserInteractModule_boolExtractData(u8 u8Start ,u8 u8End, pu8 pu8String)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b085      	sub	sp, #20
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	603a      	str	r2, [r7, #0]
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	71bb      	strb	r3, [r7, #6]
	u32 u32value = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
	for(u8 u8i = u8Start ; u8i <= u8End ; u8i++ )
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	72fb      	strb	r3, [r7, #11]
 8000a86:	e00f      	b.n	8000aa8 <UserInteractModule_boolExtractData+0x3a>
	{
		u32value = u32value*10 + (pu8String[u8i] - 48);
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4619      	mov	r1, r3
 8000a94:	7afb      	ldrb	r3, [r7, #11]
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	440b      	add	r3, r1
 8000a9e:	3b30      	subs	r3, #48	; 0x30
 8000aa0:	60fb      	str	r3, [r7, #12]
	for(u8 u8i = u8Start ; u8i <= u8End ; u8i++ )
 8000aa2:	7afb      	ldrb	r3, [r7, #11]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	72fb      	strb	r3, [r7, #11]
 8000aa8:	7afa      	ldrb	r2, [r7, #11]
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d9eb      	bls.n	8000a88 <UserInteractModule_boolExtractData+0x1a>
	}
	return u32value;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8000ac8:	f001 fcb4 	bl	8002434 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000acc:	4b4c      	ldr	r3, [pc, #304]	; (8000c00 <pvPortMalloc+0x144>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000ad4:	f000 f8e0 	bl	8000c98 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000ad8:	4b4a      	ldr	r3, [pc, #296]	; (8000c04 <pvPortMalloc+0x148>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f040 8086 	bne.w	8000bf2 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d01e      	beq.n	8000b2a <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8000aec:	2208      	movs	r2, #8
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d218      	bcs.n	8000b2a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8000af8:	2208      	movs	r2, #8
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d011      	beq.n	8000b2e <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f023 0307 	bic.w	r3, r3, #7
 8000b10:	3308      	adds	r3, #8
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d205      	bcs.n	8000b24 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f023 0307 	bic.w	r3, r3, #7
 8000b1e:	3308      	adds	r3, #8
 8000b20:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000b22:	e004      	b.n	8000b2e <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000b28:	e001      	b.n	8000b2e <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d05e      	beq.n	8000bf2 <pvPortMalloc+0x136>
 8000b34:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <pvPortMalloc+0x14c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d859      	bhi.n	8000bf2 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000b3e:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <pvPortMalloc+0x150>)
 8000b40:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8000b42:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <pvPortMalloc+0x150>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b48:	e004      	b.n	8000b54 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d903      	bls.n	8000b66 <pvPortMalloc+0xaa>
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1f1      	bne.n	8000b4a <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <pvPortMalloc+0x144>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d040      	beq.n	8000bf2 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2208      	movs	r2, #8
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	1ad2      	subs	r2, r2, r3
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d90f      	bls.n	8000bb2 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	1ad2      	subs	r2, r2, r3
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f000 f8d5 	bl	8000d5c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <pvPortMalloc+0x14c>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <pvPortMalloc+0x14c>)
 8000bbe:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <pvPortMalloc+0x14c>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <pvPortMalloc+0x154>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d203      	bcs.n	8000bd4 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <pvPortMalloc+0x14c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <pvPortMalloc+0x154>)
 8000bd2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <pvPortMalloc+0x148>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <pvPortMalloc+0x158>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <pvPortMalloc+0x158>)
 8000bf0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000bf2:	f001 fc2d 	bl	8002450 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000445c 	.word	0x2000445c
 8000c04:	20004470 	.word	0x20004470
 8000c08:	20004460 	.word	0x20004460
 8000c0c:	20004454 	.word	0x20004454
 8000c10:	20004464 	.word	0x20004464
 8000c14:	20004468 	.word	0x20004468

08000c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d02c      	beq.n	8000c84 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8000c2a:	2308      	movs	r3, #8
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4413      	add	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <vPortFree+0x74>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d01e      	beq.n	8000c84 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d11a      	bne.n	8000c84 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <vPortFree+0x74>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	43db      	mvns	r3, r3
 8000c58:	401a      	ands	r2, r3
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8000c5e:	f001 fbe9 	bl	8002434 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <vPortFree+0x78>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <vPortFree+0x78>)
 8000c6e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000c70:	68b8      	ldr	r0, [r7, #8]
 8000c72:	f000 f873 	bl	8000d5c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <vPortFree+0x7c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <vPortFree+0x7c>)
 8000c7e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8000c80:	f001 fbe6 	bl	8002450 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20004470 	.word	0x20004470
 8000c90:	20004460 	.word	0x20004460
 8000c94:	2000446c 	.word	0x2000446c

08000c98 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000c9e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000ca2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8000ca4:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <prvHeapInit+0xac>)
 8000ca6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00c      	beq.n	8000ccc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3307      	adds	r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f023 0307 	bic.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	4a1f      	ldr	r2, [pc, #124]	; (8000d44 <prvHeapInit+0xac>)
 8000cc8:	4413      	add	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	; (8000d48 <prvHeapInit+0xb0>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <prvHeapInit+0xb0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1a9b      	subs	r3, r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f023 0307 	bic.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <prvHeapInit+0xb4>)
 8000cf8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <prvHeapInit+0xb4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <prvHeapInit+0xb4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	1ad2      	subs	r2, r2, r3
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <prvHeapInit+0xb4>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <prvHeapInit+0xb8>)
 8000d26:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <prvHeapInit+0xbc>)
 8000d2e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <prvHeapInit+0xc0>)
 8000d32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d36:	601a      	str	r2, [r3, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000054 	.word	0x20000054
 8000d48:	20004454 	.word	0x20004454
 8000d4c:	2000445c 	.word	0x2000445c
 8000d50:	20004464 	.word	0x20004464
 8000d54:	20004460 	.word	0x20004460
 8000d58:	20004470 	.word	0x20004470

08000d5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <prvInsertBlockIntoFreeList+0xa8>)
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	e002      	b.n	8000d70 <prvInsertBlockIntoFreeList+0x14>
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d8f7      	bhi.n	8000d6a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	4413      	add	r3, r2
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d108      	bne.n	8000d9e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	441a      	add	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	441a      	add	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d118      	bne.n	8000de4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <prvInsertBlockIntoFreeList+0xac>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d00d      	beq.n	8000dda <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	441a      	add	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e008      	b.n	8000dec <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <prvInsertBlockIntoFreeList+0xac>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e003      	b.n	8000dec <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d002      	beq.n	8000dfa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	20004454 	.word	0x20004454
 8000e08:	2000445c 	.word	0x2000445c

08000e0c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f103 0208 	add.w	r2, r3, #8
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e24:	811a      	strh	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f103 0208 	add.w	r2, r3, #8
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f103 0208 	add.w	r2, r3, #8
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000e62:	b480      	push	{r7}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	817b      	strh	r3, [r7, #10]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000eb8:	897b      	ldrh	r3, [r7, #10]
 8000eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d103      	bne.n	8000eca <vListInsert+0x22>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e00c      	b.n	8000ee4 <vListInsert+0x3c>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3308      	adds	r3, #8
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	e002      	b.n	8000ed8 <vListInsert+0x30>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	897a      	ldrh	r2, [r7, #10]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d2f6      	bcs.n	8000ed2 <vListInsert+0x2a>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	601a      	str	r2, [r3, #0]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6892      	ldr	r2, [r2, #8]
 8000f30:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6852      	ldr	r2, [r2, #4]
 8000f3a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d103      	bne.n	8000f4e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	1e5a      	subs	r2, r3, #1
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3b04      	subs	r3, #4
 8000f8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f023 0201 	bic.w	r2, r3, #1
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3b04      	subs	r3, #4
 8000f9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <pxPortInitialiseStack+0x54>)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3b14      	subs	r3, #20
 8000fa6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3b20      	subs	r3, #32
 8000fb2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	08000fc5 	.word	0x08000fc5

08000fc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fd2:	f383 8811 	msr	BASEPRI, r3
 8000fd6:	f3bf 8f6f 	isb	sy
 8000fda:	f3bf 8f4f 	dsb	sy
 8000fde:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000fe0:	bf00      	nop
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0fc      	beq.n	8000fe2 <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
	...

08001000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <pxCurrentTCBConst2>)
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	6808      	ldr	r0, [r1, #0]
 8001006:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800100a:	f380 8809 	msr	PSP, r0
 800100e:	f3bf 8f6f 	isb	sy
 8001012:	f04f 0000 	mov.w	r0, #0
 8001016:	f380 8811 	msr	BASEPRI, r0
 800101a:	f04e 0e0d 	orr.w	lr, lr, #13
 800101e:	4770      	bx	lr

08001020 <pxCurrentTCBConst2>:
 8001020:	2000447c 	.word	0x2000447c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop

08001028 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <prvPortStartFirstTask+0x1c>)
 800102a:	6800      	ldr	r0, [r0, #0]
 800102c:	6800      	ldr	r0, [r0, #0]
 800102e:	f380 8808 	msr	MSP, r0
 8001032:	b662      	cpsie	i
 8001034:	b661      	cpsie	f
 8001036:	f3bf 8f4f 	dsb	sy
 800103a:	f3bf 8f6f 	isb	sy
 800103e:	df00      	svc	0
 8001040:	bf00      	nop
 8001042:	0000      	.short	0x0000
 8001044:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop

0800104c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <xPortStartScheduler+0xac>)
 8001054:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	22ff      	movs	r2, #255	; 0xff
 8001062:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <xPortStartScheduler+0xb0>)
 8001078:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <xPortStartScheduler+0xb4>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001080:	e009      	b.n	8001096 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <xPortStartScheduler+0xb4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3b01      	subs	r3, #1
 8001088:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <xPortStartScheduler+0xb4>)
 800108a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	2b80      	cmp	r3, #128	; 0x80
 80010a0:	d0ef      	beq.n	8001082 <xPortStartScheduler+0x36>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <xPortStartScheduler+0xb4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	4a15      	ldr	r2, [pc, #84]	; (8001100 <xPortStartScheduler+0xb4>)
 80010aa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <xPortStartScheduler+0xb4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <xPortStartScheduler+0xb4>)
 80010b6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <xPortStartScheduler+0xb8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <xPortStartScheduler+0xb8>)
 80010c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <xPortStartScheduler+0xb8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <xPortStartScheduler+0xb8>)
 80010d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80010d6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80010d8:	f000 f88e 	bl	80011f8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <xPortStartScheduler+0xbc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80010e2:	f7ff ffa1 	bl	8001028 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80010e6:	f001 fbb7 	bl	8002858 <vTaskSwitchContext>
    prvTaskExitError();
 80010ea:	f7ff ff6b 	bl	8000fc4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	e000e400 	.word	0xe000e400
 80010fc:	20004474 	.word	0x20004474
 8001100:	20004478 	.word	0x20004478
 8001104:	e000ed20 	.word	0xe000ed20
 8001108:	20000000 	.word	0x20000000

0800110c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001116:	f383 8811 	msr	BASEPRI, r3
 800111a:	f3bf 8f6f 	isb	sy
 800111e:	f3bf 8f4f 	dsb	sy
 8001122:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <vPortEnterCritical+0x2c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a03      	ldr	r2, [pc, #12]	; (8001138 <vPortEnterCritical+0x2c>)
 800112c:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	20000000 	.word	0x20000000

0800113c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <vPortExitCritical+0x2c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3b01      	subs	r3, #1
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <vPortExitCritical+0x2c>)
 800114a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <vPortExitCritical+0x2c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d104      	bne.n	800115e <vPortExitCritical+0x22>
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000000 	.word	0x20000000
 800116c:	00000000 	.word	0x00000000

08001170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001170:	f3ef 8009 	mrs	r0, PSP
 8001174:	f3bf 8f6f 	isb	sy
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <pxCurrentTCBConst>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001180:	6010      	str	r0, [r2, #0]
 8001182:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001186:	f04f 0050 	mov.w	r0, #80	; 0x50
 800118a:	f380 8811 	msr	BASEPRI, r0
 800118e:	f001 fb63 	bl	8002858 <vTaskSwitchContext>
 8001192:	f04f 0000 	mov.w	r0, #0
 8001196:	f380 8811 	msr	BASEPRI, r0
 800119a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800119e:	6819      	ldr	r1, [r3, #0]
 80011a0:	6808      	ldr	r0, [r1, #0]
 80011a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80011a6:	f380 8809 	msr	PSP, r0
 80011aa:	f3bf 8f6f 	isb	sy
 80011ae:	4770      	bx	lr

080011b0 <pxCurrentTCBConst>:
 80011b0:	2000447c 	.word	0x2000447c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop

080011b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
        __asm volatile
 80011be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c2:	f383 8811 	msr	BASEPRI, r3
 80011c6:	f3bf 8f6f 	isb	sy
 80011ca:	f3bf 8f4f 	dsb	sy
 80011ce:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80011d0:	f001 fa96 	bl	8002700 <xTaskIncrementTick>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <SysTick_Handler+0x3c>)
 80011dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	e000ed04 	.word	0xe000ed04

080011f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <vPortSetupTimerInterrupt+0x28>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <vPortSetupTimerInterrupt+0x2c>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <vPortSetupTimerInterrupt+0x30>)
 800120a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800120e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <vPortSetupTimerInterrupt+0x28>)
 8001212:	2207      	movs	r2, #7
 8001214:	601a      	str	r2, [r3, #0]
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010
 8001224:	e000e018 	.word	0xe000e018
 8001228:	e000e014 	.word	0xe000e014

0800122c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001232:	f3ef 8305 	mrs	r3, IPSR
 8001236:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b0f      	cmp	r3, #15
 800123c:	d904      	bls.n	8001248 <vPortValidateInterruptPriority+0x1c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <vPortValidateInterruptPriority+0x28>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	70fb      	strb	r3, [r7, #3]
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
    }
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e3f0 	.word	0xe000e3f0

08001258 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
 8001266:	f7ff ff51 	bl	800110c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001272:	68f9      	ldr	r1, [r7, #12]
 8001274:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001276:	fb01 f303 	mul.w	r3, r1, r3
 800127a:	441a      	add	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001296:	3b01      	subs	r3, #1
 8001298:	68f9      	ldr	r1, [r7, #12]
 800129a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800129c:	fb01 f303 	mul.w	r3, r1, r3
 80012a0:	441a      	add	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	22ff      	movs	r2, #255	; 0xff
 80012aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	22ff      	movs	r2, #255	; 0xff
 80012b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d114      	bne.n	80012e6 <xQueueGenericReset+0x8e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d01a      	beq.n	80012fa <xQueueGenericReset+0xa2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3310      	adds	r3, #16
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fb43 	bl	8002954 <xTaskRemoveFromEventList>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d012      	beq.n	80012fa <xQueueGenericReset+0xa2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <xQueueGenericReset+0xb0>)
 80012d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	f3bf 8f4f 	dsb	sy
 80012e0:	f3bf 8f6f 	isb	sy
 80012e4:	e009      	b.n	80012fa <xQueueGenericReset+0xa2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3310      	adds	r3, #16
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fd8e 	bl	8000e0c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3324      	adds	r3, #36	; 0x24
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fd89 	bl	8000e0c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80012fa:	f7ff ff1f 	bl	800113c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	e000ed04 	.word	0xe000ed04

0800130c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af02      	add	r7, sp, #8
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	4613      	mov	r3, r2
 8001318:	71fb      	strb	r3, [r7, #7]
        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	61fb      	str	r3, [r7, #28]
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	3350      	adds	r3, #80	; 0x50
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fbc7 	bl	8000abc <pvPortMalloc>
 800132e:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00d      	beq.n	8001352 <xQueueGenericCreate+0x46>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3350      	adds	r3, #80	; 0x50
 800133e:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001340:	79fa      	ldrb	r2, [r7, #7]
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	4613      	mov	r3, r2
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 f805 	bl	800135c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001352:	69bb      	ldr	r3, [r7, #24]
    }
 8001354:	4618      	mov	r0, r3
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d103      	bne.n	8001378 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e002      	b.n	800137e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800138a:	2101      	movs	r1, #1
 800138c:	69b8      	ldr	r0, [r7, #24]
 800138e:	f7ff ff63 	bl	8001258 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	78fa      	ldrb	r2, [r7, #3]
 8001396:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	4613      	mov	r3, r2
 80013b2:	80fb      	strh	r3, [r7, #6]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80013bc:	f7ff fea6 	bl	800110c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d302      	bcc.n	80013d2 <xQueueGenericSend+0x2e>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d129      	bne.n	8001426 <xQueueGenericSend+0x82>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	6a38      	ldr	r0, [r7, #32]
 80013d8:	f000 f992 	bl	8001700 <prvCopyDataToQueue>
 80013dc:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d010      	beq.n	8001408 <xQueueGenericSend+0x64>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	3324      	adds	r3, #36	; 0x24
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fab2 	bl	8002954 <xTaskRemoveFromEventList>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d013      	beq.n	800141e <xQueueGenericSend+0x7a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80013f6:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <xQueueGenericSend+0x154>)
 80013f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	f3bf 8f4f 	dsb	sy
 8001402:	f3bf 8f6f 	isb	sy
 8001406:	e00a      	b.n	800141e <xQueueGenericSend+0x7a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <xQueueGenericSend+0x7a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800140e:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <xQueueGenericSend+0x154>)
 8001410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	f3bf 8f4f 	dsb	sy
 800141a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800141e:	f7ff fe8d 	bl	800113c <vPortExitCritical>
                return pdPASS;
 8001422:	2301      	movs	r3, #1
 8001424:	e063      	b.n	80014ee <xQueueGenericSend+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d103      	bne.n	8001434 <xQueueGenericSend+0x90>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800142c:	f7ff fe86 	bl	800113c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001430:	2300      	movs	r3, #0
 8001432:	e05c      	b.n	80014ee <xQueueGenericSend+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <xQueueGenericSend+0xa4>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4618      	mov	r0, r3
 8001440:	f001 faf6 	bl	8002a30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001444:	2301      	movs	r3, #1
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001448:	f7ff fe78 	bl	800113c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800144c:	f000 fff2 	bl	8002434 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001450:	f7ff fe5c 	bl	800110c <vPortEnterCritical>
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800145a:	b25b      	sxtb	r3, r3
 800145c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001460:	d103      	bne.n	800146a <xQueueGenericSend+0xc6>
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001470:	b25b      	sxtb	r3, r3
 8001472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001476:	d103      	bne.n	8001480 <xQueueGenericSend+0xdc>
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001480:	f7ff fe5c 	bl	800113c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001484:	1dba      	adds	r2, r7, #6
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f001 fae5 	bl	8002a5c <xTaskCheckForTimeOut>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d124      	bne.n	80014e2 <xQueueGenericSend+0x13e>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001498:	6a38      	ldr	r0, [r7, #32]
 800149a:	f000 fa29 	bl	80018f0 <prvIsQueueFull>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d018      	beq.n	80014d6 <xQueueGenericSend+0x132>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	3310      	adds	r3, #16
 80014a8:	88fa      	ldrh	r2, [r7, #6]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fa19 	bl	80028e4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80014b2:	6a38      	ldr	r0, [r7, #32]
 80014b4:	f000 f9b4 	bl	8001820 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80014b8:	f000 ffca 	bl	8002450 <xTaskResumeAll>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f47f af7c 	bne.w	80013bc <xQueueGenericSend+0x18>
                {
                    portYIELD_WITHIN_API();
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <xQueueGenericSend+0x154>)
 80014c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	f3bf 8f4f 	dsb	sy
 80014d0:	f3bf 8f6f 	isb	sy
 80014d4:	e772      	b.n	80013bc <xQueueGenericSend+0x18>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80014d6:	6a38      	ldr	r0, [r7, #32]
 80014d8:	f000 f9a2 	bl	8001820 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80014dc:	f000 ffb8 	bl	8002450 <xTaskResumeAll>
 80014e0:	e76c      	b.n	80013bc <xQueueGenericSend+0x18>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80014e2:	6a38      	ldr	r0, [r7, #32]
 80014e4:	f000 f99c 	bl	8001820 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80014e8:	f000 ffb2 	bl	8002450 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80014ec:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000ed04 	.word	0xe000ed04

080014fc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800150e:	f7ff fe8d 	bl	800122c <vPortValidateInterruptPriority>
        __asm volatile
 8001512:	f3ef 8211 	mrs	r2, BASEPRI
 8001516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151a:	f383 8811 	msr	BASEPRI, r3
 800151e:	f3bf 8f6f 	isb	sy
 8001522:	f3bf 8f4f 	dsb	sy
 8001526:	61ba      	str	r2, [r7, #24]
 8001528:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 800152a:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001536:	429a      	cmp	r2, r3
 8001538:	d302      	bcc.n	8001540 <xQueueGenericSendFromISR+0x44>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d12f      	bne.n	80015a0 <xQueueGenericSendFromISR+0xa4>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001556:	f000 f8d3 	bl	8001700 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800155a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800155e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001562:	d112      	bne.n	800158a <xQueueGenericSendFromISR+0x8e>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	2b00      	cmp	r3, #0
 800156a:	d016      	beq.n	800159a <xQueueGenericSendFromISR+0x9e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	3324      	adds	r3, #36	; 0x24
 8001570:	4618      	mov	r0, r3
 8001572:	f001 f9ef 	bl	8002954 <xTaskRemoveFromEventList>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00e      	beq.n	800159a <xQueueGenericSendFromISR+0x9e>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <xQueueGenericSendFromISR+0x9e>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e007      	b.n	800159a <xQueueGenericSendFromISR+0x9e>
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800158a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800158e:	3301      	adds	r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	b25a      	sxtb	r2, r3
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800159a:	2301      	movs	r3, #1
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
        {
 800159e:	e001      	b.n	80015a4 <xQueueGenericSendFromISR+0xa8>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	613b      	str	r3, [r7, #16]
        __asm volatile
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80015ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3730      	adds	r7, #48	; 0x30
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	4613      	mov	r3, r2
 80015c4:	80fb      	strh	r3, [r7, #6]
    BaseType_t xEntryTimeSet = pdFALSE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80015ce:	f7ff fd9d 	bl	800110c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d6:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01f      	beq.n	800161e <xQueueReceive+0x66>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	6a38      	ldr	r0, [r7, #32]
 80015e2:	f000 f8f7 	bl	80017d4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00f      	beq.n	8001616 <xQueueReceive+0x5e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	3310      	adds	r3, #16
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 f9aa 	bl	8002954 <xTaskRemoveFromEventList>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d007      	beq.n	8001616 <xQueueReceive+0x5e>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <xQueueReceive+0x144>)
 8001608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	f3bf 8f4f 	dsb	sy
 8001612:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001616:	f7ff fd91 	bl	800113c <vPortExitCritical>
                return pdPASS;
 800161a:	2301      	movs	r3, #1
 800161c:	e069      	b.n	80016f2 <xQueueReceive+0x13a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d103      	bne.n	800162c <xQueueReceive+0x74>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001624:	f7ff fd8a 	bl	800113c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001628:	2300      	movs	r3, #0
 800162a:	e062      	b.n	80016f2 <xQueueReceive+0x13a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	2b00      	cmp	r3, #0
 8001630:	d106      	bne.n	8001640 <xQueueReceive+0x88>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4618      	mov	r0, r3
 8001638:	f001 f9fa 	bl	8002a30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800163c:	2301      	movs	r3, #1
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001640:	f7ff fd7c 	bl	800113c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001644:	f000 fef6 	bl	8002434 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001648:	f7ff fd60 	bl	800110c <vPortEnterCritical>
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001652:	b25b      	sxtb	r3, r3
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d103      	bne.n	8001662 <xQueueReceive+0xaa>
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001668:	b25b      	sxtb	r3, r3
 800166a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166e:	d103      	bne.n	8001678 <xQueueReceive+0xc0>
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001678:	f7ff fd60 	bl	800113c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800167c:	1dba      	adds	r2, r7, #6
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f001 f9e9 	bl	8002a5c <xTaskCheckForTimeOut>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d123      	bne.n	80016d8 <xQueueReceive+0x120>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001690:	6a38      	ldr	r0, [r7, #32]
 8001692:	f000 f917 	bl	80018c4 <prvIsQueueEmpty>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d017      	beq.n	80016cc <xQueueReceive+0x114>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	3324      	adds	r3, #36	; 0x24
 80016a0:	88fa      	ldrh	r2, [r7, #6]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 f91d 	bl	80028e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80016aa:	6a38      	ldr	r0, [r7, #32]
 80016ac:	f000 f8b8 	bl	8001820 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80016b0:	f000 fece 	bl	8002450 <xTaskResumeAll>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d189      	bne.n	80015ce <xQueueReceive+0x16>
                {
                    portYIELD_WITHIN_API();
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <xQueueReceive+0x144>)
 80016bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f3bf 8f4f 	dsb	sy
 80016c6:	f3bf 8f6f 	isb	sy
 80016ca:	e780      	b.n	80015ce <xQueueReceive+0x16>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80016cc:	6a38      	ldr	r0, [r7, #32]
 80016ce:	f000 f8a7 	bl	8001820 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80016d2:	f000 febd 	bl	8002450 <xTaskResumeAll>
 80016d6:	e77a      	b.n	80015ce <xQueueReceive+0x16>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80016d8:	6a38      	ldr	r0, [r7, #32]
 80016da:	f000 f8a1 	bl	8001820 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80016de:	f000 feb7 	bl	8002450 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016e2:	6a38      	ldr	r0, [r7, #32]
 80016e4:	f000 f8ee 	bl	80018c4 <prvIsQueueEmpty>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f43f af6f 	beq.w	80015ce <xQueueReceive+0x16>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80016f0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3728      	adds	r7, #40	; 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	e000ed04 	.word	0xe000ed04

08001700 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10d      	bne.n	800173a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d14d      	bne.n	80017c2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	4618      	mov	r0, r3
 800172c:	f001 fa8c 	bl	8002c48 <xTaskPriorityDisinherit>
 8001730:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	e043      	b.n	80017c2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d119      	bne.n	8001774 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6858      	ldr	r0, [r3, #4]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	461a      	mov	r2, r3
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	f003 fd98 	bl	8005280 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	441a      	add	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	429a      	cmp	r2, r3
 8001768:	d32b      	bcc.n	80017c2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	e026      	b.n	80017c2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	68d8      	ldr	r0, [r3, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	461a      	mov	r2, r3
 800177e:	68b9      	ldr	r1, [r7, #8]
 8001780:	f003 fd7e 	bl	8005280 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	425b      	negs	r3, r3
 800178e:	441a      	add	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	425b      	negs	r3, r3
 80017aa:	441a      	add	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d105      	bne.n	80017c2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	3b01      	subs	r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80017ca:	697b      	ldr	r3, [r7, #20]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d018      	beq.n	8001818 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	441a      	add	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d303      	bcc.n	8001808 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68d9      	ldr	r1, [r3, #12]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	461a      	mov	r2, r3
 8001812:	6838      	ldr	r0, [r7, #0]
 8001814:	f003 fd34 	bl	8005280 <memcpy>
    }
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001828:	f7ff fc70 	bl	800110c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001832:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001834:	e011      	b.n	800185a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	2b00      	cmp	r3, #0
 800183c:	d012      	beq.n	8001864 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3324      	adds	r3, #36	; 0x24
 8001842:	4618      	mov	r0, r3
 8001844:	f001 f886 	bl	8002954 <xTaskRemoveFromEventList>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800184e:	f001 f951 	bl	8002af4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	3b01      	subs	r3, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	2b00      	cmp	r3, #0
 8001860:	dce9      	bgt.n	8001836 <prvUnlockQueue+0x16>
 8001862:	e000      	b.n	8001866 <prvUnlockQueue+0x46>
                        break;
 8001864:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	22ff      	movs	r2, #255	; 0xff
 800186a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800186e:	f7ff fc65 	bl	800113c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001872:	f7ff fc4b 	bl	800110c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800187c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800187e:	e011      	b.n	80018a4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d012      	beq.n	80018ae <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3310      	adds	r3, #16
 800188c:	4618      	mov	r0, r3
 800188e:	f001 f861 	bl	8002954 <xTaskRemoveFromEventList>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001898:	f001 f92c 	bl	8002af4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800189c:	7bbb      	ldrb	r3, [r7, #14]
 800189e:	3b01      	subs	r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80018a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	dce9      	bgt.n	8001880 <prvUnlockQueue+0x60>
 80018ac:	e000      	b.n	80018b0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80018ae:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	22ff      	movs	r2, #255	; 0xff
 80018b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80018b8:	f7ff fc40 	bl	800113c <vPortExitCritical>
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80018cc:	f7ff fc1e 	bl	800110c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80018d8:	2301      	movs	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e001      	b.n	80018e2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80018e2:	f7ff fc2b 	bl	800113c <vPortExitCritical>

    return xReturn;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80018f8:	f7ff fc08 	bl	800110c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001904:	429a      	cmp	r2, r3
 8001906:	d102      	bne.n	800190e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001908:	2301      	movs	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	e001      	b.n	8001912 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001912:	f7ff fc13 	bl	800113c <vPortExitCritical>

    return xReturn;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e014      	b.n	800195a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <vQueueAddToRegistry+0x4c>)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10b      	bne.n	8001954 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800193c:	490b      	ldr	r1, [pc, #44]	; (800196c <vQueueAddToRegistry+0x4c>)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001946:	4a09      	ldr	r2, [pc, #36]	; (800196c <vQueueAddToRegistry+0x4c>)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4413      	add	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8001952:	e005      	b.n	8001960 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3301      	adds	r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d9e7      	bls.n	8001930 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	200045d4 	.word	0x200045d4

08001970 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	460b      	mov	r3, r1
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	817b      	strh	r3, [r7, #10]
        Queue_t * const pxQueue = xQueue;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001982:	f7ff fbc3 	bl	800110c <vPortEnterCritical>
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800198c:	b25b      	sxtb	r3, r3
 800198e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001992:	d103      	bne.n	800199c <vQueueWaitForMessageRestricted+0x2c>
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019a2:	b25b      	sxtb	r3, r3
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a8:	d103      	bne.n	80019b2 <vQueueWaitForMessageRestricted+0x42>
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019b2:	f7ff fbc3 	bl	800113c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <vQueueWaitForMessageRestricted+0x5c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3324      	adds	r3, #36	; 0x24
 80019c2:	8979      	ldrh	r1, [r7, #10]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 ffa4 	bl	8002914 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80019cc:	6978      	ldr	r0, [r7, #20]
 80019ce:	f7ff ff27 	bl	8001820 <prvUnlockQueue>
    }
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <xStreamBufferGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                     size_t xTriggerLevelBytes,
                                                     BaseType_t xIsMessageBuffer )
    {
 80019da:	b580      	push	{r7, lr}
 80019dc:	b088      	sub	sp, #32
 80019de:	af02      	add	r7, sp, #8
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]

        /* In case the stream buffer is going to be used as a message buffer
         * (that is, it will hold discrete messages with a little meta data that
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xIsMessageBuffer == pdTRUE )
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d102      	bne.n	80019f2 <xStreamBufferGenericCreate+0x18>
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80019ec:	2301      	movs	r3, #1
 80019ee:	74fb      	strb	r3, [r7, #19]
 80019f0:	e001      	b.n	80019f6 <xStreamBufferGenericCreate+0x1c>
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
        }
        else
        {
            /* Not a message buffer and not statically allocated. */
            ucFlags = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	74fb      	strb	r3, [r7, #19]

        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

        /* A trigger level of 0 would cause a waiting task to unblock even when
         * the buffer was empty. */
        if( xTriggerLevelBytes == ( size_t ) 0 )
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <xStreamBufferGenericCreate+0x26>
        {
            xTriggerLevelBytes = ( size_t ) 1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
         * and the buffer follows immediately after.  The requested size is
         * incremented so the free space is returned as the user would expect -
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f113 0f26 	cmn.w	r3, #38	; 0x26
 8001a06:	d809      	bhi.n	8001a1c <xStreamBufferGenericCreate+0x42>
        {
            xBufferSizeBytes++;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
            pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3324      	adds	r3, #36	; 0x24
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f852 	bl	8000abc <pvPortMalloc>
 8001a18:	6178      	str	r0, [r7, #20]
 8001a1a:	e001      	b.n	8001a20 <xStreamBufferGenericCreate+0x46>
        }
        else
        {
            pucAllocatedMemory = NULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
        }
        

        if( pucAllocatedMemory != NULL )
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <xStreamBufferGenericCreate+0x60>
        {
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001a2c:	7cfb      	ldrb	r3, [r7, #19]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	6978      	ldr	r0, [r7, #20]
 8001a36:	f000 fa41 	bl	8001ebc <prvInitialiseNewStreamBuffer>
        else
        {
            traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
        }

        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8001a3a:	697b      	ldr	r3, [r7, #20]
    }
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <xStreamBufferSpacesAvailable>:
    return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60bb      	str	r3, [r7, #8]
    size_t xSpace;

    configASSERT( pxStreamBuffer );

    xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
    xSpace -= pxStreamBuffer->xHead;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	60fb      	str	r3, [r7, #12]
    xSpace -= ( size_t ) 1;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]

    if( xSpace >= pxStreamBuffer->xLength )
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d304      	bcc.n	8001a80 <xStreamBufferSpacesAvailable+0x3c>
    {
        xSpace -= pxStreamBuffer->xLength;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	60fb      	str	r3, [r7, #12]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xSpace;
 8001a80:	68fb      	ldr	r3, [r7, #12]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08e      	sub	sp, #56	; 0x38
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	807b      	strh	r3, [r7, #2]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
    size_t xReturn, xSpace = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t xRequiredSpace = xDataLengthBytes;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	623b      	str	r3, [r7, #32]

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	7f1b      	ldrb	r3, [r3, #28]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <xStreamBufferSend+0x42>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8001aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abc:	3304      	adds	r3, #4
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
 8001ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d908      	bls.n	8001ada <xStreamBufferSend+0x4e>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	e005      	b.n	8001ada <xStreamBufferSend+0x4e>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
 8001ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d901      	bls.n	8001ada <xStreamBufferSend+0x4e>
        {
            xRequiredSpace = xMaxReportedSpace;
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d032      	beq.n	8001b46 <xStreamBufferSend+0xba>
    {
        vTaskSetTimeOutState( &xTimeOut );
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 ff89 	bl	80029fc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
 8001aea:	f7ff fb0f 	bl	800110c <vPortEnterCritical>
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001af0:	f7ff ffa8 	bl	8001a44 <xStreamBufferSpacesAvailable>
 8001af4:	62f8      	str	r0, [r7, #44]	; 0x2c

                if( xSpace < xRequiredSpace )
 8001af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d209      	bcs.n	8001b12 <xStreamBufferSend+0x86>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
 8001afe:	2100      	movs	r1, #0
 8001b00:	2000      	movs	r0, #0
 8001b02:	f001 fa1b 	bl	8002f3c <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8001b06:	f001 f873 	bl	8002bf0 <xTaskGetCurrentTaskHandle>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	615a      	str	r2, [r3, #20]
 8001b10:	e002      	b.n	8001b18 <xStreamBufferSend+0x8c>
                }
                else
                {
                    taskEXIT_CRITICAL();
 8001b12:	f7ff fb13 	bl	800113c <vPortExitCritical>
                    break;
 8001b16:	e016      	b.n	8001b46 <xStreamBufferSend+0xba>
                }
            }
            taskEXIT_CRITICAL();
 8001b18:	f7ff fb10 	bl	800113c <vPortExitCritical>

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2300      	movs	r3, #0
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2000      	movs	r0, #0
 8001b28:	f001 f8ea 	bl	8002d00 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8001b32:	1cba      	adds	r2, r7, #2
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 ff8e 	bl	8002a5c <xTaskCheckForTimeOut>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0d1      	beq.n	8001aea <xStreamBufferSend+0x5e>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
 8001b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d103      	bne.n	8001b54 <xStreamBufferSend+0xc8>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b4e:	f7ff ff79 	bl	8001a44 <xStreamBufferSpacesAvailable>
 8001b52:	62f8      	str	r0, [r7, #44]	; 0x2c
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8001b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b60:	f000 f825 	bl	8001bae <prvWriteMessageToBuffer>
 8001b64:	61f8      	str	r0, [r7, #28]

    if( xReturn > ( size_t ) 0 )
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01b      	beq.n	8001ba4 <xStreamBufferSend+0x118>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8001b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b6e:	f000 f986 	bl	8001e7e <prvBytesInBuffer>
 8001b72:	4602      	mov	r2, r0
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d313      	bcc.n	8001ba4 <xStreamBufferSend+0x118>
        {
            sbSEND_COMPLETED( pxStreamBuffer );
 8001b7c:	f000 fc5a 	bl	8002434 <vTaskSuspendAll>
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00b      	beq.n	8001ba0 <xStreamBufferSend+0x114>
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	6918      	ldr	r0, [r3, #16]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2300      	movs	r3, #0
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	f001 f92b 	bl	8002df0 <xTaskGenericNotify>
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
 8001ba0:	f000 fc56 	bl	8002450 <xTaskResumeAll>
    {
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3730      	adds	r7, #48	; 0x30
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                       const void * pvTxData,
                                       size_t xDataLengthBytes,
                                       size_t xSpace,
                                       size_t xRequiredSpace )
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	603b      	str	r3, [r7, #0]
    BaseType_t xShouldWrite;
    size_t xReturn;

    if( xSpace == ( size_t ) 0 )
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <prvWriteMessageToBuffer+0x1a>
    {
        /* Doesn't matter if this is a stream buffer or a message buffer, there
         * is no space to write. */
        xShouldWrite = pdFALSE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e01d      	b.n	8001c04 <prvWriteMessageToBuffer+0x56>
    }
    else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	7f1b      	ldrb	r3, [r3, #28]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d108      	bne.n	8001be6 <prvWriteMessageToBuffer+0x38>
    {
        /* This is a stream buffer, as opposed to a message buffer, so writing a
         * stream of bytes rather than discrete messages.  Write as many bytes as
         * possible. */
        xShouldWrite = pdTRUE;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	bf28      	it	cs
 8001be0:	4613      	movcs	r3, r2
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	e00e      	b.n	8001c04 <prvWriteMessageToBuffer+0x56>
    }
    else if( xSpace >= xRequiredSpace )
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d308      	bcc.n	8001c00 <prvWriteMessageToBuffer+0x52>
    {
        /* This is a message buffer, as opposed to a stream buffer, and there
         * is enough space to write both the message length and the message itself
         * into the buffer.  Start by writing the length of the data, the data
         * itself will be written later in this function. */
        xShouldWrite = pdTRUE;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
        ( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 f8b6 	bl	8001d6a <prvWriteBytesToBuffer>
 8001bfe:	e001      	b.n	8001c04 <prvWriteMessageToBuffer+0x56>
    }
    else
    {
        /* There is space available, but not enough space. */
        xShouldWrite = pdFALSE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
    }

    if( xShouldWrite != pdFALSE )
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <prvWriteMessageToBuffer+0x6c>
    {
        /* Writes the data itself. */
        xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f8aa 	bl	8001d6a <prvWriteBytesToBuffer>
 8001c16:	6138      	str	r0, [r7, #16]
 8001c18:	e001      	b.n	8001c1e <prvWriteMessageToBuffer+0x70>
    }
    else
    {
        xReturn = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
    }

    return xReturn;
 8001c1e:	693b      	ldr	r3, [r7, #16]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	807b      	strh	r3, [r7, #2]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	613b      	str	r3, [r7, #16]
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	7f1b      	ldrb	r3, [r3, #28]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <xStreamBufferReceive+0x28>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e001      	b.n	8001c54 <xStreamBufferReceive+0x2c>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d028      	beq.n	8001cac <xStreamBufferReceive+0x84>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
 8001c5a:	f7ff fa57 	bl	800110c <vPortEnterCritical>
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001c5e:	6938      	ldr	r0, [r7, #16]
 8001c60:	f000 f90d 	bl	8001e7e <prvBytesInBuffer>
 8001c64:	61b8      	str	r0, [r7, #24]
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d808      	bhi.n	8001c80 <xStreamBufferReceive+0x58>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2000      	movs	r0, #0
 8001c72:	f001 f963 	bl	8002f3c <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8001c76:	f000 ffbb 	bl	8002bf0 <xTaskGetCurrentTaskHandle>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	611a      	str	r2, [r3, #16]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001c80:	f7ff fa5c 	bl	800113c <vPortExitCritical>

        if( xBytesAvailable <= xBytesToStoreMessageLength )
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d813      	bhi.n	8001cb4 <xStreamBufferReceive+0x8c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2300      	movs	r3, #0
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	2000      	movs	r0, #0
 8001c98:	f001 f832 	bl	8002d00 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001ca2:	6938      	ldr	r0, [r7, #16]
 8001ca4:	f000 f8eb 	bl	8001e7e <prvBytesInBuffer>
 8001ca8:	61b8      	str	r0, [r7, #24]
 8001caa:	e003      	b.n	8001cb4 <xStreamBufferReceive+0x8c>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001cac:	6938      	ldr	r0, [r7, #16]
 8001cae:	f000 f8e6 	bl	8001e7e <prvBytesInBuffer>
 8001cb2:	61b8      	str	r0, [r7, #24]
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d91f      	bls.n	8001cfc <xStreamBufferReceive+0xd4>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6938      	ldr	r0, [r7, #16]
 8001cc8:	f000 f81d 	bl	8001d06 <prvReadMessageFromBuffer>
 8001ccc:	61f8      	str	r0, [r7, #28]

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <xStreamBufferReceive+0xd4>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
 8001cd4:	f000 fbae 	bl	8002434 <vTaskSuspendAll>
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00b      	beq.n	8001cf8 <xStreamBufferReceive+0xd0>
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	6958      	ldr	r0, [r3, #20]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	f001 f87f 	bl	8002df0 <xTaskGenericNotify>
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	615a      	str	r2, [r3, #20]
 8001cf8:	f000 fbaa 	bl	8002450 <xTaskResumeAll>
    {
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                        void * pvRxData,
                                        size_t xBufferLengthBytes,
                                        size_t xBytesAvailable,
                                        size_t xBytesToStoreMessageLength )
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b088      	sub	sp, #32
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	603b      	str	r3, [r7, #0]
    size_t xOriginalTail, xReceivedLength, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d019      	beq.n	8001d4e <prvReadMessageFromBuffer+0x48>
    {
        /* A discrete message is being received.  First receive the length
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	61bb      	str	r3, [r7, #24]
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8001d20:	f107 0110 	add.w	r1, r7, #16
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f85e 	bl	8001dea <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	61fb      	str	r3, [r7, #28]

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	603b      	str	r3, [r7, #0]

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d907      	bls.n	8001d52 <prvReadMessageFromBuffer+0x4c>
        {
            /* The user has provided insufficient space to read the message
             * so return the buffer to its previous state (so the length of
             * the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	601a      	str	r2, [r3, #0]
            xNextMessageLength = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	e001      	b.n	8001d52 <prvReadMessageFromBuffer+0x4c>
    }
    else
    {
        /* A stream of bytes is being received (as opposed to a discrete
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	61fb      	str	r3, [r7, #28]
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f846 	bl	8001dea <prvReadBytesFromBuffer>
 8001d5e:	6178      	str	r0, [r7, #20]

    return xReceivedLength;
 8001d60:	697b      	ldr	r3, [r7, #20]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	617b      	str	r3, [r7, #20]

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4293      	cmp	r3, r2
 8001d88:	bf28      	it	cs
 8001d8a:	4613      	movcs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	699a      	ldr	r2, [r3, #24]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	4413      	add	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 fa70 	bl	8005280 <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d90a      	bls.n	8001dbe <prvWriteBytesToBuffer+0x54>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6998      	ldr	r0, [r3, #24]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	18d1      	adds	r1, r2, r3
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	f003 fa61 	bl	8005280 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

    if( xNextHead >= pxStreamBuffer->xLength )
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d304      	bcc.n	8001dda <prvWriteBytesToBuffer+0x70>
    {
        xNextHead -= pxStreamBuffer->xLength;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	617b      	str	r3, [r7, #20]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	605a      	str	r2, [r3, #4]

    return xCount;
 8001de0:	687b      	ldr	r3, [r7, #4]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b088      	sub	sp, #32
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	603b      	str	r3, [r7, #0]
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf28      	it	cs
 8001e00:	4613      	movcs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]

    if( xCount > ( size_t ) 0 )
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d034      	beq.n	8001e74 <prvReadBytesFromBuffer+0x8a>
    {
        xNextTail = pxStreamBuffer->xTail;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	61fb      	str	r3, [r7, #28]

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	bf28      	it	cs
 8001e1e:	4613      	movcs	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	4413      	add	r3, r2
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	68b8      	ldr	r0, [r7, #8]
 8001e30:	f003 fa26 	bl	8005280 <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d90a      	bls.n	8001e52 <prvReadBytesFromBuffer+0x68>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	18d0      	adds	r0, r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6999      	ldr	r1, [r3, #24]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	f003 fa17 	bl	8005280 <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	4413      	add	r3, r2
 8001e58:	61fb      	str	r3, [r7, #28]

        if( xNextTail >= pxStreamBuffer->xLength )
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d304      	bcc.n	8001e6e <prvReadBytesFromBuffer+0x84>
        {
            xNextTail -= pxStreamBuffer->xLength;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	61fb      	str	r3, [r7, #28]
        }

        pxStreamBuffer->xTail = xNextTail;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	601a      	str	r2, [r3, #0]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 8001e74:	69bb      	ldr	r3, [r7, #24]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
    xCount -= pxStreamBuffer->xTail;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	60fb      	str	r3, [r7, #12]

    if( xCount >= pxStreamBuffer->xLength )
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d304      	bcc.n	8001eb0 <prvBytesInBuffer+0x32>
    {
        xCount -= pxStreamBuffer->xLength;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	60fb      	str	r3, [r7, #12]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
    #if ( configASSERT_DEFINED == 1 )
        {
            /* The value written just has to be identifiable when looking at the
             * memory.  Don't use 0xA5 as that is the stack fill value and could
             * result in confusion as to what is actually being observed. */
            const BaseType_t xWriteValue = 0x55;
 8001eca:	2355      	movs	r3, #85	; 0x55
 8001ecc:	617b      	str	r3, [r7, #20]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8001ece:	2224      	movs	r2, #36	; 0x24
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f003 f9df 	bl	8005296 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	619a      	str	r2, [r3, #24]
    pxStreamBuffer->xLength = xBufferSizeBytes;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	60da      	str	r2, [r3, #12]
    pxStreamBuffer->ucFlags = ucFlags;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ef0:	771a      	strb	r2, [r3, #28]
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b08c      	sub	sp, #48	; 0x30
 8001efe:	af04      	add	r7, sp, #16
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fdd4 	bl	8000abc <pvPortMalloc>
 8001f14:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00e      	beq.n	8001f3a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f1c:	205c      	movs	r0, #92	; 0x5c
 8001f1e:	f7fe fdcd 	bl	8000abc <pvPortMalloc>
 8001f22:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f30:	e005      	b.n	8001f3e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7fe fe70 	bl	8000c18 <vPortFree>
 8001f38:	e001      	b.n	8001f3e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d013      	beq.n	8001f6c <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f44:	88fa      	ldrh	r2, [r7, #6]
 8001f46:	2300      	movs	r3, #0
 8001f48:	9303      	str	r3, [sp, #12]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	9302      	str	r3, [sp, #8]
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f80e 	bl	8001f7c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001f60:	69f8      	ldr	r0, [r7, #28]
 8001f62:	f000 f893 	bl	800208c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	e002      	b.n	8001f72 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001f72:	69bb      	ldr	r3, [r7, #24]
    }
 8001f74:	4618      	mov	r0, r3
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	461a      	mov	r2, r3
 8001f94:	21a5      	movs	r1, #165	; 0xa5
 8001f96:	f003 f97e 	bl	8005296 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f023 0307 	bic.w	r3, r3, #7
 8001fb2:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d01f      	beq.n	8001ffa <prvInitialiseNewTask+0x7e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e012      	b.n	8001fe6 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	7819      	ldrb	r1, [r3, #0]
 8001fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	4413      	add	r3, r2
 8001fce:	3334      	adds	r3, #52	; 0x34
 8001fd0:	460a      	mov	r2, r1
 8001fd2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	4413      	add	r3, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b0f      	cmp	r3, #15
 8001fea:	d9e9      	bls.n	8001fc0 <prvInitialiseNewTask+0x44>
 8001fec:	e000      	b.n	8001ff0 <prvInitialiseNewTask+0x74>
            {
                break;
 8001fee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ff8:	e003      	b.n	8002002 <prvInitialiseNewTask+0x86>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d901      	bls.n	800200c <prvInitialiseNewTask+0x90>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002008:	2303      	movs	r3, #3
 800200a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	6a3a      	ldr	r2, [r7, #32]
 8002010:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	6a3a      	ldr	r2, [r7, #32]
 8002016:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8002018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201a:	2200      	movs	r2, #0
 800201c:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	3304      	adds	r3, #4
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe ff11 	bl	8000e4a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202a:	3318      	adds	r3, #24
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe ff0c 	bl	8000e4a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002036:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f1c3 0304 	rsb	r3, r3, #4
 8002040:	b29a      	uxth	r2, r3
 8002042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002044:	831a      	strh	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	3354      	adds	r3, #84	; 0x54
 8002050:	2204      	movs	r2, #4
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f003 f91e 	bl	8005296 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	3358      	adds	r3, #88	; 0x58
 800205e:	2201      	movs	r2, #1
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f003 f917 	bl	8005296 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	68f9      	ldr	r1, [r7, #12]
 800206c:	6938      	ldr	r0, [r7, #16]
 800206e:	f7fe ff7d 	bl	8000f6c <pxPortInitialiseStack>
 8002072:	4602      	mov	r2, r0
 8002074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002076:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <prvInitialiseNewTask+0x108>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002082:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002084:	bf00      	nop
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002094:	f7ff f83a 	bl	800110c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002098:	4b2c      	ldr	r3, [pc, #176]	; (800214c <prvAddNewTaskToReadyList+0xc0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3301      	adds	r3, #1
 800209e:	4a2b      	ldr	r2, [pc, #172]	; (800214c <prvAddNewTaskToReadyList+0xc0>)
 80020a0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80020a2:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <prvAddNewTaskToReadyList+0xc4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80020aa:	4a29      	ldr	r2, [pc, #164]	; (8002150 <prvAddNewTaskToReadyList+0xc4>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020b0:	4b26      	ldr	r3, [pc, #152]	; (800214c <prvAddNewTaskToReadyList+0xc0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d110      	bne.n	80020da <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80020b8:	f000 fd40 	bl	8002b3c <prvInitialiseTaskLists>
 80020bc:	e00d      	b.n	80020da <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80020be:	4b25      	ldr	r3, [pc, #148]	; (8002154 <prvAddNewTaskToReadyList+0xc8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80020c6:	4b22      	ldr	r3, [pc, #136]	; (8002150 <prvAddNewTaskToReadyList+0xc4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d802      	bhi.n	80020da <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80020d4:	4a1e      	ldr	r2, [pc, #120]	; (8002150 <prvAddNewTaskToReadyList+0xc4>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <prvAddNewTaskToReadyList+0xcc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <prvAddNewTaskToReadyList+0xcc>)
 80020e2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <prvAddNewTaskToReadyList+0xcc>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	2201      	movs	r2, #1
 80020f2:	409a      	lsls	r2, r3
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <prvAddNewTaskToReadyList+0xd0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <prvAddNewTaskToReadyList+0xd0>)
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4a15      	ldr	r2, [pc, #84]	; (8002160 <prvAddNewTaskToReadyList+0xd4>)
 800210c:	441a      	add	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3304      	adds	r3, #4
 8002112:	4619      	mov	r1, r3
 8002114:	4610      	mov	r0, r2
 8002116:	f7fe fea4 	bl	8000e62 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800211a:	f7ff f80f 	bl	800113c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <prvAddNewTaskToReadyList+0xc8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00e      	beq.n	8002144 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <prvAddNewTaskToReadyList+0xc4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <prvAddNewTaskToReadyList+0xd8>)
 8002136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	f3bf 8f4f 	dsb	sy
 8002140:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20004528 	.word	0x20004528
 8002150:	2000447c 	.word	0x2000447c
 8002154:	20004534 	.word	0x20004534
 8002158:	20004544 	.word	0x20004544
 800215c:	20004530 	.word	0x20004530
 8002160:	20004480 	.word	0x20004480
 8002164:	e000ed04 	.word	0xe000ed04

08002168 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <vTaskDelay+0x28>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 800217c:	f000 f95a 	bl	8002434 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f000 ff05 	bl	8002f94 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800218a:	f000 f961 	bl	8002450 <xTaskResumeAll>
 800218e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d107      	bne.n	80021a6 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <vTaskDelay+0x48>)
 8002198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	f3bf 8f4f 	dsb	sy
 80021a2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000ed04 	.word	0xe000ed04

080021b4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80021bc:	f7fe ffa6 	bl	800110c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <vTaskSuspend+0x18>
 80021c6:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <vTaskSuspend+0x100>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	e000      	b.n	80021ce <vTaskSuspend+0x1a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	3304      	adds	r3, #4
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fea0 	bl	8000f1a <uxListRemove>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d115      	bne.n	800220c <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e4:	4934      	ldr	r1, [pc, #208]	; (80022b8 <vTaskSuspend+0x104>)
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <vTaskSuspend+0x58>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	2201      	movs	r2, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43da      	mvns	r2, r3
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <vTaskSuspend+0x108>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4013      	ands	r3, r2
 8002208:	4a2c      	ldr	r2, [pc, #176]	; (80022bc <vTaskSuspend+0x108>)
 800220a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3318      	adds	r3, #24
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe fe7e 	bl	8000f1a <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3304      	adds	r3, #4
 8002222:	4619      	mov	r1, r3
 8002224:	4826      	ldr	r0, [pc, #152]	; (80022c0 <vTaskSuspend+0x10c>)
 8002226:	f7fe fe1c 	bl	8000e62 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e010      	b.n	8002252 <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	3358      	adds	r3, #88	; 0x58
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d105      	bne.n	800224c <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	3358      	adds	r3, #88	; 0x58
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3301      	adds	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	ddeb      	ble.n	8002230 <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8002258:	f7fe ff70 	bl	800113c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <vTaskSuspend+0x110>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002264:	f7fe ff52 	bl	800110c <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8002268:	f000 fca8 	bl	8002bbc <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 800226c:	f7fe ff66 	bl	800113c <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8002270:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <vTaskSuspend+0x100>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	d118      	bne.n	80022ac <vTaskSuspend+0xf8>
        {
            if( xSchedulerRunning != pdFALSE )
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <vTaskSuspend+0x110>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <vTaskSuspend+0xe0>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <vTaskSuspend+0x114>)
 8002284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f3bf 8f4f 	dsb	sy
 800228e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002292:	e00b      	b.n	80022ac <vTaskSuspend+0xf8>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002294:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <vTaskSuspend+0x10c>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <vTaskSuspend+0x118>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d103      	bne.n	80022a8 <vTaskSuspend+0xf4>
                    pxCurrentTCB = NULL;
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <vTaskSuspend+0x100>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
    }
 80022a6:	e001      	b.n	80022ac <vTaskSuspend+0xf8>
                    vTaskSwitchContext();
 80022a8:	f000 fad6 	bl	8002858 <vTaskSwitchContext>
    }
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	2000447c 	.word	0x2000447c
 80022b8:	20004480 	.word	0x20004480
 80022bc:	20004530 	.word	0x20004530
 80022c0:	20004514 	.word	0x20004514
 80022c4:	20004534 	.word	0x20004534
 80022c8:	e000ed04 	.word	0xe000ed04
 80022cc:	20004528 	.word	0x20004528

080022d0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	4a09      	ldr	r2, [pc, #36]	; (800230c <prvTaskIsTaskSuspended+0x3c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d10a      	bne.n	8002300 <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <prvTaskIsTaskSuspended+0x40>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d005      	beq.n	8002300 <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 80022fc:	2301      	movs	r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002300:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	20004514 	.word	0x20004514
 8002310:	20004500 	.word	0x20004500

08002314 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	60fb      	str	r3, [r7, #12]
        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <vTaskResume+0x90>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	429a      	cmp	r2, r3
 8002328:	d037      	beq.n	800239a <vTaskResume+0x86>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d034      	beq.n	800239a <vTaskResume+0x86>
        {
            taskENTER_CRITICAL();
 8002330:	f7fe feec 	bl	800110c <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7ff ffcb 	bl	80022d0 <prvTaskIsTaskSuspended>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d02a      	beq.n	8002396 <vTaskResume+0x82>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3304      	adds	r3, #4
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fde8 	bl	8000f1a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	2201      	movs	r2, #1
 8002350:	409a      	lsls	r2, r3
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <vTaskResume+0x94>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <vTaskResume+0x94>)
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4a10      	ldr	r2, [pc, #64]	; (80023ac <vTaskResume+0x98>)
 800236a:	441a      	add	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3304      	adds	r3, #4
 8002370:	4619      	mov	r1, r3
 8002372:	4610      	mov	r0, r2
 8002374:	f7fe fd75 	bl	8000e62 <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <vTaskResume+0x90>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	429a      	cmp	r2, r3
 8002384:	d307      	bcc.n	8002396 <vTaskResume+0x82>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <vTaskResume+0x9c>)
 8002388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8002396:	f7fe fed1 	bl	800113c <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000447c 	.word	0x2000447c
 80023a8:	20004530 	.word	0x20004530
 80023ac:	20004480 	.word	0x20004480
 80023b0:	e000ed04 	.word	0xe000ed04

080023b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <vTaskStartScheduler+0x64>)
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	2300      	movs	r3, #0
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2300      	movs	r3, #0
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	4915      	ldr	r1, [pc, #84]	; (800241c <vTaskStartScheduler+0x68>)
 80023c8:	4815      	ldr	r0, [pc, #84]	; (8002420 <vTaskStartScheduler+0x6c>)
 80023ca:	f7ff fd96 	bl	8001efa <xTaskCreate>
 80023ce:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d102      	bne.n	80023dc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80023d6:	f000 fe45 	bl	8003064 <xTimerCreateTimerTask>
 80023da:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d114      	bne.n	800240c <vTaskStartScheduler+0x58>
        __asm volatile
 80023e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e6:	f383 8811 	msr	BASEPRI, r3
 80023ea:	f3bf 8f6f 	isb	sy
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <vTaskStartScheduler+0x70>)
 80023f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023fa:	801a      	strh	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <vTaskStartScheduler+0x74>)
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <vTaskStartScheduler+0x78>)
 8002404:	2200      	movs	r2, #0
 8002406:	801a      	strh	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002408:	f7fe fe20 	bl	800104c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <vTaskStartScheduler+0x7c>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2000454c 	.word	0x2000454c
 800241c:	080055b8 	.word	0x080055b8
 8002420:	08002b0d 	.word	0x08002b0d
 8002424:	20004548 	.word	0x20004548
 8002428:	20004534 	.word	0x20004534
 800242c:	2000452c 	.word	0x2000452c
 8002430:	20000004 	.word	0x20000004

08002434 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <vTaskSuspendAll+0x18>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	4a03      	ldr	r2, [pc, #12]	; (800244c <vTaskSuspendAll+0x18>)
 8002440:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20004550 	.word	0x20004550

08002450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800245e:	f7fe fe55 	bl	800110c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002462:	4b39      	ldr	r3, [pc, #228]	; (8002548 <xTaskResumeAll+0xf8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3b01      	subs	r3, #1
 8002468:	4a37      	ldr	r2, [pc, #220]	; (8002548 <xTaskResumeAll+0xf8>)
 800246a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800246c:	4b36      	ldr	r3, [pc, #216]	; (8002548 <xTaskResumeAll+0xf8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d161      	bne.n	8002538 <xTaskResumeAll+0xe8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002474:	4b35      	ldr	r3, [pc, #212]	; (800254c <xTaskResumeAll+0xfc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d05d      	beq.n	8002538 <xTaskResumeAll+0xe8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800247c:	e02e      	b.n	80024dc <xTaskResumeAll+0x8c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800247e:	4b34      	ldr	r3, [pc, #208]	; (8002550 <xTaskResumeAll+0x100>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3318      	adds	r3, #24
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fd45 	bl	8000f1a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3304      	adds	r3, #4
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fd40 	bl	8000f1a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	2201      	movs	r2, #1
 80024a0:	409a      	lsls	r2, r3
 80024a2:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <xTaskResumeAll+0x104>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	4a2a      	ldr	r2, [pc, #168]	; (8002554 <xTaskResumeAll+0x104>)
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4a27      	ldr	r2, [pc, #156]	; (8002558 <xTaskResumeAll+0x108>)
 80024ba:	441a      	add	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3304      	adds	r3, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f7fe fccd 	bl	8000e62 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <xTaskResumeAll+0x10c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d302      	bcc.n	80024dc <xTaskResumeAll+0x8c>
                    {
                        xYieldPending = pdTRUE;
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <xTaskResumeAll+0x110>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024dc:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <xTaskResumeAll+0x100>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1cc      	bne.n	800247e <xTaskResumeAll+0x2e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <xTaskResumeAll+0x9e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80024ea:	f000 fb67 	bl	8002bbc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <xTaskResumeAll+0x114>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	80fb      	strh	r3, [r7, #6]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d010      	beq.n	800251c <xTaskResumeAll+0xcc>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80024fa:	f000 f901 	bl	8002700 <xTaskIncrementTick>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <xTaskResumeAll+0xba>
                            {
                                xYieldPending = pdTRUE;
 8002504:	4b16      	ldr	r3, [pc, #88]	; (8002560 <xTaskResumeAll+0x110>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	3b01      	subs	r3, #1
 800250e:	80fb      	strh	r3, [r7, #6]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f1      	bne.n	80024fa <xTaskResumeAll+0xaa>

                        xPendedTicks = 0;
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <xTaskResumeAll+0x114>)
 8002518:	2200      	movs	r2, #0
 800251a:	801a      	strh	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <xTaskResumeAll+0x110>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <xTaskResumeAll+0xe8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002524:	2301      	movs	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <xTaskResumeAll+0x118>)
 800252a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002538:	f7fe fe00 	bl	800113c <vPortExitCritical>

    return xAlreadyYielded;
 800253c:	68bb      	ldr	r3, [r7, #8]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20004550 	.word	0x20004550
 800254c:	20004528 	.word	0x20004528
 8002550:	20004500 	.word	0x20004500
 8002554:	20004530 	.word	0x20004530
 8002558:	20004480 	.word	0x20004480
 800255c:	2000447c 	.word	0x2000447c
 8002560:	2000453c 	.word	0x2000453c
 8002564:	20004538 	.word	0x20004538
 8002568:	e000ed04 	.word	0xe000ed04

0800256c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
 8002572:	f7fe fdcb 	bl	800110c <vPortEnterCritical>
    {
        xTicks = xTickCount;
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <xTaskGetTickCount+0x20>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	80fb      	strh	r3, [r7, #6]
    }
    portTICK_TYPE_EXIT_CRITICAL();
 800257c:	f7fe fdde 	bl	800113c <vPortExitCritical>

    return xTicks;
 8002580:	88fb      	ldrh	r3, [r7, #6]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000452c 	.word	0x2000452c

08002590 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8002590:	b480      	push	{r7}
 8002592:	b08b      	sub	sp, #44	; 0x2c
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d05b      	beq.n	800265e <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	3308      	adds	r3, #8
 80025bc:	429a      	cmp	r2, r3
 80025be:	d104      	bne.n	80025ca <prvSearchForNameWithinSingleList+0x3a>
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	3308      	adds	r3, #8
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d104      	bne.n	80025f6 <prvSearchForNameWithinSingleList+0x66>
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	e01c      	b.n	8002642 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	4413      	add	r3, r2
 800260e:	3334      	adds	r3, #52	; 0x34
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	4413      	add	r3, r2
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	7afa      	ldrb	r2, [r7, #11]
 800261e:	429a      	cmp	r2, r3
 8002620:	d002      	beq.n	8002628 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 8002622:	2301      	movs	r3, #1
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	e006      	b.n	8002636 <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8002628:	7afb      	ldrb	r3, [r7, #11]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8002632:	2301      	movs	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d106      	bne.n	800264a <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	3301      	adds	r3, #1
 8002640:	623b      	str	r3, [r7, #32]
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2b0f      	cmp	r3, #15
 8002646:	d9df      	bls.n	8002608 <prvSearchForNameWithinSingleList+0x78>
 8002648:	e000      	b.n	800264c <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 800264a:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d104      	bne.n	800265c <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	429a      	cmp	r2, r3
 8002658:	d1bb      	bne.n	80025d2 <prvSearchForNameWithinSingleList+0x42>
 800265a:	e000      	b.n	800265e <prvSearchForNameWithinSingleList+0xce>
                    break;
 800265c:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002660:	4618      	mov	r0, r3
 8002662:	372c      	adds	r7, #44	; 0x2c
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
	...

0800266c <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8002674:	2304      	movs	r3, #4
 8002676:	60fb      	str	r3, [r7, #12]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );

        vTaskSuspendAll();
 8002678:	f7ff fedc 	bl	8002434 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3b01      	subs	r3, #1
 8002680:	60fb      	str	r3, [r7, #12]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <xTaskGetHandle+0x84>)
 800268e:	4413      	add	r3, r2
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff7c 	bl	8002590 <prvSearchForNameWithinSingleList>
 8002698:	60b8      	str	r0, [r7, #8]

                if( pxTCB != NULL )
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d103      	bne.n	80026a8 <xTaskGetHandle+0x3c>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ea      	bne.n	800267c <xTaskGetHandle+0x10>
 80026a6:	e000      	b.n	80026aa <xTaskGetHandle+0x3e>
                    break;
 80026a8:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <xTaskGetHandle+0x52>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <xTaskGetHandle+0x88>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff6a 	bl	8002590 <prvSearchForNameWithinSingleList>
 80026bc:	60b8      	str	r0, [r7, #8]
            }

            if( pxTCB == NULL )
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <xTaskGetHandle+0x66>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <xTaskGetHandle+0x8c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff60 	bl	8002590 <prvSearchForNameWithinSingleList>
 80026d0:	60b8      	str	r0, [r7, #8]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d104      	bne.n	80026e2 <xTaskGetHandle+0x76>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4808      	ldr	r0, [pc, #32]	; (80026fc <xTaskGetHandle+0x90>)
 80026dc:	f7ff ff58 	bl	8002590 <prvSearchForNameWithinSingleList>
 80026e0:	60b8      	str	r0, [r7, #8]
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 80026e2:	f7ff feb5 	bl	8002450 <xTaskResumeAll>

        return pxTCB;
 80026e6:	68bb      	ldr	r3, [r7, #8]
    }
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20004480 	.word	0x20004480
 80026f4:	200044f8 	.word	0x200044f8
 80026f8:	200044fc 	.word	0x200044fc
 80026fc:	20004514 	.word	0x20004514

08002700 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800270a:	4b48      	ldr	r3, [pc, #288]	; (800282c <xTaskIncrementTick+0x12c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d17f      	bne.n	8002812 <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <xTaskIncrementTick+0x130>)
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	3301      	adds	r3, #1
 800271a:	827b      	strh	r3, [r7, #18]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800271c:	4a44      	ldr	r2, [pc, #272]	; (8002830 <xTaskIncrementTick+0x130>)
 800271e:	8a7b      	ldrh	r3, [r7, #18]
 8002720:	8013      	strh	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002722:	8a7b      	ldrh	r3, [r7, #18]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d110      	bne.n	800274a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002728:	4b42      	ldr	r3, [pc, #264]	; (8002834 <xTaskIncrementTick+0x134>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b42      	ldr	r3, [pc, #264]	; (8002838 <xTaskIncrementTick+0x138>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a40      	ldr	r2, [pc, #256]	; (8002834 <xTaskIncrementTick+0x134>)
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4a40      	ldr	r2, [pc, #256]	; (8002838 <xTaskIncrementTick+0x138>)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b3f      	ldr	r3, [pc, #252]	; (800283c <xTaskIncrementTick+0x13c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	4a3e      	ldr	r2, [pc, #248]	; (800283c <xTaskIncrementTick+0x13c>)
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	f000 fa39 	bl	8002bbc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800274a:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <xTaskIncrementTick+0x140>)
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	8a7a      	ldrh	r2, [r7, #18]
 8002752:	429a      	cmp	r2, r3
 8002754:	d348      	bcc.n	80027e8 <xTaskIncrementTick+0xe8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002756:	4b37      	ldr	r3, [pc, #220]	; (8002834 <xTaskIncrementTick+0x134>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d104      	bne.n	800276a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002760:	4b37      	ldr	r3, [pc, #220]	; (8002840 <xTaskIncrementTick+0x140>)
 8002762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002766:	801a      	strh	r2, [r3, #0]
                    break;
 8002768:	e03e      	b.n	80027e8 <xTaskIncrementTick+0xe8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800276a:	4b32      	ldr	r3, [pc, #200]	; (8002834 <xTaskIncrementTick+0x134>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	889b      	ldrh	r3, [r3, #4]
 8002778:	80fb      	strh	r3, [r7, #6]

                    if( xConstTickCount < xItemValue )
 800277a:	8a7a      	ldrh	r2, [r7, #18]
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	429a      	cmp	r2, r3
 8002780:	d203      	bcs.n	800278a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002782:	4a2f      	ldr	r2, [pc, #188]	; (8002840 <xTaskIncrementTick+0x140>)
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	8013      	strh	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002788:	e02e      	b.n	80027e8 <xTaskIncrementTick+0xe8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	3304      	adds	r3, #4
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fbc3 	bl	8000f1a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <xTaskIncrementTick+0xa6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	3318      	adds	r3, #24
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fbba 	bl	8000f1a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	2201      	movs	r2, #1
 80027ac:	409a      	lsls	r2, r3
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <xTaskIncrementTick+0x144>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	4a23      	ldr	r2, [pc, #140]	; (8002844 <xTaskIncrementTick+0x144>)
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4a20      	ldr	r2, [pc, #128]	; (8002848 <xTaskIncrementTick+0x148>)
 80027c6:	441a      	add	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	3304      	adds	r3, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f7fe fb47 	bl	8000e62 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d8:	4b1c      	ldr	r3, [pc, #112]	; (800284c <xTaskIncrementTick+0x14c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	429a      	cmp	r2, r3
 80027e0:	d3b9      	bcc.n	8002756 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 80027e2:	2301      	movs	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027e6:	e7b6      	b.n	8002756 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027e8:	4b18      	ldr	r3, [pc, #96]	; (800284c <xTaskIncrementTick+0x14c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ee:	4916      	ldr	r1, [pc, #88]	; (8002848 <xTaskIncrementTick+0x148>)
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d901      	bls.n	8002804 <xTaskIncrementTick+0x104>
                {
                    xSwitchRequired = pdTRUE;
 8002800:	2301      	movs	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <xTaskIncrementTick+0x150>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d009      	beq.n	8002820 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 800280c:	2301      	movs	r3, #1
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e006      	b.n	8002820 <xTaskIncrementTick+0x120>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <xTaskIncrementTick+0x154>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	3301      	adds	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <xTaskIncrementTick+0x154>)
 800281e:	801a      	strh	r2, [r3, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002820:	697b      	ldr	r3, [r7, #20]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20004550 	.word	0x20004550
 8002830:	2000452c 	.word	0x2000452c
 8002834:	200044f8 	.word	0x200044f8
 8002838:	200044fc 	.word	0x200044fc
 800283c:	20004540 	.word	0x20004540
 8002840:	20004548 	.word	0x20004548
 8002844:	20004530 	.word	0x20004530
 8002848:	20004480 	.word	0x20004480
 800284c:	2000447c 	.word	0x2000447c
 8002850:	2000453c 	.word	0x2000453c
 8002854:	20004538 	.word	0x20004538

08002858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <vTaskSwitchContext+0x78>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <vTaskSwitchContext+0x7c>)
 8002868:	2201      	movs	r2, #1
 800286a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800286c:	e02a      	b.n	80028c4 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 800286e:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <vTaskSwitchContext+0x7c>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <vTaskSwitchContext+0x80>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	f1c3 031f 	rsb	r3, r3, #31
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4a11      	ldr	r2, [pc, #68]	; (80028dc <vTaskSwitchContext+0x84>)
 8002896:	4413      	add	r3, r2
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3308      	adds	r3, #8
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d104      	bne.n	80028ba <vTaskSwitchContext+0x62>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <vTaskSwitchContext+0x88>)
 80028c2:	6013      	str	r3, [r2, #0]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20004550 	.word	0x20004550
 80028d4:	2000453c 	.word	0x2000453c
 80028d8:	20004530 	.word	0x20004530
 80028dc:	20004480 	.word	0x20004480
 80028e0:	2000447c 	.word	0x2000447c

080028e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <vTaskPlaceOnEventList+0x2c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3318      	adds	r3, #24
 80028f6:	4619      	mov	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7fe fad5 	bl	8000ea8 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80028fe:	887b      	ldrh	r3, [r7, #2]
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fb46 	bl	8002f94 <prvAddCurrentTaskToDelayedList>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	2000447c 	.word	0x2000447c

08002914 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	460b      	mov	r3, r1
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	817b      	strh	r3, [r7, #10]

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <vTaskPlaceOnEventListRestricted+0x3c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	3318      	adds	r3, #24
 8002928:	4619      	mov	r1, r3
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7fe fa99 	bl	8000e62 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <vTaskPlaceOnEventListRestricted+0x28>
        {
            xTicksToWait = portMAX_DELAY;
 8002936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800293a:	817b      	strh	r3, [r7, #10]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800293c:	897b      	ldrh	r3, [r7, #10]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fb27 	bl	8002f94 <prvAddCurrentTaskToDelayedList>
    }
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	2000447c 	.word	0x2000447c

08002954 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	3318      	adds	r3, #24
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fad6 	bl	8000f1a <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <xTaskRemoveFromEventList+0x90>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d11c      	bne.n	80029b0 <xTaskRemoveFromEventList+0x5c>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	3304      	adds	r3, #4
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe facd 	bl	8000f1a <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	2201      	movs	r2, #1
 8002986:	409a      	lsls	r2, r3
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <xTaskRemoveFromEventList+0x94>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4313      	orrs	r3, r2
 800298e:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <xTaskRemoveFromEventList+0x94>)
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4a13      	ldr	r2, [pc, #76]	; (80029ec <xTaskRemoveFromEventList+0x98>)
 80029a0:	441a      	add	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3304      	adds	r3, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f7fe fa5a 	bl	8000e62 <vListInsertEnd>
 80029ae:	e005      	b.n	80029bc <xTaskRemoveFromEventList+0x68>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	3318      	adds	r3, #24
 80029b4:	4619      	mov	r1, r3
 80029b6:	480e      	ldr	r0, [pc, #56]	; (80029f0 <xTaskRemoveFromEventList+0x9c>)
 80029b8:	f7fe fa53 	bl	8000e62 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <xTaskRemoveFromEventList+0xa0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d905      	bls.n	80029d6 <xTaskRemoveFromEventList+0x82>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80029ca:	2301      	movs	r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <xTaskRemoveFromEventList+0xa4>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e001      	b.n	80029da <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        xReturn = pdFALSE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80029da:	68fb      	ldr	r3, [r7, #12]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20004550 	.word	0x20004550
 80029e8:	20004530 	.word	0x20004530
 80029ec:	20004480 	.word	0x20004480
 80029f0:	20004500 	.word	0x20004500
 80029f4:	2000447c 	.word	0x2000447c
 80029f8:	2000453c 	.word	0x2000453c

080029fc <vTaskSetTimeOutState>:
    }
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
    taskENTER_CRITICAL();
 8002a04:	f7fe fb82 	bl	800110c <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <vTaskSetTimeOutState+0x2c>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <vTaskSetTimeOutState+0x30>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	809a      	strh	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8002a1a:	f7fe fb8f 	bl	800113c <vPortExitCritical>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20004540 	.word	0x20004540
 8002a2c:	2000452c 	.word	0x2000452c

08002a30 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <vTaskInternalSetTimeOutState+0x24>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <vTaskInternalSetTimeOutState+0x28>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	809a      	strh	r2, [r3, #4]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	20004540 	.word	0x20004540
 8002a58:	2000452c 	.word	0x2000452c

08002a5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8002a66:	f7fe fb51 	bl	800110c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <xTaskCheckForTimeOut+0x90>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	817b      	strh	r3, [r7, #10]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	889b      	ldrh	r3, [r3, #4]
 8002a74:	897a      	ldrh	r2, [r7, #10]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	813b      	strh	r3, [r7, #8]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d102      	bne.n	8002a8c <xTaskCheckForTimeOut+0x30>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e027      	b.n	8002adc <xTaskCheckForTimeOut+0x80>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <xTaskCheckForTimeOut+0x94>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d00a      	beq.n	8002aae <xTaskCheckForTimeOut+0x52>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	889b      	ldrh	r3, [r3, #4]
 8002a9c:	897a      	ldrh	r2, [r7, #10]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d305      	bcc.n	8002aae <xTaskCheckForTimeOut+0x52>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
            *pxTicksToWait = ( TickType_t ) 0;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	801a      	strh	r2, [r3, #0]
 8002aac:	e016      	b.n	8002adc <xTaskCheckForTimeOut+0x80>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	893a      	ldrh	r2, [r7, #8]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d20c      	bcs.n	8002ad2 <xTaskCheckForTimeOut+0x76>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	881a      	ldrh	r2, [r3, #0]
 8002abc:	893b      	ldrh	r3, [r7, #8]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	801a      	strh	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffb2 	bl	8002a30 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e004      	b.n	8002adc <xTaskCheckForTimeOut+0x80>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	801a      	strh	r2, [r3, #0]
            xReturn = pdTRUE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002adc:	f7fe fb2e 	bl	800113c <vPortExitCritical>

    return xReturn;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000452c 	.word	0x2000452c
 8002af0:	20004540 	.word	0x20004540

08002af4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <vTaskMissedYield+0x14>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	2000453c 	.word	0x2000453c

08002b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b14:	f000 f84c 	bl	8002bb0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <prvIdleTask+0x28>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d9f9      	bls.n	8002b14 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <prvIdleTask+0x2c>)
 8002b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b30:	e7f0      	b.n	8002b14 <prvIdleTask+0x8>
 8002b32:	bf00      	nop
 8002b34:	20004480 	.word	0x20004480
 8002b38:	e000ed04 	.word	0xe000ed04

08002b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	e00c      	b.n	8002b62 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4a10      	ldr	r2, [pc, #64]	; (8002b94 <prvInitialiseTaskLists+0x58>)
 8002b54:	4413      	add	r3, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe f958 	bl	8000e0c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d9ef      	bls.n	8002b48 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b68:	480b      	ldr	r0, [pc, #44]	; (8002b98 <prvInitialiseTaskLists+0x5c>)
 8002b6a:	f7fe f94f 	bl	8000e0c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b6e:	480b      	ldr	r0, [pc, #44]	; (8002b9c <prvInitialiseTaskLists+0x60>)
 8002b70:	f7fe f94c 	bl	8000e0c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b74:	480a      	ldr	r0, [pc, #40]	; (8002ba0 <prvInitialiseTaskLists+0x64>)
 8002b76:	f7fe f949 	bl	8000e0c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b7a:	480a      	ldr	r0, [pc, #40]	; (8002ba4 <prvInitialiseTaskLists+0x68>)
 8002b7c:	f7fe f946 	bl	8000e0c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <prvInitialiseTaskLists+0x6c>)
 8002b82:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <prvInitialiseTaskLists+0x5c>)
 8002b84:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <prvInitialiseTaskLists+0x70>)
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <prvInitialiseTaskLists+0x60>)
 8002b8a:	601a      	str	r2, [r3, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20004480 	.word	0x20004480
 8002b98:	200044d0 	.word	0x200044d0
 8002b9c:	200044e4 	.word	0x200044e4
 8002ba0:	20004500 	.word	0x20004500
 8002ba4:	20004514 	.word	0x20004514
 8002ba8:	200044f8 	.word	0x200044f8
 8002bac:	200044fc 	.word	0x200044fc

08002bb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <prvResetNextTaskUnblockTime+0x2c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d104      	bne.n	8002bd4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <prvResetNextTaskUnblockTime+0x30>)
 8002bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bd0:	801a      	strh	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002bd2:	e005      	b.n	8002be0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <prvResetNextTaskUnblockTime+0x2c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	881a      	ldrh	r2, [r3, #0]
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <prvResetNextTaskUnblockTime+0x30>)
 8002bde:	801a      	strh	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	200044f8 	.word	0x200044f8
 8002bec:	20004548 	.word	0x20004548

08002bf0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <xTaskGetCurrentTaskHandle+0x18>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002bfc:	687b      	ldr	r3, [r7, #4]
    }
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	2000447c 	.word	0x2000447c

08002c0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <xTaskGetSchedulerState+0x34>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d102      	bne.n	8002c20 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	e008      	b.n	8002c32 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <xTaskGetSchedulerState+0x38>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	e001      	b.n	8002c32 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002c32:	687b      	ldr	r3, [r7, #4]
    }
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20004534 	.word	0x20004534
 8002c44:	20004550 	.word	0x20004550

08002c48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d046      	beq.n	8002cec <xTaskPriorityDisinherit+0xa4>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c62:	1e5a      	subs	r2, r3, #1
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d03b      	beq.n	8002cec <xTaskPriorityDisinherit+0xa4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d137      	bne.n	8002cec <xTaskPriorityDisinherit+0xa4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe f94a 	bl	8000f1a <uxListRemove>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	2201      	movs	r2, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <xTaskPriorityDisinherit+0xb0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <xTaskPriorityDisinherit+0xb0>)
 8002ca0:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f1c3 0304 	rsb	r3, r3, #4
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	831a      	strh	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <xTaskPriorityDisinherit+0xb0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <xTaskPriorityDisinherit+0xb0>)
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <xTaskPriorityDisinherit+0xb4>)
 8002cda:	441a      	add	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	3304      	adds	r3, #4
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	f7fe f8bd 	bl	8000e62 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002cec:	68fb      	ldr	r3, [r7, #12]
    }
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20004530 	.word	0x20004530
 8002cfc:	20004480 	.word	0x20004480

08002d00 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        taskENTER_CRITICAL();
 8002d0e:	f7fe f9fd 	bl	800110c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002d12:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <xTaskGenericNotifyWait+0xe8>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4413      	add	r3, r2
 8002d1a:	3358      	adds	r3, #88	; 0x58
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d025      	beq.n	8002d70 <xTaskGenericNotifyWait+0x70>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002d24:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <xTaskGenericNotifyWait+0xe8>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3314      	adds	r3, #20
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	4019      	ands	r1, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3314      	adds	r3, #20
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	6059      	str	r1, [r3, #4]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002d42:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <xTaskGenericNotifyWait+0xe8>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4413      	add	r3, r2
 8002d4a:	3358      	adds	r3, #88	; 0x58
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002d50:	8c3b      	ldrh	r3, [r7, #32]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00c      	beq.n	8002d70 <xTaskGenericNotifyWait+0x70>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d56:	8c3b      	ldrh	r3, [r7, #32]
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f91a 	bl	8002f94 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002d60:	4b22      	ldr	r3, [pc, #136]	; (8002dec <xTaskGenericNotifyWait+0xec>)
 8002d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002d70:	f7fe f9e4 	bl	800113c <vPortExitCritical>

        taskENTER_CRITICAL();
 8002d74:	f7fe f9ca 	bl	800110c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <xTaskGenericNotifyWait+0x90>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <xTaskGenericNotifyWait+0xe8>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3314      	adds	r3, #20
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <xTaskGenericNotifyWait+0xe8>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	3358      	adds	r3, #88	; 0x58
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d002      	beq.n	8002da8 <xTaskGenericNotifyWait+0xa8>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e010      	b.n	8002dca <xTaskGenericNotifyWait+0xca>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <xTaskGenericNotifyWait+0xe8>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3314      	adds	r3, #20
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	6859      	ldr	r1, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	4019      	ands	r1, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3314      	adds	r3, #20
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <xTaskGenericNotifyWait+0xe8>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3358      	adds	r3, #88	; 0x58
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002dd8:	f7fe f9b0 	bl	800113c <vPortExitCritical>

        return xReturn;
 8002ddc:	697b      	ldr	r3, [r7, #20]
    }
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	2000447c 	.word	0x2000447c
 8002dec:	e000ed04 	.word	0xe000ed04

08002df0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	61fb      	str	r3, [r7, #28]
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
        configASSERT( xTaskToNotify );
        pxTCB = xTaskToNotify;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	61bb      	str	r3, [r7, #24]

        taskENTER_CRITICAL();
 8002e06:	f7fe f981 	bl	800110c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <xTaskGenericNotify+0x30>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	3314      	adds	r3, #20
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4413      	add	r3, r2
 8002e26:	3358      	adds	r3, #88	; 0x58
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	75fb      	strb	r3, [r7, #23]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4413      	add	r3, r2
 8002e32:	3358      	adds	r3, #88	; 0x58
 8002e34:	2202      	movs	r2, #2
 8002e36:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d83f      	bhi.n	8002ebe <xTaskGenericNotify+0xce>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <xTaskGenericNotify+0x54>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002ebf 	.word	0x08002ebf
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e77 	.word	0x08002e77
 8002e50:	08002e93 	.word	0x08002e93
 8002e54:	08002ea3 	.word	0x08002ea3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3314      	adds	r3, #20
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	69b9      	ldr	r1, [r7, #24]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	605a      	str	r2, [r3, #4]
                    break;
 8002e74:	e024      	b.n	8002ec0 <xTaskGenericNotify+0xd0>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	3314      	adds	r3, #20
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	69b9      	ldr	r1, [r7, #24]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	3314      	adds	r3, #20
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	605a      	str	r2, [r3, #4]
                    break;
 8002e90:	e016      	b.n	8002ec0 <xTaskGenericNotify+0xd0>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	3314      	adds	r3, #20
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	605a      	str	r2, [r3, #4]
                    break;
 8002ea0:	e00e      	b.n	8002ec0 <xTaskGenericNotify+0xd0>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d007      	beq.n	8002eb8 <xTaskGenericNotify+0xc8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	3314      	adds	r3, #20
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002eb6:	e003      	b.n	8002ec0 <xTaskGenericNotify+0xd0>
                        xReturn = pdFAIL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
                    break;
 8002ebc:	e000      	b.n	8002ec0 <xTaskGenericNotify+0xd0>
                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );

                    break;
 8002ebe:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d12a      	bne.n	8002f1c <xTaskGenericNotify+0x12c>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe f825 	bl	8000f1a <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <xTaskGenericNotify+0x13c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <xTaskGenericNotify+0x13c>)
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4a10      	ldr	r2, [pc, #64]	; (8002f30 <xTaskGenericNotify+0x140>)
 8002ef0:	441a      	add	r2, r3
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4610      	mov	r0, r2
 8002efa:	f7fd ffb2 	bl	8000e62 <vListInsertEnd>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <xTaskGenericNotify+0x144>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d907      	bls.n	8002f1c <xTaskGenericNotify+0x12c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <xTaskGenericNotify+0x148>)
 8002f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002f1c:	f7fe f90e 	bl	800113c <vPortExitCritical>

        return xReturn;
 8002f20:	69fb      	ldr	r3, [r7, #28]
    }
 8002f22:	4618      	mov	r0, r3
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20004530 	.word	0x20004530
 8002f30:	20004480 	.word	0x20004480
 8002f34:	2000447c 	.word	0x2000447c
 8002f38:	e000ed04 	.word	0xe000ed04

08002f3c <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <xTaskGenericNotifyStateClear+0x16>
 8002f4c:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <xTaskGenericNotifyStateClear+0x54>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e000      	b.n	8002f54 <xTaskGenericNotifyStateClear+0x18>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	60bb      	str	r3, [r7, #8]

        taskENTER_CRITICAL();
 8002f56:	f7fe f8d9 	bl	800110c <vPortEnterCritical>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3358      	adds	r3, #88	; 0x58
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d108      	bne.n	8002f7c <xTaskGenericNotifyStateClear+0x40>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	3358      	adds	r3, #88	; 0x58
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 8002f76:	2301      	movs	r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e001      	b.n	8002f80 <xTaskGenericNotifyStateClear+0x44>
            }
            else
            {
                xReturn = pdFAIL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
            }
        }
        taskEXIT_CRITICAL();
 8002f80:	f7fe f8dc 	bl	800113c <vPortExitCritical>

        return xReturn;
 8002f84:	68fb      	ldr	r3, [r7, #12]
    }
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000447c 	.word	0x2000447c

08002f94 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	80fb      	strh	r3, [r7, #6]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002fa0:	4b29      	ldr	r3, [pc, #164]	; (8003048 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	81fb      	strh	r3, [r7, #14]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fa6:	4b29      	ldr	r3, [pc, #164]	; (800304c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd ffb4 	bl	8000f1a <uxListRemove>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <prvAddCurrentTaskToDelayedList+0x3c>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43da      	mvns	r2, r3
 8002fc6:	4b22      	ldr	r3, [pc, #136]	; (8003050 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	4a20      	ldr	r2, [pc, #128]	; (8003050 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002fce:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10a      	bne.n	8002ff0 <prvAddCurrentTaskToDelayedList+0x5c>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <prvAddCurrentTaskToDelayedList+0x5c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	481a      	ldr	r0, [pc, #104]	; (8003054 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002fea:	f7fd ff3a 	bl	8000e62 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002fee:	e027      	b.n	8003040 <prvAddCurrentTaskToDelayedList+0xac>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002ff0:	89fa      	ldrh	r2, [r7, #14]
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	81bb      	strh	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	89ba      	ldrh	r2, [r7, #12]
 8002ffe:	809a      	strh	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003000:	89ba      	ldrh	r2, [r7, #12]
 8003002:	89fb      	ldrh	r3, [r7, #14]
 8003004:	429a      	cmp	r2, r3
 8003006:	d209      	bcs.n	800301c <prvAddCurrentTaskToDelayedList+0x88>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <prvAddCurrentTaskToDelayedList+0xc4>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <prvAddCurrentTaskToDelayedList+0xb8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3304      	adds	r3, #4
 8003012:	4619      	mov	r1, r3
 8003014:	4610      	mov	r0, r2
 8003016:	f7fd ff47 	bl	8000ea8 <vListInsert>
}
 800301a:	e011      	b.n	8003040 <prvAddCurrentTaskToDelayedList+0xac>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <prvAddCurrentTaskToDelayedList+0xc8>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3304      	adds	r3, #4
 8003026:	4619      	mov	r1, r3
 8003028:	4610      	mov	r0, r2
 800302a:	f7fd ff3d 	bl	8000ea8 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	89ba      	ldrh	r2, [r7, #12]
 8003036:	429a      	cmp	r2, r3
 8003038:	d202      	bcs.n	8003040 <prvAddCurrentTaskToDelayedList+0xac>
                        xNextTaskUnblockTime = xTimeToWake;
 800303a:	4a09      	ldr	r2, [pc, #36]	; (8003060 <prvAddCurrentTaskToDelayedList+0xcc>)
 800303c:	89bb      	ldrh	r3, [r7, #12]
 800303e:	8013      	strh	r3, [r2, #0]
}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	2000452c 	.word	0x2000452c
 800304c:	2000447c 	.word	0x2000447c
 8003050:	20004530 	.word	0x20004530
 8003054:	20004514 	.word	0x20004514
 8003058:	200044fc 	.word	0x200044fc
 800305c:	200044f8 	.word	0x200044f8
 8003060:	20004548 	.word	0x20004548

08003064 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800306e:	f000 fa95 	bl	800359c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <xTimerCreateTimerTask+0x38>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <xTimerCreateTimerTask+0x3c>)
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	2303      	movs	r3, #3
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2300      	movs	r3, #0
 8003084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003088:	4906      	ldr	r1, [pc, #24]	; (80030a4 <xTimerCreateTimerTask+0x40>)
 800308a:	4807      	ldr	r0, [pc, #28]	; (80030a8 <xTimerCreateTimerTask+0x44>)
 800308c:	f7fe ff35 	bl	8001efa <xTaskCreate>
 8003090:	6078      	str	r0, [r7, #4]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
 8003092:	687b      	ldr	r3, [r7, #4]
    }
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20004584 	.word	0x20004584
 80030a0:	20004588 	.word	0x20004588
 80030a4:	080055c0 	.word	0x080055c0
 80030a8:	080031b5 	.word	0x080031b5

080030ac <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	80fb      	strh	r3, [r7, #6]
        BaseType_t xReturn = pdFAIL;
 80030bc:	2300      	movs	r3, #0
 80030be:	61fb      	str	r3, [r7, #28]

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <xTimerGenericCommand+0x7c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d02a      	beq.n	800311e <xTimerGenericCommand+0x72>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	82bb      	strh	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	dc18      	bgt.n	800310c <xTimerGenericCommand+0x60>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80030da:	f7ff fd97 	bl	8002c0c <xTaskGetSchedulerState>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d109      	bne.n	80030f8 <xTimerGenericCommand+0x4c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80030e4:	4b10      	ldr	r3, [pc, #64]	; (8003128 <xTimerGenericCommand+0x7c>)
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80030ea:	f107 0110 	add.w	r1, r7, #16
 80030ee:	2300      	movs	r3, #0
 80030f0:	f7fe f958 	bl	80013a4 <xQueueGenericSend>
 80030f4:	61f8      	str	r0, [r7, #28]
 80030f6:	e012      	b.n	800311e <xTimerGenericCommand+0x72>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <xTimerGenericCommand+0x7c>)
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	f107 0110 	add.w	r1, r7, #16
 8003100:	2300      	movs	r3, #0
 8003102:	2200      	movs	r2, #0
 8003104:	f7fe f94e 	bl	80013a4 <xQueueGenericSend>
 8003108:	61f8      	str	r0, [r7, #28]
 800310a:	e008      	b.n	800311e <xTimerGenericCommand+0x72>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <xTimerGenericCommand+0x7c>)
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	f107 0110 	add.w	r1, r7, #16
 8003114:	2300      	movs	r3, #0
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	f7fe f9f0 	bl	80014fc <xQueueGenericSendFromISR>
 800311c:	61f8      	str	r0, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800311e:	69fb      	ldr	r3, [r7, #28]
    }
 8003120:	4618      	mov	r0, r3
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20004584 	.word	0x20004584

0800312c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af02      	add	r7, sp, #8
 8003132:	4603      	mov	r3, r0
 8003134:	460a      	mov	r2, r1
 8003136:	80fb      	strh	r3, [r7, #6]
 8003138:	4613      	mov	r3, r2
 800313a:	80bb      	strh	r3, [r7, #4]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800313c:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <prvProcessExpiredTimer+0x84>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3304      	adds	r3, #4
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd fee5 	bl	8000f1a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d016      	beq.n	800318c <prvProcessExpiredTimer+0x60>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8b1a      	ldrh	r2, [r3, #24]
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4413      	add	r3, r2
 8003166:	b299      	uxth	r1, r3
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	88ba      	ldrh	r2, [r7, #4]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f8c9 	bl	8003304 <prvInsertTimerInActiveList>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d012      	beq.n	800319e <prvProcessExpiredTimer+0x72>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003178:	88fa      	ldrh	r2, [r7, #6]
 800317a:	2300      	movs	r3, #0
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	2300      	movs	r3, #0
 8003180:	2100      	movs	r1, #0
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7ff ff92 	bl	80030ac <xTimerGenericCommand>
 8003188:	60b8      	str	r0, [r7, #8]
 800318a:	e008      	b.n	800319e <prvProcessExpiredTimer+0x72>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	b2da      	uxtb	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	4798      	blx	r3
    }
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	2000457c 	.word	0x2000457c

080031b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80031bc:	f107 0308 	add.w	r3, r7, #8
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 f85d 	bl	8003280 <prvGetNextExpireTime>
 80031c6:	4603      	mov	r3, r0
 80031c8:	81fb      	strh	r3, [r7, #14]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	89fb      	ldrh	r3, [r7, #14]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 f803 	bl	80031dc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80031d6:	f000 f8df 	bl	8003398 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80031da:	e7ef      	b.n	80031bc <prvTimerTask+0x8>

080031dc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	80fb      	strh	r3, [r7, #6]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80031e8:	f7ff f924 	bl	8002434 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80031ec:	f107 0308 	add.w	r3, r7, #8
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 f867 	bl	80032c4 <prvSampleTimeNow>
 80031f6:	4603      	mov	r3, r0
 80031f8:	81fb      	strh	r3, [r7, #14]

            if( xTimerListsWereSwitched == pdFALSE )
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d133      	bne.n	8003268 <prvProcessTimerOrBlockTask+0x8c>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <prvProcessTimerOrBlockTask+0x44>
 8003206:	88fa      	ldrh	r2, [r7, #6]
 8003208:	89fb      	ldrh	r3, [r7, #14]
 800320a:	429a      	cmp	r2, r3
 800320c:	d808      	bhi.n	8003220 <prvProcessTimerOrBlockTask+0x44>
                {
                    ( void ) xTaskResumeAll();
 800320e:	f7ff f91f 	bl	8002450 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003212:	89fa      	ldrh	r2, [r7, #14]
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff87 	bl	800312c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800321e:	e025      	b.n	800326c <prvProcessTimerOrBlockTask+0x90>
                    if( xListWasEmpty != pdFALSE )
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <prvProcessTimerOrBlockTask+0x5c>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <prvProcessTimerOrBlockTask+0x98>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <prvProcessTimerOrBlockTask+0x58>
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <prvProcessTimerOrBlockTask+0x5a>
 8003234:	2300      	movs	r3, #0
 8003236:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <prvProcessTimerOrBlockTask+0x9c>)
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	89fb      	ldrh	r3, [r7, #14]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	b29b      	uxth	r3, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	4619      	mov	r1, r3
 8003248:	f7fe fb92 	bl	8001970 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800324c:	f7ff f900 	bl	8002450 <xTaskResumeAll>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <prvProcessTimerOrBlockTask+0x90>
                        portYIELD_WITHIN_API();
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <prvProcessTimerOrBlockTask+0xa0>)
 8003258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	f3bf 8f6f 	isb	sy
    }
 8003266:	e001      	b.n	800326c <prvProcessTimerOrBlockTask+0x90>
                ( void ) xTaskResumeAll();
 8003268:	f7ff f8f2 	bl	8002450 <xTaskResumeAll>
    }
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20004580 	.word	0x20004580
 8003278:	20004584 	.word	0x20004584
 800327c:	e000ed04 	.word	0xe000ed04

08003280 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <prvGetNextExpireTime+0x40>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <prvGetNextExpireTime+0x16>
 8003292:	2201      	movs	r2, #1
 8003294:	e000      	b.n	8003298 <prvGetNextExpireTime+0x18>
 8003296:	2200      	movs	r2, #0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d105      	bne.n	80032b0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <prvGetNextExpireTime+0x40>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	81fb      	strh	r3, [r7, #14]
 80032ae:	e001      	b.n	80032b4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	81fb      	strh	r3, [r7, #14]
        }

        return xNextExpireTime;
 80032b4:	89fb      	ldrh	r3, [r7, #14]
    }
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	2000457c 	.word	0x2000457c

080032c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80032cc:	f7ff f94e 	bl	800256c <xTaskGetTickCount>
 80032d0:	4603      	mov	r3, r0
 80032d2:	81fb      	strh	r3, [r7, #14]

        if( xTimeNow < xLastTime )
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <prvSampleTimeNow+0x3c>)
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	89fa      	ldrh	r2, [r7, #14]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d205      	bcs.n	80032ea <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 80032de:	f000 f907 	bl	80034f0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e002      	b.n	80032f0 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80032f0:	4a03      	ldr	r2, [pc, #12]	; (8003300 <prvSampleTimeNow+0x3c>)
 80032f2:	89fb      	ldrh	r3, [r7, #14]
 80032f4:	8013      	strh	r3, [r2, #0]

        return xTimeNow;
 80032f6:	89fb      	ldrh	r3, [r7, #14]
    }
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	2000458c 	.word	0x2000458c

08003304 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	4608      	mov	r0, r1
 800330e:	4611      	mov	r1, r2
 8003310:	461a      	mov	r2, r3
 8003312:	4603      	mov	r3, r0
 8003314:	817b      	strh	r3, [r7, #10]
 8003316:	460b      	mov	r3, r1
 8003318:	813b      	strh	r3, [r7, #8]
 800331a:	4613      	mov	r3, r2
 800331c:	80fb      	strh	r3, [r7, #6]
        BaseType_t xProcessTimerNow = pdFALSE;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	897a      	ldrh	r2, [r7, #10]
 8003326:	809a      	strh	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800332e:	897a      	ldrh	r2, [r7, #10]
 8003330:	893b      	ldrh	r3, [r7, #8]
 8003332:	429a      	cmp	r2, r3
 8003334:	d813      	bhi.n	800335e <prvInsertTimerInActiveList+0x5a>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003336:	893a      	ldrh	r2, [r7, #8]
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8b1b      	ldrh	r3, [r3, #24]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <prvInsertTimerInActiveList+0x48>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003346:	2301      	movs	r3, #1
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	e01b      	b.n	8003384 <prvInsertTimerInActiveList+0x80>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <prvInsertTimerInActiveList+0x8c>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3304      	adds	r3, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f7fd fda6 	bl	8000ea8 <vListInsert>
 800335c:	e012      	b.n	8003384 <prvInsertTimerInActiveList+0x80>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800335e:	893a      	ldrh	r2, [r7, #8]
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	429a      	cmp	r2, r3
 8003364:	d206      	bcs.n	8003374 <prvInsertTimerInActiveList+0x70>
 8003366:	897a      	ldrh	r2, [r7, #10]
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	429a      	cmp	r2, r3
 800336c:	d302      	bcc.n	8003374 <prvInsertTimerInActiveList+0x70>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800336e:	2301      	movs	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	e007      	b.n	8003384 <prvInsertTimerInActiveList+0x80>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <prvInsertTimerInActiveList+0x90>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3304      	adds	r3, #4
 800337c:	4619      	mov	r1, r3
 800337e:	4610      	mov	r0, r2
 8003380:	f7fd fd92 	bl	8000ea8 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003384:	697b      	ldr	r3, [r7, #20]
    }
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20004580 	.word	0x20004580
 8003394:	2000457c 	.word	0x2000457c

08003398 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800339e:	e095      	b.n	80034cc <prvProcessReceivedCommands+0x134>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f2c0 8091 	blt.w	80034ca <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	3304      	adds	r3, #4
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd fdae 	bl	8000f1a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff7f 	bl	80032c4 <prvSampleTimeNow>
 80033c6:	4603      	mov	r3, r0
 80033c8:	837b      	strh	r3, [r7, #26]

                switch( xMessage.xMessageID )
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	d87d      	bhi.n	80034cc <prvProcessReceivedCommands+0x134>
 80033d0:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <prvProcessReceivedCommands+0x40>)
 80033d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d6:	bf00      	nop
 80033d8:	08003401 	.word	0x08003401
 80033dc:	08003401 	.word	0x08003401
 80033e0:	08003401 	.word	0x08003401
 80033e4:	0800345f 	.word	0x0800345f
 80033e8:	08003473 	.word	0x08003473
 80033ec:	080034a1 	.word	0x080034a1
 80033f0:	08003401 	.word	0x08003401
 80033f4:	08003401 	.word	0x08003401
 80033f8:	0800345f 	.word	0x0800345f
 80033fc:	08003473 	.word	0x08003473
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	b2da      	uxtb	r2, r3
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003412:	89ba      	ldrh	r2, [r7, #12]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	8b1b      	ldrh	r3, [r3, #24]
 8003418:	4413      	add	r3, r2
 800341a:	b299      	uxth	r1, r3
 800341c:	89bb      	ldrh	r3, [r7, #12]
 800341e:	8b7a      	ldrh	r2, [r7, #26]
 8003420:	69f8      	ldr	r0, [r7, #28]
 8003422:	f7ff ff6f 	bl	8003304 <prvInsertTimerInActiveList>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d04f      	beq.n	80034cc <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	69f8      	ldr	r0, [r7, #28]
 8003432:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d044      	beq.n	80034cc <prvProcessReceivedCommands+0x134>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003442:	89ba      	ldrh	r2, [r7, #12]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	8b1b      	ldrh	r3, [r3, #24]
 8003448:	4413      	add	r3, r2
 800344a:	b29a      	uxth	r2, r3
 800344c:	2300      	movs	r3, #0
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2300      	movs	r3, #0
 8003452:	2100      	movs	r1, #0
 8003454:	69f8      	ldr	r0, [r7, #28]
 8003456:	f7ff fe29 	bl	80030ac <xTimerGenericCommand>
 800345a:	6178      	str	r0, [r7, #20]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800345c:	e036      	b.n	80034cc <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	b2da      	uxtb	r2, r3
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003470:	e02c      	b.n	80034cc <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	b2da      	uxtb	r2, r3
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003484:	89ba      	ldrh	r2, [r7, #12]
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	831a      	strh	r2, [r3, #24]
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	8b1a      	ldrh	r2, [r3, #24]
 800348e:	8b7b      	ldrh	r3, [r7, #26]
 8003490:	4413      	add	r3, r2
 8003492:	b299      	uxth	r1, r3
 8003494:	8b7b      	ldrh	r3, [r7, #26]
 8003496:	8b7a      	ldrh	r2, [r7, #26]
 8003498:	69f8      	ldr	r0, [r7, #28]
 800349a:	f7ff ff33 	bl	8003304 <prvInsertTimerInActiveList>
                        break;
 800349e:	e015      	b.n	80034cc <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <prvProcessReceivedCommands+0x11e>
                                {
                                    vPortFree( pxTimer );
 80034ae:	69f8      	ldr	r0, [r7, #28]
 80034b0:	f7fd fbb2 	bl	8000c18 <vPortFree>
 80034b4:	e00a      	b.n	80034cc <prvProcessReceivedCommands+0x134>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80034c8:	e000      	b.n	80034cc <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80034ca:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <prvProcessReceivedCommands+0x154>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f107 0108 	add.w	r1, r7, #8
 80034d4:	2200      	movs	r2, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe f86e 	bl	80015b8 <xQueueReceive>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f47f af5e 	bne.w	80033a0 <prvProcessReceivedCommands+0x8>
        }
    }
 80034e4:	bf00      	nop
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20004584 	.word	0x20004584

080034f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80034f6:	e03a      	b.n	800356e <prvSwitchTimerLists+0x7e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034f8:	4b26      	ldr	r3, [pc, #152]	; (8003594 <prvSwitchTimerLists+0xa4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	827b      	strh	r3, [r7, #18]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <prvSwitchTimerLists+0xa4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3304      	adds	r3, #4
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd fd02 	bl	8000f1a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <prvSwitchTimerLists+0x7e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8b1a      	ldrh	r2, [r3, #24]
 8003530:	8a7b      	ldrh	r3, [r7, #18]
 8003532:	4413      	add	r3, r2
 8003534:	817b      	strh	r3, [r7, #10]

                if( xReloadTime > xNextExpireTime )
 8003536:	897a      	ldrh	r2, [r7, #10]
 8003538:	8a7b      	ldrh	r3, [r7, #18]
 800353a:	429a      	cmp	r2, r3
 800353c:	d90e      	bls.n	800355c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	897a      	ldrh	r2, [r7, #10]
 8003542:	809a      	strh	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <prvSwitchTimerLists+0xa4>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3304      	adds	r3, #4
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f7fd fca7 	bl	8000ea8 <vListInsert>
 800355a:	e008      	b.n	800356e <prvSwitchTimerLists+0x7e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800355c:	8a7a      	ldrh	r2, [r7, #18]
 800355e:	2300      	movs	r3, #0
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	2300      	movs	r3, #0
 8003564:	2100      	movs	r1, #0
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff fda0 	bl	80030ac <xTimerGenericCommand>
 800356c:	6078      	str	r0, [r7, #4]
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <prvSwitchTimerLists+0xa4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1bf      	bne.n	80034f8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <prvSwitchTimerLists+0xa4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <prvSwitchTimerLists+0xa8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a04      	ldr	r2, [pc, #16]	; (8003594 <prvSwitchTimerLists+0xa4>)
 8003584:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003586:	4a04      	ldr	r2, [pc, #16]	; (8003598 <prvSwitchTimerLists+0xa8>)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	6013      	str	r3, [r2, #0]
    }
 800358c:	bf00      	nop
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	2000457c 	.word	0x2000457c
 8003598:	20004580 	.word	0x20004580

0800359c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80035a0:	f7fd fdb4 	bl	800110c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <prvCheckForValidListAndQueue+0x54>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d11d      	bne.n	80035e8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80035ac:	4811      	ldr	r0, [pc, #68]	; (80035f4 <prvCheckForValidListAndQueue+0x58>)
 80035ae:	f7fd fc2d 	bl	8000e0c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80035b2:	4811      	ldr	r0, [pc, #68]	; (80035f8 <prvCheckForValidListAndQueue+0x5c>)
 80035b4:	f7fd fc2a 	bl	8000e0c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80035b8:	4b10      	ldr	r3, [pc, #64]	; (80035fc <prvCheckForValidListAndQueue+0x60>)
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <prvCheckForValidListAndQueue+0x58>)
 80035bc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <prvCheckForValidListAndQueue+0x64>)
 80035c0:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <prvCheckForValidListAndQueue+0x5c>)
 80035c2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80035c4:	2200      	movs	r2, #0
 80035c6:	210c      	movs	r1, #12
 80035c8:	2005      	movs	r0, #5
 80035ca:	f7fd fe9f 	bl	800130c <xQueueGenericCreate>
 80035ce:	4602      	mov	r2, r0
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <prvCheckForValidListAndQueue+0x54>)
 80035d2:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <prvCheckForValidListAndQueue+0x54>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <prvCheckForValidListAndQueue+0x54>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4908      	ldr	r1, [pc, #32]	; (8003604 <prvCheckForValidListAndQueue+0x68>)
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe f99c 	bl	8001920 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80035e8:	f7fd fda8 	bl	800113c <vPortExitCritical>
    }
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20004584 	.word	0x20004584
 80035f4:	20004554 	.word	0x20004554
 80035f8:	20004568 	.word	0x20004568
 80035fc:	2000457c 	.word	0x2000457c
 8003600:	20004580 	.word	0x20004580
 8003604:	080055c8 	.word	0x080055c8

08003608 <HLCD_enuInit>:

#include "MCAL/Timer_interface.h"
//#include "SysTick_interface.h"

tenumFncErrorState HLCD_enuInit(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
	tenumFncErrorState ReturnFunState = LSTY_EXECUTED_SUCCESSFULLY ;
 800360e:	2300      	movs	r3, #0
 8003610:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8Iterator;

	for(Local_u8Iterator = 0 ; Local_u8Iterator < HLCD_u8NumberOfLCD ; Local_u8Iterator++ )
 8003612:	2300      	movs	r3, #0
 8003614:	71fb      	strb	r3, [r7, #7]
 8003616:	e18d      	b.n	8003934 <HLCD_enuInit+0x32c>
	{
		if(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8MODE == HLCD_u8MODE_8BIT)
 8003618:	79fa      	ldrb	r2, [r7, #7]
 800361a:	49cb      	ldr	r1, [pc, #812]	; (8003948 <HLCD_enuInit+0x340>)
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	440b      	add	r3, r1
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	f040 809d 	bne.w	800376a <HLCD_enuInit+0x162>
		{
			MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8DataPin_0,OUTPUT_SPEED_2MHZ_PP);
 8003630:	79fa      	ldrb	r2, [r7, #7]
 8003632:	49c5      	ldr	r1, [pc, #788]	; (8003948 <HLCD_enuInit+0x340>)
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	440b      	add	r3, r1
 8003640:	785a      	ldrb	r2, [r3, #1]
 8003642:	789b      	ldrb	r3, [r3, #2]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	431a      	orrs	r2, r3
 8003648:	2300      	movs	r3, #0
 800364a:	f362 030f 	bfi	r3, r2, #0, #16
 800364e:	2102      	movs	r1, #2
 8003650:	4618      	mov	r0, r3
 8003652:	f001 f9b7 	bl	80049c4 <MGPIO_voidSetPinDirection>
			MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8DataPin_1,OUTPUT_SPEED_2MHZ_PP);
 8003656:	79fa      	ldrb	r2, [r7, #7]
 8003658:	49bb      	ldr	r1, [pc, #748]	; (8003948 <HLCD_enuInit+0x340>)
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	440b      	add	r3, r1
 8003666:	78da      	ldrb	r2, [r3, #3]
 8003668:	791b      	ldrb	r3, [r3, #4]
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	431a      	orrs	r2, r3
 800366e:	2300      	movs	r3, #0
 8003670:	f362 030f 	bfi	r3, r2, #0, #16
 8003674:	2102      	movs	r1, #2
 8003676:	4618      	mov	r0, r3
 8003678:	f001 f9a4 	bl	80049c4 <MGPIO_voidSetPinDirection>
			MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8DataPin_2,OUTPUT_SPEED_2MHZ_PP);
 800367c:	79fa      	ldrb	r2, [r7, #7]
 800367e:	49b2      	ldr	r1, [pc, #712]	; (8003948 <HLCD_enuInit+0x340>)
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	440b      	add	r3, r1
 800368c:	795a      	ldrb	r2, [r3, #5]
 800368e:	799b      	ldrb	r3, [r3, #6]
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	431a      	orrs	r2, r3
 8003694:	2300      	movs	r3, #0
 8003696:	f362 030f 	bfi	r3, r2, #0, #16
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f001 f991 	bl	80049c4 <MGPIO_voidSetPinDirection>
			MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8DataPin_3,OUTPUT_SPEED_2MHZ_PP);
 80036a2:	79fa      	ldrb	r2, [r7, #7]
 80036a4:	49a8      	ldr	r1, [pc, #672]	; (8003948 <HLCD_enuInit+0x340>)
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	440b      	add	r3, r1
 80036b2:	79da      	ldrb	r2, [r3, #7]
 80036b4:	7a1b      	ldrb	r3, [r3, #8]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	431a      	orrs	r2, r3
 80036ba:	2300      	movs	r3, #0
 80036bc:	f362 030f 	bfi	r3, r2, #0, #16
 80036c0:	2102      	movs	r1, #2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 f97e 	bl	80049c4 <MGPIO_voidSetPinDirection>
			MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8DataPin_4,OUTPUT_SPEED_2MHZ_PP);
 80036c8:	79fa      	ldrb	r2, [r7, #7]
 80036ca:	499f      	ldr	r1, [pc, #636]	; (8003948 <HLCD_enuInit+0x340>)
 80036cc:	4613      	mov	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	440b      	add	r3, r1
 80036d8:	3308      	adds	r3, #8
 80036da:	785a      	ldrb	r2, [r3, #1]
 80036dc:	789b      	ldrb	r3, [r3, #2]
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	431a      	orrs	r2, r3
 80036e2:	2300      	movs	r3, #0
 80036e4:	f362 030f 	bfi	r3, r2, #0, #16
 80036e8:	2102      	movs	r1, #2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 f96a 	bl	80049c4 <MGPIO_voidSetPinDirection>
			MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8DataPin_5,OUTPUT_SPEED_2MHZ_PP);
 80036f0:	79fa      	ldrb	r2, [r7, #7]
 80036f2:	4995      	ldr	r1, [pc, #596]	; (8003948 <HLCD_enuInit+0x340>)
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	440b      	add	r3, r1
 8003700:	3308      	adds	r3, #8
 8003702:	78da      	ldrb	r2, [r3, #3]
 8003704:	791b      	ldrb	r3, [r3, #4]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	431a      	orrs	r2, r3
 800370a:	2300      	movs	r3, #0
 800370c:	f362 030f 	bfi	r3, r2, #0, #16
 8003710:	2102      	movs	r1, #2
 8003712:	4618      	mov	r0, r3
 8003714:	f001 f956 	bl	80049c4 <MGPIO_voidSetPinDirection>
			MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8DataPin_6,OUTPUT_SPEED_2MHZ_PP);
 8003718:	79fa      	ldrb	r2, [r7, #7]
 800371a:	498b      	ldr	r1, [pc, #556]	; (8003948 <HLCD_enuInit+0x340>)
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	440b      	add	r3, r1
 8003728:	3308      	adds	r3, #8
 800372a:	795a      	ldrb	r2, [r3, #5]
 800372c:	799b      	ldrb	r3, [r3, #6]
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	431a      	orrs	r2, r3
 8003732:	2300      	movs	r3, #0
 8003734:	f362 030f 	bfi	r3, r2, #0, #16
 8003738:	2102      	movs	r1, #2
 800373a:	4618      	mov	r0, r3
 800373c:	f001 f942 	bl	80049c4 <MGPIO_voidSetPinDirection>
			MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8DataPin_7,OUTPUT_SPEED_2MHZ_PP);
 8003740:	79fa      	ldrb	r2, [r7, #7]
 8003742:	4981      	ldr	r1, [pc, #516]	; (8003948 <HLCD_enuInit+0x340>)
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	440b      	add	r3, r1
 8003750:	3308      	adds	r3, #8
 8003752:	79da      	ldrb	r2, [r3, #7]
 8003754:	7a1b      	ldrb	r3, [r3, #8]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	431a      	orrs	r2, r3
 800375a:	2300      	movs	r3, #0
 800375c:	f362 030f 	bfi	r3, r2, #0, #16
 8003760:	2102      	movs	r1, #2
 8003762:	4618      	mov	r0, r3
 8003764:	f001 f92e 	bl	80049c4 <MGPIO_voidSetPinDirection>
 8003768:	e05f      	b.n	800382a <HLCD_enuInit+0x222>
		}
		else if (HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8MODE == HLCD_u8MODE_4BIT)
 800376a:	79fa      	ldrb	r2, [r7, #7]
 800376c:	4976      	ldr	r1, [pc, #472]	; (8003948 <HLCD_enuInit+0x340>)
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	440b      	add	r3, r1
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d150      	bne.n	8003822 <HLCD_enuInit+0x21a>
		{
			MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8DataPin_4,OUTPUT_SPEED_2MHZ_PP);
 8003780:	79fa      	ldrb	r2, [r7, #7]
 8003782:	4971      	ldr	r1, [pc, #452]	; (8003948 <HLCD_enuInit+0x340>)
 8003784:	4613      	mov	r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4413      	add	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	440b      	add	r3, r1
 8003790:	3308      	adds	r3, #8
 8003792:	785a      	ldrb	r2, [r3, #1]
 8003794:	789b      	ldrb	r3, [r3, #2]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	431a      	orrs	r2, r3
 800379a:	2300      	movs	r3, #0
 800379c:	f362 030f 	bfi	r3, r2, #0, #16
 80037a0:	2102      	movs	r1, #2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 f90e 	bl	80049c4 <MGPIO_voidSetPinDirection>
			MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8DataPin_5,OUTPUT_SPEED_2MHZ_PP);
 80037a8:	79fa      	ldrb	r2, [r7, #7]
 80037aa:	4967      	ldr	r1, [pc, #412]	; (8003948 <HLCD_enuInit+0x340>)
 80037ac:	4613      	mov	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	440b      	add	r3, r1
 80037b8:	3308      	adds	r3, #8
 80037ba:	78da      	ldrb	r2, [r3, #3]
 80037bc:	791b      	ldrb	r3, [r3, #4]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	431a      	orrs	r2, r3
 80037c2:	2300      	movs	r3, #0
 80037c4:	f362 030f 	bfi	r3, r2, #0, #16
 80037c8:	2102      	movs	r1, #2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 f8fa 	bl	80049c4 <MGPIO_voidSetPinDirection>
			MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8DataPin_6,OUTPUT_SPEED_2MHZ_PP);
 80037d0:	79fa      	ldrb	r2, [r7, #7]
 80037d2:	495d      	ldr	r1, [pc, #372]	; (8003948 <HLCD_enuInit+0x340>)
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	440b      	add	r3, r1
 80037e0:	3308      	adds	r3, #8
 80037e2:	795a      	ldrb	r2, [r3, #5]
 80037e4:	799b      	ldrb	r3, [r3, #6]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	431a      	orrs	r2, r3
 80037ea:	2300      	movs	r3, #0
 80037ec:	f362 030f 	bfi	r3, r2, #0, #16
 80037f0:	2102      	movs	r1, #2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 f8e6 	bl	80049c4 <MGPIO_voidSetPinDirection>
			MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8DataPin_7,OUTPUT_SPEED_2MHZ_PP);
 80037f8:	79fa      	ldrb	r2, [r7, #7]
 80037fa:	4953      	ldr	r1, [pc, #332]	; (8003948 <HLCD_enuInit+0x340>)
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	440b      	add	r3, r1
 8003808:	3308      	adds	r3, #8
 800380a:	79da      	ldrb	r2, [r3, #7]
 800380c:	7a1b      	ldrb	r3, [r3, #8]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	431a      	orrs	r2, r3
 8003812:	2300      	movs	r3, #0
 8003814:	f362 030f 	bfi	r3, r2, #0, #16
 8003818:	2102      	movs	r1, #2
 800381a:	4618      	mov	r0, r3
 800381c:	f001 f8d2 	bl	80049c4 <MGPIO_voidSetPinDirection>
 8003820:	e003      	b.n	800382a <HLCD_enuInit+0x222>

		}
		else
		{
			ReturnFunState = LSTY_READ_ERROR;
 8003822:	2303      	movs	r3, #3
 8003824:	71bb      	strb	r3, [r7, #6]
			return ReturnFunState;
 8003826:	79bb      	ldrb	r3, [r7, #6]
 8003828:	e089      	b.n	800393e <HLCD_enuInit+0x336>
		}

		MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8ReadWritePin,OUTPUT_SPEED_2MHZ_PP);
 800382a:	79fa      	ldrb	r2, [r7, #7]
 800382c:	4946      	ldr	r1, [pc, #280]	; (8003948 <HLCD_enuInit+0x340>)
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	440b      	add	r3, r1
 800383a:	3310      	adds	r3, #16
 800383c:	78da      	ldrb	r2, [r3, #3]
 800383e:	791b      	ldrb	r3, [r3, #4]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	431a      	orrs	r2, r3
 8003844:	2300      	movs	r3, #0
 8003846:	f362 030f 	bfi	r3, r2, #0, #16
 800384a:	2102      	movs	r1, #2
 800384c:	4618      	mov	r0, r3
 800384e:	f001 f8b9 	bl	80049c4 <MGPIO_voidSetPinDirection>
		MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8RegSelectPin,OUTPUT_SPEED_2MHZ_PP);
 8003852:	79fa      	ldrb	r2, [r7, #7]
 8003854:	493c      	ldr	r1, [pc, #240]	; (8003948 <HLCD_enuInit+0x340>)
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	440b      	add	r3, r1
 8003862:	3310      	adds	r3, #16
 8003864:	785a      	ldrb	r2, [r3, #1]
 8003866:	789b      	ldrb	r3, [r3, #2]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	431a      	orrs	r2, r3
 800386c:	2300      	movs	r3, #0
 800386e:	f362 030f 	bfi	r3, r2, #0, #16
 8003872:	2102      	movs	r1, #2
 8003874:	4618      	mov	r0, r3
 8003876:	f001 f8a5 	bl	80049c4 <MGPIO_voidSetPinDirection>
		MGPIO_voidSetPinDirection(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8EnablePin,OUTPUT_SPEED_2MHZ_PP);
 800387a:	79fa      	ldrb	r2, [r7, #7]
 800387c:	4932      	ldr	r1, [pc, #200]	; (8003948 <HLCD_enuInit+0x340>)
 800387e:	4613      	mov	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4413      	add	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	440b      	add	r3, r1
 800388a:	3310      	adds	r3, #16
 800388c:	795a      	ldrb	r2, [r3, #5]
 800388e:	799b      	ldrb	r3, [r3, #6]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	431a      	orrs	r2, r3
 8003894:	2300      	movs	r3, #0
 8003896:	f362 030f 	bfi	r3, r2, #0, #16
 800389a:	2102      	movs	r1, #2
 800389c:	4618      	mov	r0, r3
 800389e:	f001 f891 	bl	80049c4 <MGPIO_voidSetPinDirection>
		Mtimer4_voidDelay_ms(40);
 80038a2:	2028      	movs	r0, #40	; 0x28
 80038a4:	f001 fb2a 	bl	8004efc <Mtimer4_voidDelay_ms>
		//MSTK_voidSetBusyWait(40000); // 40000 uSec = 40 mSec

		if(HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8MODE == HLCD_u8MODE_8BIT)
 80038a8:	79fa      	ldrb	r2, [r7, #7]
 80038aa:	4927      	ldr	r1, [pc, #156]	; (8003948 <HLCD_enuInit+0x340>)
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	440b      	add	r3, r1
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d108      	bne.n	80038d0 <HLCD_enuInit+0x2c8>
		{
			HLCD_enuWriteCmd(FUNCTION_SET,Local_u8Iterator);
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	4619      	mov	r1, r3
 80038c2:	203c      	movs	r0, #60	; 0x3c
 80038c4:	f000 fac0 	bl	8003e48 <HLCD_enuWriteCmd>
			Mtimer4_voidDelay_ms(1);
 80038c8:	2001      	movs	r0, #1
 80038ca:	f001 fb17 	bl	8004efc <Mtimer4_voidDelay_ms>
 80038ce:	e01e      	b.n	800390e <HLCD_enuInit+0x306>
			//MSTK_voidSetBusyWait(1000); // 1000 uSec = 1 mSec
		}
		else if (HLCDArrayOfLCD[Local_u8Iterator].HLCD_u8MODE == HLCD_u8MODE_4BIT)
 80038d0:	79fa      	ldrb	r2, [r7, #7]
 80038d2:	491d      	ldr	r1, [pc, #116]	; (8003948 <HLCD_enuInit+0x340>)
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	440b      	add	r3, r1
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <HLCD_enuInit+0x2fe>
		{
			HLCD_enuWriteCmd(0x33,Local_u8Iterator);
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	4619      	mov	r1, r3
 80038ea:	2033      	movs	r0, #51	; 0x33
 80038ec:	f000 faac 	bl	8003e48 <HLCD_enuWriteCmd>
			HLCD_enuWriteCmd(0x32,Local_u8Iterator);
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	4619      	mov	r1, r3
 80038f4:	2032      	movs	r0, #50	; 0x32
 80038f6:	f000 faa7 	bl	8003e48 <HLCD_enuWriteCmd>
			HLCD_enuWriteCmd(0x28,Local_u8Iterator);
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	4619      	mov	r1, r3
 80038fe:	2028      	movs	r0, #40	; 0x28
 8003900:	f000 faa2 	bl	8003e48 <HLCD_enuWriteCmd>
 8003904:	e003      	b.n	800390e <HLCD_enuInit+0x306>
		}
		else
		{
			ReturnFunState = LSTY_READ_ERROR;
 8003906:	2303      	movs	r3, #3
 8003908:	71bb      	strb	r3, [r7, #6]
			return ReturnFunState;
 800390a:	79bb      	ldrb	r3, [r7, #6]
 800390c:	e017      	b.n	800393e <HLCD_enuInit+0x336>
		}

		HLCD_enuWriteCmd(DISPLAY_ON_WITH_CURSOR,Local_u8Iterator);
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	4619      	mov	r1, r3
 8003912:	200e      	movs	r0, #14
 8003914:	f000 fa98 	bl	8003e48 <HLCD_enuWriteCmd>

		Mtimer4_voidDelay_ms(1);
 8003918:	2001      	movs	r0, #1
 800391a:	f001 faef 	bl	8004efc <Mtimer4_voidDelay_ms>
		//MSTK_voidSetBusyWait(1000); // 1000 uSec = 1 mSec
		HLCD_enuWriteCmd(CLEAR_DISPLAY,Local_u8Iterator);
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	4619      	mov	r1, r3
 8003922:	2001      	movs	r0, #1
 8003924:	f000 fa90 	bl	8003e48 <HLCD_enuWriteCmd>
		Mtimer4_voidDelay_ms(2);
 8003928:	2002      	movs	r0, #2
 800392a:	f001 fae7 	bl	8004efc <Mtimer4_voidDelay_ms>
	for(Local_u8Iterator = 0 ; Local_u8Iterator < HLCD_u8NumberOfLCD ; Local_u8Iterator++ )
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	3301      	adds	r3, #1
 8003932:	71fb      	strb	r3, [r7, #7]
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f43f ae6e 	beq.w	8003618 <HLCD_enuInit+0x10>
		//MSTK_voidSetBusyWait(2000); // 2000 uSec = 2 mSec
	}

	return ReturnFunState;
 800393c:	79bb      	ldrb	r3, [r7, #6]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000008 	.word	0x20000008

0800394c <HLCD_enuWriteData>:

tenumFncErrorState HLCD_enuWriteData(u8 HLCD_u8DataCpy, u8 u8LCDNumber)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	460a      	mov	r2, r1
 8003956:	71fb      	strb	r3, [r7, #7]
 8003958:	4613      	mov	r3, r2
 800395a:	71bb      	strb	r3, [r7, #6]
	tenumFncErrorState ReturnFunState = LSTY_EXECUTED_SUCCESSFULLY;
 800395c:	2300      	movs	r3, #0
 800395e:	73fb      	strb	r3, [r7, #15]

	if((u8LCDNumber >= 0)  && (u8LCDNumber < HLCD_u8NumberOfLCD))
 8003960:	79bb      	ldrb	r3, [r7, #6]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 8266 	bne.w	8003e34 <HLCD_enuWriteData+0x4e8>
	{

		MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8RegSelectPin, HIGH);
 8003968:	79ba      	ldrb	r2, [r7, #6]
 800396a:	49b0      	ldr	r1, [pc, #704]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 800396c:	4613      	mov	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4413      	add	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	440b      	add	r3, r1
 8003978:	3310      	adds	r3, #16
 800397a:	785a      	ldrb	r2, [r3, #1]
 800397c:	789b      	ldrb	r3, [r3, #2]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	431a      	orrs	r2, r3
 8003982:	2300      	movs	r3, #0
 8003984:	f362 030f 	bfi	r3, r2, #0, #16
 8003988:	2101      	movs	r1, #1
 800398a:	4618      	mov	r0, r3
 800398c:	f001 f910 	bl	8004bb0 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8ReadWritePin, LOW);
 8003990:	79ba      	ldrb	r2, [r7, #6]
 8003992:	49a6      	ldr	r1, [pc, #664]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	440b      	add	r3, r1
 80039a0:	3310      	adds	r3, #16
 80039a2:	78da      	ldrb	r2, [r3, #3]
 80039a4:	791b      	ldrb	r3, [r3, #4]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	431a      	orrs	r2, r3
 80039aa:	2300      	movs	r3, #0
 80039ac:	f362 030f 	bfi	r3, r2, #0, #16
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 f8fc 	bl	8004bb0 <MGPIO_voidSetPinValue>

		if(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8MODE == HLCD_u8MODE_4BIT)
 80039b8:	79ba      	ldrb	r2, [r7, #6]
 80039ba:	499c      	ldr	r1, [pc, #624]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 80039bc:	4613      	mov	r3, r2
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4413      	add	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	440b      	add	r3, r1
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 8130 	bne.w	8003c30 <HLCD_enuWriteData+0x2e4>
		{
			u8 u8data = HLCD_u8DataCpy & 0xf0;
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	f023 030f 	bic.w	r3, r3, #15
 80039d6:	73bb      	strb	r3, [r7, #14]
			HLCD_SendDataPort_4BIT(u8data,u8LCDNumber); // sending high nibble first
 80039d8:	79ba      	ldrb	r2, [r7, #6]
 80039da:	7bbb      	ldrb	r3, [r7, #14]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	b2d8      	uxtb	r0, r3
 80039e6:	4991      	ldr	r1, [pc, #580]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 80039e8:	4613      	mov	r3, r2
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4413      	add	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	440b      	add	r3, r1
 80039f4:	3308      	adds	r3, #8
 80039f6:	785a      	ldrb	r2, [r3, #1]
 80039f8:	789b      	ldrb	r3, [r3, #2]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	431a      	orrs	r2, r3
 80039fe:	2300      	movs	r3, #0
 8003a00:	f362 030f 	bfi	r3, r2, #0, #16
 8003a04:	4601      	mov	r1, r0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 f8d2 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003a0c:	79ba      	ldrb	r2, [r7, #6]
 8003a0e:	7bbb      	ldrb	r3, [r7, #14]
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	b2d8      	uxtb	r0, r3
 8003a1a:	4984      	ldr	r1, [pc, #528]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	440b      	add	r3, r1
 8003a28:	3308      	adds	r3, #8
 8003a2a:	78da      	ldrb	r2, [r3, #3]
 8003a2c:	791b      	ldrb	r3, [r3, #4]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	431a      	orrs	r2, r3
 8003a32:	2300      	movs	r3, #0
 8003a34:	f362 030f 	bfi	r3, r2, #0, #16
 8003a38:	4601      	mov	r1, r0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 f8b8 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003a40:	79ba      	ldrb	r2, [r7, #6]
 8003a42:	7bbb      	ldrb	r3, [r7, #14]
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	b2d8      	uxtb	r0, r3
 8003a4e:	4977      	ldr	r1, [pc, #476]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	4413      	add	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	795a      	ldrb	r2, [r3, #5]
 8003a60:	799b      	ldrb	r3, [r3, #6]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	431a      	orrs	r2, r3
 8003a66:	2300      	movs	r3, #0
 8003a68:	f362 030f 	bfi	r3, r2, #0, #16
 8003a6c:	4601      	mov	r1, r0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 f89e 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003a74:	79ba      	ldrb	r2, [r7, #6]
 8003a76:	7bbb      	ldrb	r3, [r7, #14]
 8003a78:	09db      	lsrs	r3, r3, #7
 8003a7a:	b2d8      	uxtb	r0, r3
 8003a7c:	496b      	ldr	r1, [pc, #428]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	79da      	ldrb	r2, [r3, #7]
 8003a8e:	7a1b      	ldrb	r3, [r3, #8]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	431a      	orrs	r2, r3
 8003a94:	2300      	movs	r3, #0
 8003a96:	f362 030f 	bfi	r3, r2, #0, #16
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 f887 	bl	8004bb0 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8EnablePin, HIGH);// E = 1
 8003aa2:	79ba      	ldrb	r2, [r7, #6]
 8003aa4:	4961      	ldr	r1, [pc, #388]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3310      	adds	r3, #16
 8003ab4:	795a      	ldrb	r2, [r3, #5]
 8003ab6:	799b      	ldrb	r3, [r3, #6]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	431a      	orrs	r2, r3
 8003abc:	2300      	movs	r3, #0
 8003abe:	f362 030f 	bfi	r3, r2, #0, #16
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 f873 	bl	8004bb0 <MGPIO_voidSetPinValue>

			Mtimer4_voidDelay_us(1);
 8003aca:	2001      	movs	r0, #1
 8003acc:	f001 f9ec 	bl	8004ea8 <Mtimer4_voidDelay_us>
			//MSTK_voidSetBusyWait(1); // 1 uSec

			MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8EnablePin, LOW);// E = 0
 8003ad0:	79ba      	ldrb	r2, [r7, #6]
 8003ad2:	4956      	ldr	r1, [pc, #344]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3310      	adds	r3, #16
 8003ae2:	795a      	ldrb	r2, [r3, #5]
 8003ae4:	799b      	ldrb	r3, [r3, #6]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	2300      	movs	r3, #0
 8003aec:	f362 030f 	bfi	r3, r2, #0, #16
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 f85c 	bl	8004bb0 <MGPIO_voidSetPinValue>

			Mtimer4_voidDelay_us(2);
 8003af8:	2002      	movs	r0, #2
 8003afa:	f001 f9d5 	bl	8004ea8 <Mtimer4_voidDelay_us>
			//MSTK_voidSetBusyWait(20); // 20 uSec

			u8data = HLCD_u8DataCpy << 4;
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	73bb      	strb	r3, [r7, #14]
			HLCD_SendDataPort_4BIT(u8data,u8LCDNumber); // sending low nibble second
 8003b04:	79ba      	ldrb	r2, [r7, #6]
 8003b06:	7bbb      	ldrb	r3, [r7, #14]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	b2d8      	uxtb	r0, r3
 8003b12:	4946      	ldr	r1, [pc, #280]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4413      	add	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	440b      	add	r3, r1
 8003b20:	3308      	adds	r3, #8
 8003b22:	785a      	ldrb	r2, [r3, #1]
 8003b24:	789b      	ldrb	r3, [r3, #2]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f362 030f 	bfi	r3, r2, #0, #16
 8003b30:	4601      	mov	r1, r0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 f83c 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003b38:	79ba      	ldrb	r2, [r7, #6]
 8003b3a:	7bbb      	ldrb	r3, [r7, #14]
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	b2d8      	uxtb	r0, r3
 8003b46:	4939      	ldr	r1, [pc, #228]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	440b      	add	r3, r1
 8003b54:	3308      	adds	r3, #8
 8003b56:	78da      	ldrb	r2, [r3, #3]
 8003b58:	791b      	ldrb	r3, [r3, #4]
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f362 030f 	bfi	r3, r2, #0, #16
 8003b64:	4601      	mov	r1, r0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 f822 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003b6c:	79ba      	ldrb	r2, [r7, #6]
 8003b6e:	7bbb      	ldrb	r3, [r7, #14]
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	b2d8      	uxtb	r0, r3
 8003b7a:	492c      	ldr	r1, [pc, #176]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	440b      	add	r3, r1
 8003b88:	3308      	adds	r3, #8
 8003b8a:	795a      	ldrb	r2, [r3, #5]
 8003b8c:	799b      	ldrb	r3, [r3, #6]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	431a      	orrs	r2, r3
 8003b92:	2300      	movs	r3, #0
 8003b94:	f362 030f 	bfi	r3, r2, #0, #16
 8003b98:	4601      	mov	r1, r0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f001 f808 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003ba0:	79ba      	ldrb	r2, [r7, #6]
 8003ba2:	7bbb      	ldrb	r3, [r7, #14]
 8003ba4:	09db      	lsrs	r3, r3, #7
 8003ba6:	b2d8      	uxtb	r0, r3
 8003ba8:	4920      	ldr	r1, [pc, #128]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 8003baa:	4613      	mov	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	79da      	ldrb	r2, [r3, #7]
 8003bba:	7a1b      	ldrb	r3, [r3, #8]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f362 030f 	bfi	r3, r2, #0, #16
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fff1 	bl	8004bb0 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8EnablePin, HIGH); // E = 1 ;
 8003bce:	79ba      	ldrb	r2, [r7, #6]
 8003bd0:	4916      	ldr	r1, [pc, #88]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	440b      	add	r3, r1
 8003bde:	3310      	adds	r3, #16
 8003be0:	795a      	ldrb	r2, [r3, #5]
 8003be2:	799b      	ldrb	r3, [r3, #6]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	431a      	orrs	r2, r3
 8003be8:	2300      	movs	r3, #0
 8003bea:	f362 030f 	bfi	r3, r2, #0, #16
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 ffdd 	bl	8004bb0 <MGPIO_voidSetPinValue>

			Mtimer4_voidDelay_us(1);
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	f001 f956 	bl	8004ea8 <Mtimer4_voidDelay_us>
			//MSTK_voidSetBusyWait(1); // 1 uSec

			MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8EnablePin, LOW); // E = 0
 8003bfc:	79ba      	ldrb	r2, [r7, #6]
 8003bfe:	490b      	ldr	r1, [pc, #44]	; (8003c2c <HLCD_enuWriteData+0x2e0>)
 8003c00:	4613      	mov	r3, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3310      	adds	r3, #16
 8003c0e:	795a      	ldrb	r2, [r3, #5]
 8003c10:	799b      	ldrb	r3, [r3, #6]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	431a      	orrs	r2, r3
 8003c16:	2300      	movs	r3, #0
 8003c18:	f362 030f 	bfi	r3, r2, #0, #16
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 ffc6 	bl	8004bb0 <MGPIO_voidSetPinValue>

			Mtimer4_voidDelay_us(2);
 8003c24:	2002      	movs	r0, #2
 8003c26:	f001 f93f 	bl	8004ea8 <Mtimer4_voidDelay_us>
 8003c2a:	e105      	b.n	8003e38 <HLCD_enuWriteData+0x4ec>
 8003c2c:	20000008 	.word	0x20000008
			//MSTK_voidSetBusyWait(20); // 20 uSec
		}
		else if(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8MODE == HLCD_u8MODE_8BIT)
 8003c30:	79ba      	ldrb	r2, [r7, #6]
 8003c32:	4984      	ldr	r1, [pc, #528]	; (8003e44 <HLCD_enuWriteData+0x4f8>)
 8003c34:	4613      	mov	r3, r2
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	440b      	add	r3, r1
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	f040 80f3 	bne.w	8003e2e <HLCD_enuWriteData+0x4e2>
		{
			HLCD_SendDataPort_8BIT(HLCD_u8DataCpy,u8LCDNumber);
 8003c48:	79ba      	ldrb	r2, [r7, #6]
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	b2d8      	uxtb	r0, r3
 8003c52:	497c      	ldr	r1, [pc, #496]	; (8003e44 <HLCD_enuWriteData+0x4f8>)
 8003c54:	4613      	mov	r3, r2
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	4413      	add	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	440b      	add	r3, r1
 8003c60:	785a      	ldrb	r2, [r3, #1]
 8003c62:	789b      	ldrb	r3, [r3, #2]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	431a      	orrs	r2, r3
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f362 030f 	bfi	r3, r2, #0, #16
 8003c6e:	4601      	mov	r1, r0
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 ff9d 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003c76:	79ba      	ldrb	r2, [r7, #6]
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	085b      	lsrs	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	b2d8      	uxtb	r0, r3
 8003c84:	496f      	ldr	r1, [pc, #444]	; (8003e44 <HLCD_enuWriteData+0x4f8>)
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	440b      	add	r3, r1
 8003c92:	78da      	ldrb	r2, [r3, #3]
 8003c94:	791b      	ldrb	r3, [r3, #4]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f362 030f 	bfi	r3, r2, #0, #16
 8003ca0:	4601      	mov	r1, r0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 ff84 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003ca8:	79ba      	ldrb	r2, [r7, #6]
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	089b      	lsrs	r3, r3, #2
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	b2d8      	uxtb	r0, r3
 8003cb6:	4963      	ldr	r1, [pc, #396]	; (8003e44 <HLCD_enuWriteData+0x4f8>)
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	795a      	ldrb	r2, [r3, #5]
 8003cc6:	799b      	ldrb	r3, [r3, #6]
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f362 030f 	bfi	r3, r2, #0, #16
 8003cd2:	4601      	mov	r1, r0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 ff6b 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003cda:	79ba      	ldrb	r2, [r7, #6]
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	08db      	lsrs	r3, r3, #3
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	b2d8      	uxtb	r0, r3
 8003ce8:	4956      	ldr	r1, [pc, #344]	; (8003e44 <HLCD_enuWriteData+0x4f8>)
 8003cea:	4613      	mov	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4413      	add	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	79da      	ldrb	r2, [r3, #7]
 8003cf8:	7a1b      	ldrb	r3, [r3, #8]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f362 030f 	bfi	r3, r2, #0, #16
 8003d04:	4601      	mov	r1, r0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 ff52 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003d0c:	79ba      	ldrb	r2, [r7, #6]
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	b2d8      	uxtb	r0, r3
 8003d1a:	494a      	ldr	r1, [pc, #296]	; (8003e44 <HLCD_enuWriteData+0x4f8>)
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	4413      	add	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	440b      	add	r3, r1
 8003d28:	3308      	adds	r3, #8
 8003d2a:	785a      	ldrb	r2, [r3, #1]
 8003d2c:	789b      	ldrb	r3, [r3, #2]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	431a      	orrs	r2, r3
 8003d32:	2300      	movs	r3, #0
 8003d34:	f362 030f 	bfi	r3, r2, #0, #16
 8003d38:	4601      	mov	r1, r0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 ff38 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003d40:	79ba      	ldrb	r2, [r7, #6]
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	b2d8      	uxtb	r0, r3
 8003d4e:	493d      	ldr	r1, [pc, #244]	; (8003e44 <HLCD_enuWriteData+0x4f8>)
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	78da      	ldrb	r2, [r3, #3]
 8003d60:	791b      	ldrb	r3, [r3, #4]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	431a      	orrs	r2, r3
 8003d66:	2300      	movs	r3, #0
 8003d68:	f362 030f 	bfi	r3, r2, #0, #16
 8003d6c:	4601      	mov	r1, r0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 ff1e 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003d74:	79ba      	ldrb	r2, [r7, #6]
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	099b      	lsrs	r3, r3, #6
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	b2d8      	uxtb	r0, r3
 8003d82:	4930      	ldr	r1, [pc, #192]	; (8003e44 <HLCD_enuWriteData+0x4f8>)
 8003d84:	4613      	mov	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4413      	add	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	440b      	add	r3, r1
 8003d90:	3308      	adds	r3, #8
 8003d92:	795a      	ldrb	r2, [r3, #5]
 8003d94:	799b      	ldrb	r3, [r3, #6]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f362 030f 	bfi	r3, r2, #0, #16
 8003da0:	4601      	mov	r1, r0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 ff04 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003da8:	79ba      	ldrb	r2, [r7, #6]
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	09db      	lsrs	r3, r3, #7
 8003dae:	b2d8      	uxtb	r0, r3
 8003db0:	4924      	ldr	r1, [pc, #144]	; (8003e44 <HLCD_enuWriteData+0x4f8>)
 8003db2:	4613      	mov	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	79da      	ldrb	r2, [r3, #7]
 8003dc2:	7a1b      	ldrb	r3, [r3, #8]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f362 030f 	bfi	r3, r2, #0, #16
 8003dce:	4601      	mov	r1, r0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 feed 	bl	8004bb0 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8EnablePin, HIGH);
 8003dd6:	79ba      	ldrb	r2, [r7, #6]
 8003dd8:	491a      	ldr	r1, [pc, #104]	; (8003e44 <HLCD_enuWriteData+0x4f8>)
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	440b      	add	r3, r1
 8003de6:	3310      	adds	r3, #16
 8003de8:	795a      	ldrb	r2, [r3, #5]
 8003dea:	799b      	ldrb	r3, [r3, #6]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	431a      	orrs	r2, r3
 8003df0:	2300      	movs	r3, #0
 8003df2:	f362 030f 	bfi	r3, r2, #0, #16
 8003df6:	2101      	movs	r1, #1
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fed9 	bl	8004bb0 <MGPIO_voidSetPinValue>
			Mtimer4_voidDelay_us(2);
 8003dfe:	2002      	movs	r0, #2
 8003e00:	f001 f852 	bl	8004ea8 <Mtimer4_voidDelay_us>
			//MSTK_voidSetBusyWait(20); // 20 uSec
			MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8EnablePin, LOW);
 8003e04:	79ba      	ldrb	r2, [r7, #6]
 8003e06:	490f      	ldr	r1, [pc, #60]	; (8003e44 <HLCD_enuWriteData+0x4f8>)
 8003e08:	4613      	mov	r3, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	4413      	add	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	440b      	add	r3, r1
 8003e14:	3310      	adds	r3, #16
 8003e16:	795a      	ldrb	r2, [r3, #5]
 8003e18:	799b      	ldrb	r3, [r3, #6]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f362 030f 	bfi	r3, r2, #0, #16
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fec2 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003e2c:	e004      	b.n	8003e38 <HLCD_enuWriteData+0x4ec>
		}
		else
		{
			ReturnFunState = LSTY_READ_ERROR;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	73fb      	strb	r3, [r7, #15]
 8003e32:	e001      	b.n	8003e38 <HLCD_enuWriteData+0x4ec>
		}
	}
	else
	{
		ReturnFunState = LSTY_OUT_OF_RANGE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
	}

	return ReturnFunState;
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000008 	.word	0x20000008

08003e48 <HLCD_enuWriteCmd>:

tenumFncErrorState HLCD_enuWriteCmd(u8 HLCD_u8CmdCpy, u8 u8LCDNumber)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	460a      	mov	r2, r1
 8003e52:	71fb      	strb	r3, [r7, #7]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71bb      	strb	r3, [r7, #6]
	tenumFncErrorState ReturnFunState = LSTY_EXECUTED_SUCCESSFULLY;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	73fb      	strb	r3, [r7, #15]

	if((u8LCDNumber >= 0)  && (u8LCDNumber < HLCD_u8NumberOfLCD))
 8003e5c:	79bb      	ldrb	r3, [r7, #6]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 8266 	bne.w	8004330 <HLCD_enuWriteCmd+0x4e8>
	{
		MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8RegSelectPin, LOW);
 8003e64:	79ba      	ldrb	r2, [r7, #6]
 8003e66:	49b0      	ldr	r1, [pc, #704]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 8003e68:	4613      	mov	r3, r2
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4413      	add	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	440b      	add	r3, r1
 8003e74:	3310      	adds	r3, #16
 8003e76:	785a      	ldrb	r2, [r3, #1]
 8003e78:	789b      	ldrb	r3, [r3, #2]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f362 030f 	bfi	r3, r2, #0, #16
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fe92 	bl	8004bb0 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8ReadWritePin, LOW);
 8003e8c:	79ba      	ldrb	r2, [r7, #6]
 8003e8e:	49a6      	ldr	r1, [pc, #664]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 8003e90:	4613      	mov	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3310      	adds	r3, #16
 8003e9e:	78da      	ldrb	r2, [r3, #3]
 8003ea0:	791b      	ldrb	r3, [r3, #4]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f362 030f 	bfi	r3, r2, #0, #16
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fe7e 	bl	8004bb0 <MGPIO_voidSetPinValue>

		if(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8MODE == HLCD_u8MODE_4BIT)
 8003eb4:	79ba      	ldrb	r2, [r7, #6]
 8003eb6:	499c      	ldr	r1, [pc, #624]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 8003eb8:	4613      	mov	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f040 8130 	bne.w	800412c <HLCD_enuWriteCmd+0x2e4>
		{
			u8 u8data = HLCD_u8CmdCpy & 0xf0;
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	f023 030f 	bic.w	r3, r3, #15
 8003ed2:	73bb      	strb	r3, [r7, #14]
			HLCD_SendDataPort_4BIT(u8data,u8LCDNumber); // sending high nibble first
 8003ed4:	79ba      	ldrb	r2, [r7, #6]
 8003ed6:	7bbb      	ldrb	r3, [r7, #14]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	b2d8      	uxtb	r0, r3
 8003ee2:	4991      	ldr	r1, [pc, #580]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	440b      	add	r3, r1
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	785a      	ldrb	r2, [r3, #1]
 8003ef4:	789b      	ldrb	r3, [r3, #2]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	2300      	movs	r3, #0
 8003efc:	f362 030f 	bfi	r3, r2, #0, #16
 8003f00:	4601      	mov	r1, r0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fe54 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003f08:	79ba      	ldrb	r2, [r7, #6]
 8003f0a:	7bbb      	ldrb	r3, [r7, #14]
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	b2d8      	uxtb	r0, r3
 8003f16:	4984      	ldr	r1, [pc, #528]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 8003f18:	4613      	mov	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	440b      	add	r3, r1
 8003f24:	3308      	adds	r3, #8
 8003f26:	78da      	ldrb	r2, [r3, #3]
 8003f28:	791b      	ldrb	r3, [r3, #4]
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f362 030f 	bfi	r3, r2, #0, #16
 8003f34:	4601      	mov	r1, r0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fe3a 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003f3c:	79ba      	ldrb	r2, [r7, #6]
 8003f3e:	7bbb      	ldrb	r3, [r7, #14]
 8003f40:	099b      	lsrs	r3, r3, #6
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	b2d8      	uxtb	r0, r3
 8003f4a:	4977      	ldr	r1, [pc, #476]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	4413      	add	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	440b      	add	r3, r1
 8003f58:	3308      	adds	r3, #8
 8003f5a:	795a      	ldrb	r2, [r3, #5]
 8003f5c:	799b      	ldrb	r3, [r3, #6]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	431a      	orrs	r2, r3
 8003f62:	2300      	movs	r3, #0
 8003f64:	f362 030f 	bfi	r3, r2, #0, #16
 8003f68:	4601      	mov	r1, r0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fe20 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8003f70:	79ba      	ldrb	r2, [r7, #6]
 8003f72:	7bbb      	ldrb	r3, [r7, #14]
 8003f74:	09db      	lsrs	r3, r3, #7
 8003f76:	b2d8      	uxtb	r0, r3
 8003f78:	496b      	ldr	r1, [pc, #428]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	440b      	add	r3, r1
 8003f86:	3308      	adds	r3, #8
 8003f88:	79da      	ldrb	r2, [r3, #7]
 8003f8a:	7a1b      	ldrb	r3, [r3, #8]
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	2300      	movs	r3, #0
 8003f92:	f362 030f 	bfi	r3, r2, #0, #16
 8003f96:	4601      	mov	r1, r0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fe09 	bl	8004bb0 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8EnablePin, HIGH);// E = 1
 8003f9e:	79ba      	ldrb	r2, [r7, #6]
 8003fa0:	4961      	ldr	r1, [pc, #388]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	440b      	add	r3, r1
 8003fae:	3310      	adds	r3, #16
 8003fb0:	795a      	ldrb	r2, [r3, #5]
 8003fb2:	799b      	ldrb	r3, [r3, #6]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f362 030f 	bfi	r3, r2, #0, #16
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fdf5 	bl	8004bb0 <MGPIO_voidSetPinValue>

			Mtimer4_voidDelay_us(1);
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	f000 ff6e 	bl	8004ea8 <Mtimer4_voidDelay_us>
			//MSTK_voidSetBusyWait(1); // 1 uSec
			MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8EnablePin, LOW);// E = 0
 8003fcc:	79ba      	ldrb	r2, [r7, #6]
 8003fce:	4956      	ldr	r1, [pc, #344]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	4413      	add	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	440b      	add	r3, r1
 8003fdc:	3310      	adds	r3, #16
 8003fde:	795a      	ldrb	r2, [r3, #5]
 8003fe0:	799b      	ldrb	r3, [r3, #6]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f362 030f 	bfi	r3, r2, #0, #16
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fdde 	bl	8004bb0 <MGPIO_voidSetPinValue>

			Mtimer4_voidDelay_us(2);
 8003ff4:	2002      	movs	r0, #2
 8003ff6:	f000 ff57 	bl	8004ea8 <Mtimer4_voidDelay_us>
			//MSTK_voidSetBusyWait(20); // 20 uSec
			u8data = HLCD_u8CmdCpy << 4;
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	73bb      	strb	r3, [r7, #14]
			HLCD_SendDataPort_4BIT(u8data,u8LCDNumber); // sending low nibble second
 8004000:	79ba      	ldrb	r2, [r7, #6]
 8004002:	7bbb      	ldrb	r3, [r7, #14]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	b2d8      	uxtb	r0, r3
 800400e:	4946      	ldr	r1, [pc, #280]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 8004010:	4613      	mov	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4413      	add	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	440b      	add	r3, r1
 800401c:	3308      	adds	r3, #8
 800401e:	785a      	ldrb	r2, [r3, #1]
 8004020:	789b      	ldrb	r3, [r3, #2]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	431a      	orrs	r2, r3
 8004026:	2300      	movs	r3, #0
 8004028:	f362 030f 	bfi	r3, r2, #0, #16
 800402c:	4601      	mov	r1, r0
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fdbe 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8004034:	79ba      	ldrb	r2, [r7, #6]
 8004036:	7bbb      	ldrb	r3, [r7, #14]
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	b2d8      	uxtb	r0, r3
 8004042:	4939      	ldr	r1, [pc, #228]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 8004044:	4613      	mov	r3, r2
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	4413      	add	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	440b      	add	r3, r1
 8004050:	3308      	adds	r3, #8
 8004052:	78da      	ldrb	r2, [r3, #3]
 8004054:	791b      	ldrb	r3, [r3, #4]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	431a      	orrs	r2, r3
 800405a:	2300      	movs	r3, #0
 800405c:	f362 030f 	bfi	r3, r2, #0, #16
 8004060:	4601      	mov	r1, r0
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fda4 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8004068:	79ba      	ldrb	r2, [r7, #6]
 800406a:	7bbb      	ldrb	r3, [r7, #14]
 800406c:	099b      	lsrs	r3, r3, #6
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	b2d8      	uxtb	r0, r3
 8004076:	492c      	ldr	r1, [pc, #176]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	440b      	add	r3, r1
 8004084:	3308      	adds	r3, #8
 8004086:	795a      	ldrb	r2, [r3, #5]
 8004088:	799b      	ldrb	r3, [r3, #6]
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	431a      	orrs	r2, r3
 800408e:	2300      	movs	r3, #0
 8004090:	f362 030f 	bfi	r3, r2, #0, #16
 8004094:	4601      	mov	r1, r0
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fd8a 	bl	8004bb0 <MGPIO_voidSetPinValue>
 800409c:	79ba      	ldrb	r2, [r7, #6]
 800409e:	7bbb      	ldrb	r3, [r7, #14]
 80040a0:	09db      	lsrs	r3, r3, #7
 80040a2:	b2d8      	uxtb	r0, r3
 80040a4:	4920      	ldr	r1, [pc, #128]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	440b      	add	r3, r1
 80040b2:	3308      	adds	r3, #8
 80040b4:	79da      	ldrb	r2, [r3, #7]
 80040b6:	7a1b      	ldrb	r3, [r3, #8]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	431a      	orrs	r2, r3
 80040bc:	2300      	movs	r3, #0
 80040be:	f362 030f 	bfi	r3, r2, #0, #16
 80040c2:	4601      	mov	r1, r0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fd73 	bl	8004bb0 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8EnablePin, HIGH); // E = 1 ;
 80040ca:	79ba      	ldrb	r2, [r7, #6]
 80040cc:	4916      	ldr	r1, [pc, #88]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	440b      	add	r3, r1
 80040da:	3310      	adds	r3, #16
 80040dc:	795a      	ldrb	r2, [r3, #5]
 80040de:	799b      	ldrb	r3, [r3, #6]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	431a      	orrs	r2, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	f362 030f 	bfi	r3, r2, #0, #16
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fd5f 	bl	8004bb0 <MGPIO_voidSetPinValue>

			Mtimer4_voidDelay_us(1);
 80040f2:	2001      	movs	r0, #1
 80040f4:	f000 fed8 	bl	8004ea8 <Mtimer4_voidDelay_us>
			//MSTK_voidSetBusyWait(1); // 1 uSec
			MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8EnablePin, LOW); // E = 0
 80040f8:	79ba      	ldrb	r2, [r7, #6]
 80040fa:	490b      	ldr	r1, [pc, #44]	; (8004128 <HLCD_enuWriteCmd+0x2e0>)
 80040fc:	4613      	mov	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4413      	add	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	440b      	add	r3, r1
 8004108:	3310      	adds	r3, #16
 800410a:	795a      	ldrb	r2, [r3, #5]
 800410c:	799b      	ldrb	r3, [r3, #6]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	431a      	orrs	r2, r3
 8004112:	2300      	movs	r3, #0
 8004114:	f362 030f 	bfi	r3, r2, #0, #16
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fd48 	bl	8004bb0 <MGPIO_voidSetPinValue>

			Mtimer4_voidDelay_us(2);
 8004120:	2002      	movs	r0, #2
 8004122:	f000 fec1 	bl	8004ea8 <Mtimer4_voidDelay_us>
 8004126:	e105      	b.n	8004334 <HLCD_enuWriteCmd+0x4ec>
 8004128:	20000008 	.word	0x20000008
			//MSTK_voidSetBusyWait(20); // 20 uSec
		}
		else if(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8MODE == HLCD_u8MODE_8BIT)
 800412c:	79ba      	ldrb	r2, [r7, #6]
 800412e:	4984      	ldr	r1, [pc, #528]	; (8004340 <HLCD_enuWriteCmd+0x4f8>)
 8004130:	4613      	mov	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4413      	add	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	440b      	add	r3, r1
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	f040 80f3 	bne.w	800432a <HLCD_enuWriteCmd+0x4e2>
		{
			HLCD_SendDataPort_8BIT(HLCD_u8CmdCpy,u8LCDNumber);
 8004144:	79ba      	ldrb	r2, [r7, #6]
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	b2d8      	uxtb	r0, r3
 800414e:	497c      	ldr	r1, [pc, #496]	; (8004340 <HLCD_enuWriteCmd+0x4f8>)
 8004150:	4613      	mov	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4413      	add	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	440b      	add	r3, r1
 800415c:	785a      	ldrb	r2, [r3, #1]
 800415e:	789b      	ldrb	r3, [r3, #2]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	431a      	orrs	r2, r3
 8004164:	2300      	movs	r3, #0
 8004166:	f362 030f 	bfi	r3, r2, #0, #16
 800416a:	4601      	mov	r1, r0
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fd1f 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8004172:	79ba      	ldrb	r2, [r7, #6]
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	b2d8      	uxtb	r0, r3
 8004180:	496f      	ldr	r1, [pc, #444]	; (8004340 <HLCD_enuWriteCmd+0x4f8>)
 8004182:	4613      	mov	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	440b      	add	r3, r1
 800418e:	78da      	ldrb	r2, [r3, #3]
 8004190:	791b      	ldrb	r3, [r3, #4]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	431a      	orrs	r2, r3
 8004196:	2300      	movs	r3, #0
 8004198:	f362 030f 	bfi	r3, r2, #0, #16
 800419c:	4601      	mov	r1, r0
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fd06 	bl	8004bb0 <MGPIO_voidSetPinValue>
 80041a4:	79ba      	ldrb	r2, [r7, #6]
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	089b      	lsrs	r3, r3, #2
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	b2d8      	uxtb	r0, r3
 80041b2:	4963      	ldr	r1, [pc, #396]	; (8004340 <HLCD_enuWriteCmd+0x4f8>)
 80041b4:	4613      	mov	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4413      	add	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	440b      	add	r3, r1
 80041c0:	795a      	ldrb	r2, [r3, #5]
 80041c2:	799b      	ldrb	r3, [r3, #6]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	431a      	orrs	r2, r3
 80041c8:	2300      	movs	r3, #0
 80041ca:	f362 030f 	bfi	r3, r2, #0, #16
 80041ce:	4601      	mov	r1, r0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fced 	bl	8004bb0 <MGPIO_voidSetPinValue>
 80041d6:	79ba      	ldrb	r2, [r7, #6]
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	08db      	lsrs	r3, r3, #3
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	b2d8      	uxtb	r0, r3
 80041e4:	4956      	ldr	r1, [pc, #344]	; (8004340 <HLCD_enuWriteCmd+0x4f8>)
 80041e6:	4613      	mov	r3, r2
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	4413      	add	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	440b      	add	r3, r1
 80041f2:	79da      	ldrb	r2, [r3, #7]
 80041f4:	7a1b      	ldrb	r3, [r3, #8]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	431a      	orrs	r2, r3
 80041fa:	2300      	movs	r3, #0
 80041fc:	f362 030f 	bfi	r3, r2, #0, #16
 8004200:	4601      	mov	r1, r0
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fcd4 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8004208:	79ba      	ldrb	r2, [r7, #6]
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	b2d8      	uxtb	r0, r3
 8004216:	494a      	ldr	r1, [pc, #296]	; (8004340 <HLCD_enuWriteCmd+0x4f8>)
 8004218:	4613      	mov	r3, r2
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	4413      	add	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	440b      	add	r3, r1
 8004224:	3308      	adds	r3, #8
 8004226:	785a      	ldrb	r2, [r3, #1]
 8004228:	789b      	ldrb	r3, [r3, #2]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	431a      	orrs	r2, r3
 800422e:	2300      	movs	r3, #0
 8004230:	f362 030f 	bfi	r3, r2, #0, #16
 8004234:	4601      	mov	r1, r0
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fcba 	bl	8004bb0 <MGPIO_voidSetPinValue>
 800423c:	79ba      	ldrb	r2, [r7, #6]
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	b2d8      	uxtb	r0, r3
 800424a:	493d      	ldr	r1, [pc, #244]	; (8004340 <HLCD_enuWriteCmd+0x4f8>)
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	440b      	add	r3, r1
 8004258:	3308      	adds	r3, #8
 800425a:	78da      	ldrb	r2, [r3, #3]
 800425c:	791b      	ldrb	r3, [r3, #4]
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	431a      	orrs	r2, r3
 8004262:	2300      	movs	r3, #0
 8004264:	f362 030f 	bfi	r3, r2, #0, #16
 8004268:	4601      	mov	r1, r0
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fca0 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8004270:	79ba      	ldrb	r2, [r7, #6]
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	099b      	lsrs	r3, r3, #6
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	b2d8      	uxtb	r0, r3
 800427e:	4930      	ldr	r1, [pc, #192]	; (8004340 <HLCD_enuWriteCmd+0x4f8>)
 8004280:	4613      	mov	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	440b      	add	r3, r1
 800428c:	3308      	adds	r3, #8
 800428e:	795a      	ldrb	r2, [r3, #5]
 8004290:	799b      	ldrb	r3, [r3, #6]
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	431a      	orrs	r2, r3
 8004296:	2300      	movs	r3, #0
 8004298:	f362 030f 	bfi	r3, r2, #0, #16
 800429c:	4601      	mov	r1, r0
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fc86 	bl	8004bb0 <MGPIO_voidSetPinValue>
 80042a4:	79ba      	ldrb	r2, [r7, #6]
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	09db      	lsrs	r3, r3, #7
 80042aa:	b2d8      	uxtb	r0, r3
 80042ac:	4924      	ldr	r1, [pc, #144]	; (8004340 <HLCD_enuWriteCmd+0x4f8>)
 80042ae:	4613      	mov	r3, r2
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	4413      	add	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	440b      	add	r3, r1
 80042ba:	3308      	adds	r3, #8
 80042bc:	79da      	ldrb	r2, [r3, #7]
 80042be:	7a1b      	ldrb	r3, [r3, #8]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	431a      	orrs	r2, r3
 80042c4:	2300      	movs	r3, #0
 80042c6:	f362 030f 	bfi	r3, r2, #0, #16
 80042ca:	4601      	mov	r1, r0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fc6f 	bl	8004bb0 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8EnablePin, HIGH);
 80042d2:	79ba      	ldrb	r2, [r7, #6]
 80042d4:	491a      	ldr	r1, [pc, #104]	; (8004340 <HLCD_enuWriteCmd+0x4f8>)
 80042d6:	4613      	mov	r3, r2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	440b      	add	r3, r1
 80042e2:	3310      	adds	r3, #16
 80042e4:	795a      	ldrb	r2, [r3, #5]
 80042e6:	799b      	ldrb	r3, [r3, #6]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	431a      	orrs	r2, r3
 80042ec:	2300      	movs	r3, #0
 80042ee:	f362 030f 	bfi	r3, r2, #0, #16
 80042f2:	2101      	movs	r1, #1
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fc5b 	bl	8004bb0 <MGPIO_voidSetPinValue>

			Mtimer4_voidDelay_us(2);
 80042fa:	2002      	movs	r0, #2
 80042fc:	f000 fdd4 	bl	8004ea8 <Mtimer4_voidDelay_us>
			//MSTK_voidSetBusyWait(20); // 20 uSec
			MGPIO_voidSetPinValue(HLCDArrayOfLCD[u8LCDNumber].HLCD_u8EnablePin, LOW);
 8004300:	79ba      	ldrb	r2, [r7, #6]
 8004302:	490f      	ldr	r1, [pc, #60]	; (8004340 <HLCD_enuWriteCmd+0x4f8>)
 8004304:	4613      	mov	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	440b      	add	r3, r1
 8004310:	3310      	adds	r3, #16
 8004312:	795a      	ldrb	r2, [r3, #5]
 8004314:	799b      	ldrb	r3, [r3, #6]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	431a      	orrs	r2, r3
 800431a:	2300      	movs	r3, #0
 800431c:	f362 030f 	bfi	r3, r2, #0, #16
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fc44 	bl	8004bb0 <MGPIO_voidSetPinValue>
 8004328:	e004      	b.n	8004334 <HLCD_enuWriteCmd+0x4ec>
		}
		else
		{
			ReturnFunState = LSTY_READ_ERROR;
 800432a:	2303      	movs	r3, #3
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	e001      	b.n	8004334 <HLCD_enuWriteCmd+0x4ec>
		}
	}
	else
	{
		ReturnFunState = LSTY_OUT_OF_RANGE;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
	}

	return ReturnFunState;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000008 	.word	0x20000008

08004344 <HLCD_enuGoToXY>:

tenumFncErrorState HLCD_enuGoToXY(u8 HLCD_u8RowNum,u8 HLCD_u8ColumnNum , u8 u8LCDNumber)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	71fb      	strb	r3, [r7, #7]
 800434e:	460b      	mov	r3, r1
 8004350:	71bb      	strb	r3, [r7, #6]
 8004352:	4613      	mov	r3, r2
 8004354:	717b      	strb	r3, [r7, #5]
	tenumFncErrorState ReturnFunState = LSTY_EXECUTED_SUCCESSFULLY;
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
	if(((HLCD_u8FirstCol <= HLCD_u8ColumnNum) && (HLCD_u8LastCol >= HLCD_u8ColumnNum)) &&
 800435a:	79bb      	ldrb	r3, [r7, #6]
 800435c:	2b0f      	cmp	r3, #15
 800435e:	d81e      	bhi.n	800439e <HLCD_enuGoToXY+0x5a>
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d81b      	bhi.n	800439e <HLCD_enuGoToXY+0x5a>
			((HLCD_u8FirstRow <= HLCD_u8RowNum) && (HLCD_u8SecRow >= HLCD_u8RowNum))  &&
 8004366:	797b      	ldrb	r3, [r7, #5]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d118      	bne.n	800439e <HLCD_enuGoToXY+0x5a>
			((u8LCDNumber >= 0)  && (u8LCDNumber < HLCD_u8NumberOfLCD)))
	{
		switch (HLCD_u8RowNum)
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HLCD_enuGoToXY+0x34>
 8004372:	2b01      	cmp	r3, #1
 8004374:	d009      	beq.n	800438a <HLCD_enuGoToXY+0x46>
			break;
		case HLCD_u8SecRow:
			HLCD_enuWriteCmd(HLCD_u8SecondRowStart+HLCD_u8ColumnNum ,u8LCDNumber);
			break;
		}
	}
 8004376:	e014      	b.n	80043a2 <HLCD_enuGoToXY+0x5e>
			HLCD_enuWriteCmd(HLCD_u8FirstRowStart+HLCD_u8ColumnNum ,u8LCDNumber);
 8004378:	79bb      	ldrb	r3, [r7, #6]
 800437a:	3b80      	subs	r3, #128	; 0x80
 800437c:	b2db      	uxtb	r3, r3
 800437e:	797a      	ldrb	r2, [r7, #5]
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fd60 	bl	8003e48 <HLCD_enuWriteCmd>
			break;
 8004388:	e008      	b.n	800439c <HLCD_enuGoToXY+0x58>
			HLCD_enuWriteCmd(HLCD_u8SecondRowStart+HLCD_u8ColumnNum ,u8LCDNumber);
 800438a:	79bb      	ldrb	r3, [r7, #6]
 800438c:	3b40      	subs	r3, #64	; 0x40
 800438e:	b2db      	uxtb	r3, r3
 8004390:	797a      	ldrb	r2, [r7, #5]
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fd57 	bl	8003e48 <HLCD_enuWriteCmd>
			break;
 800439a:	bf00      	nop
	}
 800439c:	e001      	b.n	80043a2 <HLCD_enuGoToXY+0x5e>
	else
	{
		ReturnFunState = LSTY_OUT_OF_RANGE;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
	}
	return ReturnFunState;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HLCD_voidIntegerToString>:

tenumFncErrorState HLCD_voidIntegerToString(u32 u32Value, u8 u8LCDNumber)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
	tenumFncErrorState ReturnFunState = LSTY_EXECUTED_SUCCESSFULLY;
 80043b8:	2300      	movs	r3, #0
 80043ba:	73fb      	strb	r3, [r7, #15]

	if((u8LCDNumber >= 0)  && (u8LCDNumber < HLCD_u8NumberOfLCD))
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d13a      	bne.n	8004438 <HLCD_voidIntegerToString+0x8c>
	{
		u32 reverse = 1; /*to hold zeros*/
 80043c2:	2301      	movs	r3, #1
 80043c4:	60bb      	str	r3, [r7, #8]

		while(u32Value >= 1) /*reverse : 1000 -> 10001*/
 80043c6:	e017      	b.n	80043f8 <HLCD_voidIntegerToString+0x4c>
		{
			reverse = reverse*10+u32Value%10;
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	4618      	mov	r0, r3
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <HLCD_voidIntegerToString+0x9c>)
 80043d8:	fba3 2301 	umull	r2, r3, r3, r1
 80043dc:	08da      	lsrs	r2, r3, #3
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	1aca      	subs	r2, r1, r3
 80043e8:	1883      	adds	r3, r0, r2
 80043ea:	60bb      	str	r3, [r7, #8]
			u32Value = u32Value / 10;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a16      	ldr	r2, [pc, #88]	; (8004448 <HLCD_voidIntegerToString+0x9c>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	08db      	lsrs	r3, r3, #3
 80043f6:	607b      	str	r3, [r7, #4]
		while(u32Value >= 1) /*reverse : 1000 -> 10001*/
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e4      	bne.n	80043c8 <HLCD_voidIntegerToString+0x1c>
		}

		while(reverse != 1)
 80043fe:	e017      	b.n	8004430 <HLCD_voidIntegerToString+0x84>
		{
			HLCD_enuWriteData( reverse%10 +'0',u8LCDNumber);
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	4b11      	ldr	r3, [pc, #68]	; (8004448 <HLCD_voidIntegerToString+0x9c>)
 8004404:	fba3 2301 	umull	r2, r3, r3, r1
 8004408:	08da      	lsrs	r2, r3, #3
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	1aca      	subs	r2, r1, r3
 8004414:	b2d3      	uxtb	r3, r2
 8004416:	3330      	adds	r3, #48	; 0x30
 8004418:	b2db      	uxtb	r3, r3
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fa94 	bl	800394c <HLCD_enuWriteData>
			reverse = reverse / 10;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4a08      	ldr	r2, [pc, #32]	; (8004448 <HLCD_voidIntegerToString+0x9c>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	08db      	lsrs	r3, r3, #3
 800442e:	60bb      	str	r3, [r7, #8]
		while(reverse != 1)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d1e4      	bne.n	8004400 <HLCD_voidIntegerToString+0x54>
 8004436:	e001      	b.n	800443c <HLCD_voidIntegerToString+0x90>
		}
	}
	else
	{
		ReturnFunState = LSTY_OUT_OF_RANGE;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
	}
	return ReturnFunState;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	cccccccd 	.word	0xcccccccd

0800444c <Hswitch_voidInit>:
#include <Libraries/LIB_STDTypes.h>
#include <MCAL/GPIO_interface.h>


void Hswitch_voidInit(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
	u8 u8Iterator;

	for(u8Iterator = 0 ; u8Iterator < NO_OF_SWITCHES ; u8Iterator++)
 8004452:	2300      	movs	r3, #0
 8004454:	71fb      	strb	r3, [r7, #7]
 8004456:	e01b      	b.n	8004490 <Hswitch_voidInit+0x44>
	{
		MGPIO_voidSetPinDirection(ArrOfSwitches[u8Iterator].GPIO_tSwitch, ArrOfSwitches[u8Iterator].u8SwitchMode);
 8004458:	79fa      	ldrb	r2, [r7, #7]
 800445a:	79f9      	ldrb	r1, [r7, #7]
 800445c:	4810      	ldr	r0, [pc, #64]	; (80044a0 <Hswitch_voidInit+0x54>)
 800445e:	460b      	mov	r3, r1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	440b      	add	r3, r1
 8004464:	4403      	add	r3, r0
 8004466:	3302      	adds	r3, #2
 8004468:	7818      	ldrb	r0, [r3, #0]
 800446a:	490d      	ldr	r1, [pc, #52]	; (80044a0 <Hswitch_voidInit+0x54>)
 800446c:	4613      	mov	r3, r2
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	440b      	add	r3, r1
 8004474:	781a      	ldrb	r2, [r3, #0]
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	431a      	orrs	r2, r3
 800447c:	2300      	movs	r3, #0
 800447e:	f362 030f 	bfi	r3, r2, #0, #16
 8004482:	4601      	mov	r1, r0
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fa9d 	bl	80049c4 <MGPIO_voidSetPinDirection>
	for(u8Iterator = 0 ; u8Iterator < NO_OF_SWITCHES ; u8Iterator++)
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	3301      	adds	r3, #1
 800448e:	71fb      	strb	r3, [r7, #7]
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0e0      	beq.n	8004458 <Hswitch_voidInit+0xc>
	}
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	080055d0 	.word	0x080055d0

080044a4 <Hswitch_voidGetSwitchState>:

ToggleState_t Hswitch_voidGetSwitchState(u8 u8SwithID)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
	ToggleState_t CenterSwitchValue = MGPIO_u8GetPinValue(ArrOfSwitches[u8SwithID].GPIO_tSwitch);
 80044ae:	79fa      	ldrb	r2, [r7, #7]
 80044b0:	490a      	ldr	r1, [pc, #40]	; (80044dc <Hswitch_voidGetSwitchState+0x38>)
 80044b2:	4613      	mov	r3, r2
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	4413      	add	r3, r2
 80044b8:	440b      	add	r3, r1
 80044ba:	781a      	ldrb	r2, [r3, #0]
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	431a      	orrs	r2, r3
 80044c2:	2300      	movs	r3, #0
 80044c4:	f362 030f 	bfi	r3, r2, #0, #16
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fbd1 	bl	8004c70 <MGPIO_u8GetPinValue>
 80044ce:	4603      	mov	r3, r0
 80044d0:	73fb      	strb	r3, [r7, #15]

	return CenterSwitchValue;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	080055d0 	.word	0x080055d0

080044e0 <Hled_voidInit>:
/*HAL*/
#include "HAL/Led_config.h"
#include "HAL/Led_interface.h"

void Hled_voidInit(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
	u8 u8Iterator ;
	for(u8Iterator = 0 ; u8Iterator < NUM_OF_LEDS ; u8Iterator++)
 80044e6:	2300      	movs	r3, #0
 80044e8:	71fb      	strb	r3, [r7, #7]
 80044ea:	e01b      	b.n	8004524 <Hled_voidInit+0x44>
	{
		MGPIO_voidSetPinDirection(HLEDArrayOfLeds[u8Iterator].HLED_GPIO_tPin, HLEDArrayOfLeds[u8Iterator].HLED_u8ActiveLevel);
 80044ec:	79fa      	ldrb	r2, [r7, #7]
 80044ee:	79f9      	ldrb	r1, [r7, #7]
 80044f0:	4810      	ldr	r0, [pc, #64]	; (8004534 <Hled_voidInit+0x54>)
 80044f2:	460b      	mov	r3, r1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	440b      	add	r3, r1
 80044f8:	4403      	add	r3, r0
 80044fa:	3302      	adds	r3, #2
 80044fc:	7818      	ldrb	r0, [r3, #0]
 80044fe:	490d      	ldr	r1, [pc, #52]	; (8004534 <Hled_voidInit+0x54>)
 8004500:	4613      	mov	r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4413      	add	r3, r2
 8004506:	440b      	add	r3, r1
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	785b      	ldrb	r3, [r3, #1]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	431a      	orrs	r2, r3
 8004510:	2300      	movs	r3, #0
 8004512:	f362 030f 	bfi	r3, r2, #0, #16
 8004516:	4601      	mov	r1, r0
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fa53 	bl	80049c4 <MGPIO_voidSetPinDirection>
	for(u8Iterator = 0 ; u8Iterator < NUM_OF_LEDS ; u8Iterator++)
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	3301      	adds	r3, #1
 8004522:	71fb      	strb	r3, [r7, #7]
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d9e0      	bls.n	80044ec <Hled_voidInit+0xc>
	}
}
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000020 	.word	0x20000020

08004538 <Hled_voidLedOff>:
{
	MGPIO_voidSetPinValue(HLEDArrayOfLeds[Hled_u8Number].HLED_GPIO_tPin, HLEDArrayOfLeds[Hled_u8Number].HLED_u8ActiveLevel ^ LOW);
}

void Hled_voidLedOff(u8 Hled_u8Number)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidSetPinValue(HLEDArrayOfLeds[Hled_u8Number].HLED_GPIO_tPin, HLEDArrayOfLeds[Hled_u8Number].HLED_u8ActiveLevel ^ HIGH);
 8004542:	79fa      	ldrb	r2, [r7, #7]
 8004544:	79f9      	ldrb	r1, [r7, #7]
 8004546:	480f      	ldr	r0, [pc, #60]	; (8004584 <Hled_voidLedOff+0x4c>)
 8004548:	460b      	mov	r3, r1
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	440b      	add	r3, r1
 800454e:	4403      	add	r3, r0
 8004550:	3302      	adds	r3, #2
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	f083 0301 	eor.w	r3, r3, #1
 8004558:	b2d8      	uxtb	r0, r3
 800455a:	490a      	ldr	r1, [pc, #40]	; (8004584 <Hled_voidLedOff+0x4c>)
 800455c:	4613      	mov	r3, r2
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4413      	add	r3, r2
 8004562:	440b      	add	r3, r1
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	431a      	orrs	r2, r3
 800456c:	2300      	movs	r3, #0
 800456e:	f362 030f 	bfi	r3, r2, #0, #16
 8004572:	4601      	mov	r1, r0
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fb1b 	bl	8004bb0 <MGPIO_voidSetPinValue>
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20000020 	.word	0x20000020

08004588 <Hled_voidToggleLed>:

void Hled_voidToggleLed(u8 Hled_u8Number)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	71fb      	strb	r3, [r7, #7]
	static ToggleState_t u8Tog = On;
	if(u8Tog == On)
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <Hled_voidToggleLed+0x94>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d11f      	bne.n	80045da <Hled_voidToggleLed+0x52>
	{
		MGPIO_voidSetPinValue(HLEDArrayOfLeds[Hled_u8Number].HLED_GPIO_tPin, HLEDArrayOfLeds[Hled_u8Number].HLED_u8ActiveLevel ^ HIGH);
 800459a:	79fa      	ldrb	r2, [r7, #7]
 800459c:	79f9      	ldrb	r1, [r7, #7]
 800459e:	4820      	ldr	r0, [pc, #128]	; (8004620 <Hled_voidToggleLed+0x98>)
 80045a0:	460b      	mov	r3, r1
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	440b      	add	r3, r1
 80045a6:	4403      	add	r3, r0
 80045a8:	3302      	adds	r3, #2
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f083 0301 	eor.w	r3, r3, #1
 80045b0:	b2d8      	uxtb	r0, r3
 80045b2:	491b      	ldr	r1, [pc, #108]	; (8004620 <Hled_voidToggleLed+0x98>)
 80045b4:	4613      	mov	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	440b      	add	r3, r1
 80045bc:	781a      	ldrb	r2, [r3, #0]
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	431a      	orrs	r2, r3
 80045c4:	2300      	movs	r3, #0
 80045c6:	f362 030f 	bfi	r3, r2, #0, #16
 80045ca:	4601      	mov	r1, r0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 faef 	bl	8004bb0 <MGPIO_voidSetPinValue>
		u8Tog = Off;
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <Hled_voidToggleLed+0x94>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
	else
	{
		MGPIO_voidSetPinValue(HLEDArrayOfLeds[Hled_u8Number].HLED_GPIO_tPin, HLEDArrayOfLeds[Hled_u8Number].HLED_u8ActiveLevel ^ LOW);
		u8Tog = On;
	}
}
 80045d8:	e01b      	b.n	8004612 <Hled_voidToggleLed+0x8a>
		MGPIO_voidSetPinValue(HLEDArrayOfLeds[Hled_u8Number].HLED_GPIO_tPin, HLEDArrayOfLeds[Hled_u8Number].HLED_u8ActiveLevel ^ LOW);
 80045da:	79fa      	ldrb	r2, [r7, #7]
 80045dc:	79f9      	ldrb	r1, [r7, #7]
 80045de:	4810      	ldr	r0, [pc, #64]	; (8004620 <Hled_voidToggleLed+0x98>)
 80045e0:	460b      	mov	r3, r1
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	440b      	add	r3, r1
 80045e6:	4403      	add	r3, r0
 80045e8:	3302      	adds	r3, #2
 80045ea:	7818      	ldrb	r0, [r3, #0]
 80045ec:	490c      	ldr	r1, [pc, #48]	; (8004620 <Hled_voidToggleLed+0x98>)
 80045ee:	4613      	mov	r3, r2
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	4413      	add	r3, r2
 80045f4:	440b      	add	r3, r1
 80045f6:	781a      	ldrb	r2, [r3, #0]
 80045f8:	785b      	ldrb	r3, [r3, #1]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	431a      	orrs	r2, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	f362 030f 	bfi	r3, r2, #0, #16
 8004604:	4601      	mov	r1, r0
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fad2 	bl	8004bb0 <MGPIO_voidSetPinValue>
		u8Tog = On;
 800460c:	4b03      	ldr	r3, [pc, #12]	; (800461c <Hled_voidToggleLed+0x94>)
 800460e:	2201      	movs	r2, #1
 8004610:	701a      	strb	r2, [r3, #0]
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	2000002c 	.word	0x2000002c
 8004620:	20000020 	.word	0x20000020

08004624 <MADC_voidInit>:
#include "MCAL/ADC_config.h"
#include "MCAL/ADC_interface.h"
#include "MCAL/ADC_private.h"

void MADC_voidInit(void)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
    // If this bit holds a value of zero and a 1 is written to it then it wakes up the ADC from Power Down state
	ADC1_ptr->ADC_CR2 &= ~(1 << 0);//Clr
 800462a:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <MADC_voidInit+0x100>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	4a3d      	ldr	r2, [pc, #244]	; (8004724 <MADC_voidInit+0x100>)
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	6093      	str	r3, [r2, #8]
    ADC1_ptr->ADC_CR2 |= (1 << 0);//set
 8004636:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <MADC_voidInit+0x100>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4a3a      	ldr	r2, [pc, #232]	; (8004724 <MADC_voidInit+0x100>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	6093      	str	r3, [r2, #8]

    //ADC_mode
	#if ADC_mode == Single_Conversion_mode
    	ADC1_ptr->ADC_CR2 &= ~(1 << 1); // single-conversion mode
	#elif ADC_mode == Continous_Conversion_mode
    	ADC1_ptr->ADC_CR2 |= (1 << 1); // continous-conversion mode
 8004642:	4b38      	ldr	r3, [pc, #224]	; (8004724 <MADC_voidInit+0x100>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	4a37      	ldr	r2, [pc, #220]	; (8004724 <MADC_voidInit+0x100>)
 8004648:	f043 0302 	orr.w	r3, r3, #2
 800464c:	6093      	str	r3, [r2, #8]
	#endif

    //number of channels
    ADC1_ptr->ADC_SQR1 |= ( (number_of_channels-1) << 20);
 800464e:	4b35      	ldr	r3, [pc, #212]	; (8004724 <MADC_voidInit+0x100>)
 8004650:	4a34      	ldr	r2, [pc, #208]	; (8004724 <MADC_voidInit+0x100>)
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	62d3      	str	r3, [r2, #44]	; 0x2c

    // initialize ADC Calibration register
    ADC1_ptr->ADC_CR2 |= (1 << 3);
 8004656:	4b33      	ldr	r3, [pc, #204]	; (8004724 <MADC_voidInit+0x100>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	4a32      	ldr	r2, [pc, #200]	; (8004724 <MADC_voidInit+0x100>)
 800465c:	f043 0308 	orr.w	r3, r3, #8
 8004660:	6093      	str	r3, [r2, #8]
    // start ADC calibration 
    ADC1_ptr->ADC_CR2 |= (1 << 2);
 8004662:	4b30      	ldr	r3, [pc, #192]	; (8004724 <MADC_voidInit+0x100>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4a2f      	ldr	r2, [pc, #188]	; (8004724 <MADC_voidInit+0x100>)
 8004668:	f043 0304 	orr.w	r3, r3, #4
 800466c:	6093      	str	r3, [r2, #8]



    //Data_Alignment
	#if DATA_ALIGNMENT == Right_Alignment
    	ADC1_ptr->ADC_CR2 &= ~(1 << 11); // right-alignment
 800466e:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <MADC_voidInit+0x100>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	4a2c      	ldr	r2, [pc, #176]	; (8004724 <MADC_voidInit+0x100>)
 8004674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004678:	6093      	str	r3, [r2, #8]
	#elif DATA_ALIGNMENT == Left_Alignment
    	ADC1_ptr->ADC_CR2 |= (1 << 11); // left-alignment
	#endif


    u8 Channels[16] = {channel1, channel2, channel3, channel4,
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	60da      	str	r2, [r3, #12]
					   channel9,channel10, channel11, channel12,
					   channel13, channel14, channel15, channel16};


    //set channels (channel 16 ,internal temperature sensor)
    for(u8 i = 0 ; i < 16 ; i++ )
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]
 800468a:	e043      	b.n	8004714 <MADC_voidInit+0xf0>
    {
    	if(i < 6)
 800468c:	7dfb      	ldrb	r3, [r7, #23]
 800468e:	2b05      	cmp	r3, #5
 8004690:	d812      	bhi.n	80046b8 <MADC_voidInit+0x94>
    		ADC1_ptr->ADC_SQR3 |= (Channels[i] << i%4);
 8004692:	4b24      	ldr	r3, [pc, #144]	; (8004724 <MADC_voidInit+0x100>)
 8004694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004696:	7dfa      	ldrb	r2, [r7, #23]
 8004698:	f107 0118 	add.w	r1, r7, #24
 800469c:	440a      	add	r2, r1
 800469e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80046a2:	4611      	mov	r1, r2
 80046a4:	7dfa      	ldrb	r2, [r7, #23]
 80046a6:	f002 0203 	and.w	r2, r2, #3
 80046aa:	fa01 f202 	lsl.w	r2, r1, r2
 80046ae:	4611      	mov	r1, r2
 80046b0:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <MADC_voidInit+0x100>)
 80046b2:	430b      	orrs	r3, r1
 80046b4:	6353      	str	r3, [r2, #52]	; 0x34
 80046b6:	e02a      	b.n	800470e <MADC_voidInit+0xea>
    	else if(i >= 6 && i < 12 )
 80046b8:	7dfb      	ldrb	r3, [r7, #23]
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d915      	bls.n	80046ea <MADC_voidInit+0xc6>
 80046be:	7dfb      	ldrb	r3, [r7, #23]
 80046c0:	2b0b      	cmp	r3, #11
 80046c2:	d812      	bhi.n	80046ea <MADC_voidInit+0xc6>
    		ADC1_ptr->ADC_SQR2 |= (Channels[i] << i%4);
 80046c4:	4b17      	ldr	r3, [pc, #92]	; (8004724 <MADC_voidInit+0x100>)
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	7dfa      	ldrb	r2, [r7, #23]
 80046ca:	f107 0118 	add.w	r1, r7, #24
 80046ce:	440a      	add	r2, r1
 80046d0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80046d4:	4611      	mov	r1, r2
 80046d6:	7dfa      	ldrb	r2, [r7, #23]
 80046d8:	f002 0203 	and.w	r2, r2, #3
 80046dc:	fa01 f202 	lsl.w	r2, r1, r2
 80046e0:	4611      	mov	r1, r2
 80046e2:	4a10      	ldr	r2, [pc, #64]	; (8004724 <MADC_voidInit+0x100>)
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6313      	str	r3, [r2, #48]	; 0x30
 80046e8:	e011      	b.n	800470e <MADC_voidInit+0xea>
    	else
    		ADC1_ptr->ADC_SQR1 |= (Channels[i] << i%4);
 80046ea:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <MADC_voidInit+0x100>)
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	7dfa      	ldrb	r2, [r7, #23]
 80046f0:	f107 0118 	add.w	r1, r7, #24
 80046f4:	440a      	add	r2, r1
 80046f6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80046fa:	4611      	mov	r1, r2
 80046fc:	7dfa      	ldrb	r2, [r7, #23]
 80046fe:	f002 0203 	and.w	r2, r2, #3
 8004702:	fa01 f202 	lsl.w	r2, r1, r2
 8004706:	4611      	mov	r1, r2
 8004708:	4a06      	ldr	r2, [pc, #24]	; (8004724 <MADC_voidInit+0x100>)
 800470a:	430b      	orrs	r3, r1
 800470c:	62d3      	str	r3, [r2, #44]	; 0x2c
    for(u8 i = 0 ; i < 16 ; i++ )
 800470e:	7dfb      	ldrb	r3, [r7, #23]
 8004710:	3301      	adds	r3, #1
 8004712:	75fb      	strb	r3, [r7, #23]
 8004714:	7dfb      	ldrb	r3, [r7, #23]
 8004716:	2b0f      	cmp	r3, #15
 8004718:	d9b8      	bls.n	800468c <MADC_voidInit+0x68>
    }
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	40012400 	.word	0x40012400

08004728 <MADC_voidStartConversion>:

void MADC_voidStartConversion(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
    // Conversion starts when this bit holds a value of 1 and a 1 is written to it
    ADC1_ptr->ADC_CR2 |= (1 << 0);
 800472c:	4b07      	ldr	r3, [pc, #28]	; (800474c <MADC_voidStartConversion+0x24>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4a06      	ldr	r2, [pc, #24]	; (800474c <MADC_voidStartConversion+0x24>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6093      	str	r3, [r2, #8]

    // start ADC conversion of regular group 
    ADC1_ptr->ADC_CR2 |= (1 << 22);
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <MADC_voidStartConversion+0x24>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	4a03      	ldr	r2, [pc, #12]	; (800474c <MADC_voidStartConversion+0x24>)
 800473e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004742:	6093      	str	r3, [r2, #8]
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr
 800474c:	40012400 	.word	0x40012400

08004750 <MADC_u16ReadConvertedData>:

u16 MADC_u16ReadConvertedData(void)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
    while(GET_BIT(ADC1_ptr->ADC_SR,1) == 0);
 8004756:	bf00      	nop
 8004758:	4b07      	ldr	r3, [pc, #28]	; (8004778 <MADC_u16ReadConvertedData+0x28>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f8      	beq.n	8004758 <MADC_u16ReadConvertedData+0x8>

    //right alignment
    u16 u16Value = (u16) ADC1_ptr->ADC_DR ;
 8004766:	4b04      	ldr	r3, [pc, #16]	; (8004778 <MADC_u16ReadConvertedData+0x28>)
 8004768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476a:	607b      	str	r3, [r7, #4]

    return u16Value;
 800476c:	687b      	ldr	r3, [r7, #4]
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr
 8004778:	40012400 	.word	0x40012400

0800477c <AFIO_voidSetEXTIConfiguration>:
#include "MCAL/AFIO_private.h"
#include "MCAL/GPIO_interface.h"


void AFIO_voidSetEXTIConfiguration(u8 Copy_u8EXTI_Line ,u8 Copy_u8PortMap)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	460a      	mov	r2, r1
 8004786:	71fb      	strb	r3, [r7, #7]
 8004788:	4613      	mov	r3, r2
 800478a:	71bb      	strb	r3, [r7, #6]
	
	u8 LOC_u8RegIndex = Copy_u8EXTI_Line / 4;
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	089b      	lsrs	r3, r3, #2
 8004790:	73fb      	strb	r3, [r7, #15]

	Copy_u8EXTI_Line = Copy_u8EXTI_Line % 4;
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	71fb      	strb	r3, [r7, #7]
	/* Clear the four bits first */
	AFIO_Ptr -> EXTICRx[LOC_u8RegIndex] &= ~(( 0b1111) << (Copy_u8EXTI_Line * 4));
 800479a:	4a14      	ldr	r2, [pc, #80]	; (80047ec <AFIO_voidSetEXTIConfiguration+0x70>)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	3302      	adds	r3, #2
 80047a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	210f      	movs	r1, #15
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	4618      	mov	r0, r3
 80047b2:	490e      	ldr	r1, [pc, #56]	; (80047ec <AFIO_voidSetEXTIConfiguration+0x70>)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	4002      	ands	r2, r0
 80047b8:	3302      	adds	r3, #2
 80047ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Write into the four bits */
	AFIO_Ptr -> EXTICRx[LOC_u8RegIndex] |= (Copy_u8PortMap) << (Copy_u8EXTI_Line * 4);
 80047be:	4a0b      	ldr	r2, [pc, #44]	; (80047ec <AFIO_voidSetEXTIConfiguration+0x70>)
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	3302      	adds	r3, #2
 80047c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80047c8:	79b9      	ldrb	r1, [r7, #6]
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	4618      	mov	r0, r3
 80047d4:	4905      	ldr	r1, [pc, #20]	; (80047ec <AFIO_voidSetEXTIConfiguration+0x70>)
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	4302      	orrs	r2, r0
 80047da:	3302      	adds	r3, #2
 80047dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40010000 	.word	0x40010000

080047f0 <MEXTI_voidInit>:

static void (* EXTI_CallBack[16]) (void) ;

/* EXTI Preprossing Signal Latch Initialization, cannot be configured during run time */
void MEXTI_voidInit(u8 Copy_u8EXILine, u8 Copy_u8EXIMode)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	460a      	mov	r2, r1
 80047fa:	71fb      	strb	r3, [r7, #7]
 80047fc:	4613      	mov	r3, r2
 80047fe:	71bb      	strb	r3, [r7, #6]
    switch(Copy_u8EXIMode)
 8004800:	79bb      	ldrb	r3, [r7, #6]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d00e      	beq.n	8004824 <MEXTI_voidInit+0x34>
 8004806:	2b02      	cmp	r3, #2
 8004808:	d017      	beq.n	800483a <MEXTI_voidInit+0x4a>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d12a      	bne.n	8004864 <MEXTI_voidInit+0x74>
	{
		case RISING_EDGE:
			SET_BIT(EXTI_Ptr -> EXTI_RTSR , Copy_u8EXILine); break;
 800480e:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <MEXTI_voidInit+0x94>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	79fa      	ldrb	r2, [r7, #7]
 8004814:	2101      	movs	r1, #1
 8004816:	fa01 f202 	lsl.w	r2, r1, r2
 800481a:	4611      	mov	r1, r2
 800481c:	4a19      	ldr	r2, [pc, #100]	; (8004884 <MEXTI_voidInit+0x94>)
 800481e:	430b      	orrs	r3, r1
 8004820:	6093      	str	r3, [r2, #8]
 8004822:	e01f      	b.n	8004864 <MEXTI_voidInit+0x74>
		case FALLING_EDGE:
			SET_BIT(EXTI_Ptr -> EXTI_FTSR , Copy_u8EXILine); break;
 8004824:	4b17      	ldr	r3, [pc, #92]	; (8004884 <MEXTI_voidInit+0x94>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	79fa      	ldrb	r2, [r7, #7]
 800482a:	2101      	movs	r1, #1
 800482c:	fa01 f202 	lsl.w	r2, r1, r2
 8004830:	4611      	mov	r1, r2
 8004832:	4a14      	ldr	r2, [pc, #80]	; (8004884 <MEXTI_voidInit+0x94>)
 8004834:	430b      	orrs	r3, r1
 8004836:	60d3      	str	r3, [r2, #12]
 8004838:	e014      	b.n	8004864 <MEXTI_voidInit+0x74>
		case ON_CHANGE:
			SET_BIT(EXTI_Ptr -> EXTI_RTSR , Copy_u8EXILine);
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <MEXTI_voidInit+0x94>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	79fa      	ldrb	r2, [r7, #7]
 8004840:	2101      	movs	r1, #1
 8004842:	fa01 f202 	lsl.w	r2, r1, r2
 8004846:	4611      	mov	r1, r2
 8004848:	4a0e      	ldr	r2, [pc, #56]	; (8004884 <MEXTI_voidInit+0x94>)
 800484a:	430b      	orrs	r3, r1
 800484c:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI_Ptr -> EXTI_FTSR , Copy_u8EXILine); break;
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <MEXTI_voidInit+0x94>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	79fa      	ldrb	r2, [r7, #7]
 8004854:	2101      	movs	r1, #1
 8004856:	fa01 f202 	lsl.w	r2, r1, r2
 800485a:	4611      	mov	r1, r2
 800485c:	4a09      	ldr	r2, [pc, #36]	; (8004884 <MEXTI_voidInit+0x94>)
 800485e:	430b      	orrs	r3, r1
 8004860:	60d3      	str	r3, [r2, #12]
 8004862:	bf00      	nop
	}
	SET_BIT(EXTI_Ptr -> EXTI_IMR , Copy_u8EXILine); /* Enable EXTI */
 8004864:	4b07      	ldr	r3, [pc, #28]	; (8004884 <MEXTI_voidInit+0x94>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	79fa      	ldrb	r2, [r7, #7]
 800486a:	2101      	movs	r1, #1
 800486c:	fa01 f202 	lsl.w	r2, r1, r2
 8004870:	4611      	mov	r1, r2
 8004872:	4a04      	ldr	r2, [pc, #16]	; (8004884 <MEXTI_voidInit+0x94>)
 8004874:	430b      	orrs	r3, r1
 8004876:	6013      	str	r3, [r2, #0]
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40010400 	.word	0x40010400

08004888 <MEXTI_voidEnableEXTI>:

/* Enable EXTI on Linex */
void MEXTI_voidEnableEXTI(u8 Copy_u8EXTILine)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	71fb      	strb	r3, [r7, #7]
     SET_BIT(EXTI_Ptr -> EXTI_IMR , Copy_u8EXTILine);
 8004892:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <MEXTI_voidEnableEXTI+0x28>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	79fa      	ldrb	r2, [r7, #7]
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f202 	lsl.w	r2, r1, r2
 800489e:	4611      	mov	r1, r2
 80048a0:	4a03      	ldr	r2, [pc, #12]	; (80048b0 <MEXTI_voidEnableEXTI+0x28>)
 80048a2:	430b      	orrs	r3, r1
 80048a4:	6013      	str	r3, [r2, #0]
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	40010400 	.word	0x40010400

080048b4 <MEXTI_voidSetCallBack>:
     SET_BIT(EXTI_Ptr -> EXTI_SWIER , Copy_u8EXTILine);
}

/* This function is being called in main.c to hold an address of another function that have the ISR written by user */
void MEXTI_voidSetCallBack(void (*ptr) (void), u8 Copy_u8EXTILine)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
    /* Since the function is being passed to CB function is local we use the global varible "pointer to function" 
        to assign to it the address of the ISR function passed to CallBack function */
    switch(Copy_u8EXTILine)
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	2b0f      	cmp	r3, #15
 80048c4:	d852      	bhi.n	800496c <MEXTI_voidSetCallBack+0xb8>
 80048c6:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <MEXTI_voidSetCallBack+0x18>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	0800490d 	.word	0x0800490d
 80048d0:	08004915 	.word	0x08004915
 80048d4:	0800491d 	.word	0x0800491d
 80048d8:	08004925 	.word	0x08004925
 80048dc:	0800492d 	.word	0x0800492d
 80048e0:	08004935 	.word	0x08004935
 80048e4:	08004935 	.word	0x08004935
 80048e8:	08004935 	.word	0x08004935
 80048ec:	08004935 	.word	0x08004935
 80048f0:	08004935 	.word	0x08004935
 80048f4:	0800493d 	.word	0x0800493d
 80048f8:	08004945 	.word	0x08004945
 80048fc:	0800494d 	.word	0x0800494d
 8004900:	08004955 	.word	0x08004955
 8004904:	0800495d 	.word	0x0800495d
 8004908:	08004965 	.word	0x08004965
	{
		case LINE0:
			EXTI_CallBack[0] = ptr;
 800490c:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <MEXTI_voidSetCallBack+0xc4>)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6013      	str	r3, [r2, #0]
			break;
 8004912:	e02b      	b.n	800496c <MEXTI_voidSetCallBack+0xb8>
		case LINE1:
			EXTI_CallBack[1] = ptr;
 8004914:	4a18      	ldr	r2, [pc, #96]	; (8004978 <MEXTI_voidSetCallBack+0xc4>)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6053      	str	r3, [r2, #4]
			break;
 800491a:	e027      	b.n	800496c <MEXTI_voidSetCallBack+0xb8>
		case LINE2:
			EXTI_CallBack[2] = ptr;
 800491c:	4a16      	ldr	r2, [pc, #88]	; (8004978 <MEXTI_voidSetCallBack+0xc4>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6093      	str	r3, [r2, #8]
			break;
 8004922:	e023      	b.n	800496c <MEXTI_voidSetCallBack+0xb8>
		case LINE3:
			EXTI_CallBack[3] = ptr;
 8004924:	4a14      	ldr	r2, [pc, #80]	; (8004978 <MEXTI_voidSetCallBack+0xc4>)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60d3      	str	r3, [r2, #12]
			break;
 800492a:	e01f      	b.n	800496c <MEXTI_voidSetCallBack+0xb8>
		case LINE4:
			EXTI_CallBack[4] = ptr;
 800492c:	4a12      	ldr	r2, [pc, #72]	; (8004978 <MEXTI_voidSetCallBack+0xc4>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6113      	str	r3, [r2, #16]
			break;
 8004932:	e01b      	b.n	800496c <MEXTI_voidSetCallBack+0xb8>
		case LINE5:
		case LINE6:
		case LINE7:
		case LINE8:
		case LINE9:
			EXTI_CallBack[5] = ptr;
 8004934:	4a10      	ldr	r2, [pc, #64]	; (8004978 <MEXTI_voidSetCallBack+0xc4>)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6153      	str	r3, [r2, #20]
			break;
 800493a:	e017      	b.n	800496c <MEXTI_voidSetCallBack+0xb8>
		case LINE10:
			EXTI_CallBack[10] = ptr;
 800493c:	4a0e      	ldr	r2, [pc, #56]	; (8004978 <MEXTI_voidSetCallBack+0xc4>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6293      	str	r3, [r2, #40]	; 0x28
			break;
 8004942:	e013      	b.n	800496c <MEXTI_voidSetCallBack+0xb8>
		case LINE11:
			EXTI_CallBack[11] = ptr;
 8004944:	4a0c      	ldr	r2, [pc, #48]	; (8004978 <MEXTI_voidSetCallBack+0xc4>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
 800494a:	e00f      	b.n	800496c <MEXTI_voidSetCallBack+0xb8>
		case LINE12:
			EXTI_CallBack[12] = ptr;
 800494c:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <MEXTI_voidSetCallBack+0xc4>)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6313      	str	r3, [r2, #48]	; 0x30
			break;
 8004952:	e00b      	b.n	800496c <MEXTI_voidSetCallBack+0xb8>
		case LINE13:
			EXTI_CallBack[13] = ptr;
 8004954:	4a08      	ldr	r2, [pc, #32]	; (8004978 <MEXTI_voidSetCallBack+0xc4>)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 800495a:	e007      	b.n	800496c <MEXTI_voidSetCallBack+0xb8>
		case LINE14:
			EXTI_CallBack[14] = ptr;
 800495c:	4a06      	ldr	r2, [pc, #24]	; (8004978 <MEXTI_voidSetCallBack+0xc4>)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8004962:	e003      	b.n	800496c <MEXTI_voidSetCallBack+0xb8>
		case LINE15:
			EXTI_CallBack[15] = ptr;
 8004964:	4a04      	ldr	r2, [pc, #16]	; (8004978 <MEXTI_voidSetCallBack+0xc4>)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;	
 800496a:	bf00      	nop
	}
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20004590 	.word	0x20004590

0800497c <EXTI0_IRQHandler>:

/* EXI 0 IRQ Handler */
void EXTI0_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
    EXTI_CallBack[0]();
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <EXTI0_IRQHandler+0x1c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4798      	blx	r3
    // Clear pending bit of EXTI0 by setting it to 1
    SET_BIT(EXTI_Ptr -> EXTI_PR , 0);
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <EXTI0_IRQHandler+0x20>)
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	4a04      	ldr	r2, [pc, #16]	; (800499c <EXTI0_IRQHandler+0x20>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	6153      	str	r3, [r2, #20]
}
 8004992:	bf00      	nop
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20004590 	.word	0x20004590
 800499c:	40010400 	.word	0x40010400

080049a0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
    EXTI_CallBack[5]();
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <EXTI9_5_IRQHandler+0x1c>)
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	4798      	blx	r3
    // Clear pending bit of EXTI0 by setting it to 1
    SET_BIT(EXTI_Ptr -> EXTI_PR , 0);
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <EXTI9_5_IRQHandler+0x20>)
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <EXTI9_5_IRQHandler+0x20>)
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	6153      	str	r3, [r2, #20]
}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20004590 	.word	0x20004590
 80049c0:	40010400 	.word	0x40010400

080049c4 <MGPIO_voidSetPinDirection>:
#include "MCAL/GPIO_interface.h"
#include "MCAL/GPIO_private.h"

            /* ------ Function that sets the pin "mode and configuration" ------- */
void MGPIO_voidSetPinDirection(GPIO_t Copy_GPIO_Pin , u8 Copy_u8Mode)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	80b8      	strh	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]

    switch (Copy_GPIO_Pin.GPIO_Port)
 80049d0:	797b      	ldrb	r3, [r7, #5]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d04d      	beq.n	8004a72 <MGPIO_voidSetPinDirection+0xae>
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	f000 8092 	beq.w	8004b00 <MGPIO_voidSetPinDirection+0x13c>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d000      	beq.n	80049e2 <MGPIO_voidSetPinDirection+0x1e>
                            MGPIOC -> CRH |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
                        }
                    break;

        default : /* just to avoid any compiler errors */ 
                    break;
 80049e0:	e0da      	b.n	8004b98 <MGPIO_voidSetPinDirection+0x1d4>
            		if(Copy_u8Mode == INPUT_PULL_UP_OR_DOWN)
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d109      	bne.n	80049fc <MGPIO_voidSetPinDirection+0x38>
            			SET_BIT(MGPIOA->ODR,Copy_GPIO_Pin.GPIO_Pin);
 80049e8:	4b6e      	ldr	r3, [pc, #440]	; (8004ba4 <MGPIO_voidSetPinDirection+0x1e0>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	793a      	ldrb	r2, [r7, #4]
 80049ee:	4611      	mov	r1, r2
 80049f0:	2201      	movs	r2, #1
 80049f2:	408a      	lsls	r2, r1
 80049f4:	4611      	mov	r1, r2
 80049f6:	4a6b      	ldr	r2, [pc, #428]	; (8004ba4 <MGPIO_voidSetPinDirection+0x1e0>)
 80049f8:	430b      	orrs	r3, r1
 80049fa:	60d3      	str	r3, [r2, #12]
                    if (Copy_GPIO_Pin.GPIO_Pin <= 7 && Copy_GPIO_Pin.GPIO_Pin >= 0)
 80049fc:	793b      	ldrb	r3, [r7, #4]
 80049fe:	2b07      	cmp	r3, #7
 8004a00:	d817      	bhi.n	8004a32 <MGPIO_voidSetPinDirection+0x6e>
                            MGPIOA -> CRL &= ~ ((0b1111) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8004a02:	4b68      	ldr	r3, [pc, #416]	; (8004ba4 <MGPIO_voidSetPinDirection+0x1e0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	793a      	ldrb	r2, [r7, #4]
 8004a08:	0092      	lsls	r2, r2, #2
 8004a0a:	210f      	movs	r1, #15
 8004a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a10:	43d2      	mvns	r2, r2
 8004a12:	4611      	mov	r1, r2
 8004a14:	4a63      	ldr	r2, [pc, #396]	; (8004ba4 <MGPIO_voidSetPinDirection+0x1e0>)
 8004a16:	400b      	ands	r3, r1
 8004a18:	6013      	str	r3, [r2, #0]
                            MGPIOA -> CRL |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8004a1a:	4b62      	ldr	r3, [pc, #392]	; (8004ba4 <MGPIO_voidSetPinDirection+0x1e0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	78f9      	ldrb	r1, [r7, #3]
 8004a20:	793a      	ldrb	r2, [r7, #4]
 8004a22:	0092      	lsls	r2, r2, #2
 8004a24:	fa01 f202 	lsl.w	r2, r1, r2
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4a5e      	ldr	r2, [pc, #376]	; (8004ba4 <MGPIO_voidSetPinDirection+0x1e0>)
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6013      	str	r3, [r2, #0]
                    break;
 8004a30:	e0ad      	b.n	8004b8e <MGPIO_voidSetPinDirection+0x1ca>
                    else if (Copy_GPIO_Pin.GPIO_Pin <= 15)
 8004a32:	793b      	ldrb	r3, [r7, #4]
 8004a34:	2b0f      	cmp	r3, #15
 8004a36:	f200 80aa 	bhi.w	8004b8e <MGPIO_voidSetPinDirection+0x1ca>
                    		Copy_GPIO_Pin.GPIO_Pin = Copy_GPIO_Pin.GPIO_Pin - 8;
 8004a3a:	793b      	ldrb	r3, [r7, #4]
 8004a3c:	3b08      	subs	r3, #8
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	713b      	strb	r3, [r7, #4]
                            MGPIOA -> CRH &= ~ ((0b1111) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8004a42:	4b58      	ldr	r3, [pc, #352]	; (8004ba4 <MGPIO_voidSetPinDirection+0x1e0>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	793a      	ldrb	r2, [r7, #4]
 8004a48:	0092      	lsls	r2, r2, #2
 8004a4a:	210f      	movs	r1, #15
 8004a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a50:	43d2      	mvns	r2, r2
 8004a52:	4611      	mov	r1, r2
 8004a54:	4a53      	ldr	r2, [pc, #332]	; (8004ba4 <MGPIO_voidSetPinDirection+0x1e0>)
 8004a56:	400b      	ands	r3, r1
 8004a58:	6053      	str	r3, [r2, #4]
                            MGPIOA -> CRH |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8004a5a:	4b52      	ldr	r3, [pc, #328]	; (8004ba4 <MGPIO_voidSetPinDirection+0x1e0>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	78f9      	ldrb	r1, [r7, #3]
 8004a60:	793a      	ldrb	r2, [r7, #4]
 8004a62:	0092      	lsls	r2, r2, #2
 8004a64:	fa01 f202 	lsl.w	r2, r1, r2
 8004a68:	4611      	mov	r1, r2
 8004a6a:	4a4e      	ldr	r2, [pc, #312]	; (8004ba4 <MGPIO_voidSetPinDirection+0x1e0>)
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6053      	str	r3, [r2, #4]
                    break;
 8004a70:	e08d      	b.n	8004b8e <MGPIO_voidSetPinDirection+0x1ca>
            		if(Copy_u8Mode == INPUT_PULL_UP_OR_DOWN)
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d109      	bne.n	8004a8c <MGPIO_voidSetPinDirection+0xc8>
            			SET_BIT(MGPIOB->ODR,Copy_GPIO_Pin.GPIO_Pin);
 8004a78:	4b4b      	ldr	r3, [pc, #300]	; (8004ba8 <MGPIO_voidSetPinDirection+0x1e4>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	793a      	ldrb	r2, [r7, #4]
 8004a7e:	4611      	mov	r1, r2
 8004a80:	2201      	movs	r2, #1
 8004a82:	408a      	lsls	r2, r1
 8004a84:	4611      	mov	r1, r2
 8004a86:	4a48      	ldr	r2, [pc, #288]	; (8004ba8 <MGPIO_voidSetPinDirection+0x1e4>)
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	60d3      	str	r3, [r2, #12]
                    if (Copy_GPIO_Pin.GPIO_Pin <= 7 && Copy_GPIO_Pin.GPIO_Pin >= 0)
 8004a8c:	793b      	ldrb	r3, [r7, #4]
 8004a8e:	2b07      	cmp	r3, #7
 8004a90:	d817      	bhi.n	8004ac2 <MGPIO_voidSetPinDirection+0xfe>
                            MGPIOB -> CRL &= ~ ((0b1111) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8004a92:	4b45      	ldr	r3, [pc, #276]	; (8004ba8 <MGPIO_voidSetPinDirection+0x1e4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	793a      	ldrb	r2, [r7, #4]
 8004a98:	0092      	lsls	r2, r2, #2
 8004a9a:	210f      	movs	r1, #15
 8004a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa0:	43d2      	mvns	r2, r2
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	4a40      	ldr	r2, [pc, #256]	; (8004ba8 <MGPIO_voidSetPinDirection+0x1e4>)
 8004aa6:	400b      	ands	r3, r1
 8004aa8:	6013      	str	r3, [r2, #0]
                            MGPIOB -> CRL |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8004aaa:	4b3f      	ldr	r3, [pc, #252]	; (8004ba8 <MGPIO_voidSetPinDirection+0x1e4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	78f9      	ldrb	r1, [r7, #3]
 8004ab0:	793a      	ldrb	r2, [r7, #4]
 8004ab2:	0092      	lsls	r2, r2, #2
 8004ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab8:	4611      	mov	r1, r2
 8004aba:	4a3b      	ldr	r2, [pc, #236]	; (8004ba8 <MGPIO_voidSetPinDirection+0x1e4>)
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6013      	str	r3, [r2, #0]
                    break;
 8004ac0:	e067      	b.n	8004b92 <MGPIO_voidSetPinDirection+0x1ce>
                    else if (Copy_GPIO_Pin.GPIO_Pin <= 15)
 8004ac2:	793b      	ldrb	r3, [r7, #4]
 8004ac4:	2b0f      	cmp	r3, #15
 8004ac6:	d864      	bhi.n	8004b92 <MGPIO_voidSetPinDirection+0x1ce>
                    		Copy_GPIO_Pin.GPIO_Pin = Copy_GPIO_Pin.GPIO_Pin - 8;
 8004ac8:	793b      	ldrb	r3, [r7, #4]
 8004aca:	3b08      	subs	r3, #8
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	713b      	strb	r3, [r7, #4]
                            MGPIOB -> CRH &= ~ ((0b1111) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8004ad0:	4b35      	ldr	r3, [pc, #212]	; (8004ba8 <MGPIO_voidSetPinDirection+0x1e4>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	793a      	ldrb	r2, [r7, #4]
 8004ad6:	0092      	lsls	r2, r2, #2
 8004ad8:	210f      	movs	r1, #15
 8004ada:	fa01 f202 	lsl.w	r2, r1, r2
 8004ade:	43d2      	mvns	r2, r2
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	4a31      	ldr	r2, [pc, #196]	; (8004ba8 <MGPIO_voidSetPinDirection+0x1e4>)
 8004ae4:	400b      	ands	r3, r1
 8004ae6:	6053      	str	r3, [r2, #4]
                            MGPIOB -> CRH |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8004ae8:	4b2f      	ldr	r3, [pc, #188]	; (8004ba8 <MGPIO_voidSetPinDirection+0x1e4>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	78f9      	ldrb	r1, [r7, #3]
 8004aee:	793a      	ldrb	r2, [r7, #4]
 8004af0:	0092      	lsls	r2, r2, #2
 8004af2:	fa01 f202 	lsl.w	r2, r1, r2
 8004af6:	4611      	mov	r1, r2
 8004af8:	4a2b      	ldr	r2, [pc, #172]	; (8004ba8 <MGPIO_voidSetPinDirection+0x1e4>)
 8004afa:	430b      	orrs	r3, r1
 8004afc:	6053      	str	r3, [r2, #4]
                    break;
 8004afe:	e048      	b.n	8004b92 <MGPIO_voidSetPinDirection+0x1ce>
            		if(Copy_u8Mode == INPUT_PULL_UP_OR_DOWN)
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d109      	bne.n	8004b1a <MGPIO_voidSetPinDirection+0x156>
            			SET_BIT(MGPIOC->ODR,Copy_GPIO_Pin.GPIO_Pin);
 8004b06:	4b29      	ldr	r3, [pc, #164]	; (8004bac <MGPIO_voidSetPinDirection+0x1e8>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	793a      	ldrb	r2, [r7, #4]
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	2201      	movs	r2, #1
 8004b10:	408a      	lsls	r2, r1
 8004b12:	4611      	mov	r1, r2
 8004b14:	4a25      	ldr	r2, [pc, #148]	; (8004bac <MGPIO_voidSetPinDirection+0x1e8>)
 8004b16:	430b      	orrs	r3, r1
 8004b18:	60d3      	str	r3, [r2, #12]
                    if (Copy_GPIO_Pin.GPIO_Pin <= 7 && Copy_GPIO_Pin.GPIO_Pin >= 0)
 8004b1a:	793b      	ldrb	r3, [r7, #4]
 8004b1c:	2b07      	cmp	r3, #7
 8004b1e:	d817      	bhi.n	8004b50 <MGPIO_voidSetPinDirection+0x18c>
                            MGPIOC -> CRL &= ~ ((0b1111) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8004b20:	4b22      	ldr	r3, [pc, #136]	; (8004bac <MGPIO_voidSetPinDirection+0x1e8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	793a      	ldrb	r2, [r7, #4]
 8004b26:	0092      	lsls	r2, r2, #2
 8004b28:	210f      	movs	r1, #15
 8004b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2e:	43d2      	mvns	r2, r2
 8004b30:	4611      	mov	r1, r2
 8004b32:	4a1e      	ldr	r2, [pc, #120]	; (8004bac <MGPIO_voidSetPinDirection+0x1e8>)
 8004b34:	400b      	ands	r3, r1
 8004b36:	6013      	str	r3, [r2, #0]
                            MGPIOC -> CRL |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8004b38:	4b1c      	ldr	r3, [pc, #112]	; (8004bac <MGPIO_voidSetPinDirection+0x1e8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	78f9      	ldrb	r1, [r7, #3]
 8004b3e:	793a      	ldrb	r2, [r7, #4]
 8004b40:	0092      	lsls	r2, r2, #2
 8004b42:	fa01 f202 	lsl.w	r2, r1, r2
 8004b46:	4611      	mov	r1, r2
 8004b48:	4a18      	ldr	r2, [pc, #96]	; (8004bac <MGPIO_voidSetPinDirection+0x1e8>)
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	6013      	str	r3, [r2, #0]
                    break;
 8004b4e:	e022      	b.n	8004b96 <MGPIO_voidSetPinDirection+0x1d2>
                    else if (Copy_GPIO_Pin.GPIO_Pin <= 15)
 8004b50:	793b      	ldrb	r3, [r7, #4]
 8004b52:	2b0f      	cmp	r3, #15
 8004b54:	d81f      	bhi.n	8004b96 <MGPIO_voidSetPinDirection+0x1d2>
                    		Copy_GPIO_Pin.GPIO_Pin = Copy_GPIO_Pin.GPIO_Pin - 8;
 8004b56:	793b      	ldrb	r3, [r7, #4]
 8004b58:	3b08      	subs	r3, #8
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	713b      	strb	r3, [r7, #4]
                            MGPIOC -> CRH &= ~ ((0b1111) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <MGPIO_voidSetPinDirection+0x1e8>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	793a      	ldrb	r2, [r7, #4]
 8004b64:	0092      	lsls	r2, r2, #2
 8004b66:	210f      	movs	r1, #15
 8004b68:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6c:	43d2      	mvns	r2, r2
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4a0e      	ldr	r2, [pc, #56]	; (8004bac <MGPIO_voidSetPinDirection+0x1e8>)
 8004b72:	400b      	ands	r3, r1
 8004b74:	6053      	str	r3, [r2, #4]
                            MGPIOC -> CRH |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8004b76:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <MGPIO_voidSetPinDirection+0x1e8>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	78f9      	ldrb	r1, [r7, #3]
 8004b7c:	793a      	ldrb	r2, [r7, #4]
 8004b7e:	0092      	lsls	r2, r2, #2
 8004b80:	fa01 f202 	lsl.w	r2, r1, r2
 8004b84:	4611      	mov	r1, r2
 8004b86:	4a09      	ldr	r2, [pc, #36]	; (8004bac <MGPIO_voidSetPinDirection+0x1e8>)
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	6053      	str	r3, [r2, #4]
                    break;
 8004b8c:	e003      	b.n	8004b96 <MGPIO_voidSetPinDirection+0x1d2>
                    break;
 8004b8e:	bf00      	nop
 8004b90:	e002      	b.n	8004b98 <MGPIO_voidSetPinDirection+0x1d4>
                    break;
 8004b92:	bf00      	nop
 8004b94:	e000      	b.n	8004b98 <MGPIO_voidSetPinDirection+0x1d4>
                    break;
 8004b96:	bf00      	nop
    }
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	40010800 	.word	0x40010800
 8004ba8:	40010c00 	.word	0x40010c00
 8004bac:	40011000 	.word	0x40011000

08004bb0 <MGPIO_voidSetPinValue>:

                  /* ----- Function that sets the pin value either "High or Low" ------- */
    /* To speed up the GPIO Set Pin Value Function, I've used BSRR & BRR registers to reduce processing cycles */
void MGPIO_voidSetPinValue(GPIO_t Copy_GPIO_Pin , u8 Copy_u8VALUE)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	80b8      	strh	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
    switch (Copy_GPIO_Pin.GPIO_Port)
 8004bbc:	797b      	ldrb	r3, [r7, #5]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d01a      	beq.n	8004bf8 <MGPIO_voidSetPinValue+0x48>
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d02e      	beq.n	8004c24 <MGPIO_voidSetPinValue+0x74>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d000      	beq.n	8004bcc <MGPIO_voidSetPinValue+0x1c>
                            MGPIOC -> BRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
                        }
                    break;

        default : /* just to avoid any compiler errors */ 
                    break;
 8004bca:	e046      	b.n	8004c5a <MGPIO_voidSetPinValue+0xaa>
                    if (Copy_u8VALUE == HIGH) 
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <MGPIO_voidSetPinValue+0x32>
                            MGPIOA -> BSRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
 8004bd2:	793b      	ldrb	r3, [r7, #4]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	fa03 f202 	lsl.w	r2, r3, r2
 8004bdc:	4b21      	ldr	r3, [pc, #132]	; (8004c64 <MGPIO_voidSetPinValue+0xb4>)
 8004bde:	611a      	str	r2, [r3, #16]
                    break;
 8004be0:	e036      	b.n	8004c50 <MGPIO_voidSetPinValue+0xa0>
                    else if (Copy_u8VALUE == LOW)
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d133      	bne.n	8004c50 <MGPIO_voidSetPinValue+0xa0>
                            MGPIOA -> BRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
 8004be8:	793b      	ldrb	r3, [r7, #4]
 8004bea:	461a      	mov	r2, r3
 8004bec:	2301      	movs	r3, #1
 8004bee:	fa03 f202 	lsl.w	r2, r3, r2
 8004bf2:	4b1c      	ldr	r3, [pc, #112]	; (8004c64 <MGPIO_voidSetPinValue+0xb4>)
 8004bf4:	615a      	str	r2, [r3, #20]
                    break;
 8004bf6:	e02b      	b.n	8004c50 <MGPIO_voidSetPinValue+0xa0>
                    if (Copy_u8VALUE == HIGH) 
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d107      	bne.n	8004c0e <MGPIO_voidSetPinValue+0x5e>
                            MGPIOB -> BSRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
 8004bfe:	793b      	ldrb	r3, [r7, #4]
 8004c00:	461a      	mov	r2, r3
 8004c02:	2301      	movs	r3, #1
 8004c04:	fa03 f202 	lsl.w	r2, r3, r2
 8004c08:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <MGPIO_voidSetPinValue+0xb8>)
 8004c0a:	611a      	str	r2, [r3, #16]
                    break;
 8004c0c:	e022      	b.n	8004c54 <MGPIO_voidSetPinValue+0xa4>
                    else if (Copy_u8VALUE == LOW)
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11f      	bne.n	8004c54 <MGPIO_voidSetPinValue+0xa4>
                            MGPIOB -> BRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
 8004c14:	793b      	ldrb	r3, [r7, #4]
 8004c16:	461a      	mov	r2, r3
 8004c18:	2301      	movs	r3, #1
 8004c1a:	fa03 f202 	lsl.w	r2, r3, r2
 8004c1e:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <MGPIO_voidSetPinValue+0xb8>)
 8004c20:	615a      	str	r2, [r3, #20]
                    break;
 8004c22:	e017      	b.n	8004c54 <MGPIO_voidSetPinValue+0xa4>
                    if (Copy_u8VALUE == HIGH) 
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d107      	bne.n	8004c3a <MGPIO_voidSetPinValue+0x8a>
                            MGPIOC -> BSRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
 8004c2a:	793b      	ldrb	r3, [r7, #4]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	2301      	movs	r3, #1
 8004c30:	fa03 f202 	lsl.w	r2, r3, r2
 8004c34:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <MGPIO_voidSetPinValue+0xbc>)
 8004c36:	611a      	str	r2, [r3, #16]
                    break;
 8004c38:	e00e      	b.n	8004c58 <MGPIO_voidSetPinValue+0xa8>
                    else if (Copy_u8VALUE == LOW)
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <MGPIO_voidSetPinValue+0xa8>
                            MGPIOC -> BRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
 8004c40:	793b      	ldrb	r3, [r7, #4]
 8004c42:	461a      	mov	r2, r3
 8004c44:	2301      	movs	r3, #1
 8004c46:	fa03 f202 	lsl.w	r2, r3, r2
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <MGPIO_voidSetPinValue+0xbc>)
 8004c4c:	615a      	str	r2, [r3, #20]
                    break;
 8004c4e:	e003      	b.n	8004c58 <MGPIO_voidSetPinValue+0xa8>
                    break;
 8004c50:	bf00      	nop
 8004c52:	e002      	b.n	8004c5a <MGPIO_voidSetPinValue+0xaa>
                    break;
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <MGPIO_voidSetPinValue+0xaa>
                    break;
 8004c58:	bf00      	nop
    }

}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	40010800 	.word	0x40010800
 8004c68:	40010c00 	.word	0x40010c00
 8004c6c:	40011000 	.word	0x40011000

08004c70 <MGPIO_u8GetPinValue>:

            /* ----- Function that get the pin value either "High or Low" ------- */
u8 MGPIO_u8GetPinValue(GPIO_t Copy_GPIO_Pin)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	80b8      	strh	r0, [r7, #4]
    u8 LOC_u8Value = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]
    switch (Copy_GPIO_Pin.GPIO_Port)
 8004c7c:	797b      	ldrb	r3, [r7, #5]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d00d      	beq.n	8004c9e <MGPIO_u8GetPinValue+0x2e>
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d014      	beq.n	8004cb0 <MGPIO_u8GetPinValue+0x40>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d000      	beq.n	8004c8c <MGPIO_u8GetPinValue+0x1c>
    {
                    /* Get the pin value from the Input Data Register */
        case GPIOA_Port : LOC_u8Value = GET_BIT(MGPIOA -> IDR , Copy_GPIO_Pin.GPIO_Pin); break;
        case GPIOB_Port : LOC_u8Value = GET_BIT(MGPIOB -> IDR , Copy_GPIO_Pin.GPIO_Pin); break;
        case GPIOC_Port : LOC_u8Value = GET_BIT(MGPIOC -> IDR , Copy_GPIO_Pin.GPIO_Pin); break;
        default    :                                                  break;
 8004c8a:	e01a      	b.n	8004cc2 <MGPIO_u8GetPinValue+0x52>
        case GPIOA_Port : LOC_u8Value = GET_BIT(MGPIOA -> IDR , Copy_GPIO_Pin.GPIO_Pin); break;
 8004c8c:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <MGPIO_u8GetPinValue+0x60>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	793a      	ldrb	r2, [r7, #4]
 8004c92:	40d3      	lsrs	r3, r2
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
 8004c9c:	e011      	b.n	8004cc2 <MGPIO_u8GetPinValue+0x52>
        case GPIOB_Port : LOC_u8Value = GET_BIT(MGPIOB -> IDR , Copy_GPIO_Pin.GPIO_Pin); break;
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <MGPIO_u8GetPinValue+0x64>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	793a      	ldrb	r2, [r7, #4]
 8004ca4:	40d3      	lsrs	r3, r2
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
 8004cae:	e008      	b.n	8004cc2 <MGPIO_u8GetPinValue+0x52>
        case GPIOC_Port : LOC_u8Value = GET_BIT(MGPIOC -> IDR , Copy_GPIO_Pin.GPIO_Pin); break;
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <MGPIO_u8GetPinValue+0x68>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	793a      	ldrb	r2, [r7, #4]
 8004cb6:	40d3      	lsrs	r3, r2
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
 8004cc0:	bf00      	nop
    }
    return LOC_u8Value;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40010800 	.word	0x40010800
 8004cd4:	40010c00 	.word	0x40010c00
 8004cd8:	40011000 	.word	0x40011000

08004cdc <MNVIC_voidEnableInterrupt>:
#include "MCAL/NVIC_config.h"


/* Enable Peripheral Interrupt through "ISERx Reg" of NVIC */
void MNVIC_voidEnableInterrupt(u8 Copy_u8IntId)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	71fb      	strb	r3, [r7, #7]
    MNVIC_Ptr -> ISER [Copy_u8IntId / 32] = 1 << ( Copy_u8IntId % 32);
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2201      	movs	r2, #1
 8004cee:	fa02 f103 	lsl.w	r1, r2, r3
 8004cf2:	4a05      	ldr	r2, [pc, #20]	; (8004d08 <MNVIC_voidEnableInterrupt+0x2c>)
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr
 8004d08:	e000e100 	.word	0xe000e100

08004d0c <MRCC_enuInitSysClock>:
#include "MCAL/RCC_config.h"


/* ----- Initialize clock depending on paramters chosen by the user ----- */
tenumFncErrorState MRCC_enuInitSysClock (void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
	u32 LOC_u32TimeOut = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	607b      	str	r3, [r7, #4]

    tenumFncErrorState MRCC_Init_Status = LSTY_EXECUTED_SUCCESSFULLY;
 8004d16:	2300      	movs	r3, #0
 8004d18:	70fb      	strb	r3, [r7, #3]
		if(LOC_u32TimeOut >= 100000){ /*TimeOut*/ MRCC_Init_Status = LSTY_TIME_OUT; }	

	#elif RCC_SYS_CLOCK == RCC_HSE_CRYSTAL /* HSE not bypassed */
		/* BIT 1:0 -> Choose Between HSI OR HSE OR PLL */
		/* HSE Selected As A System Clock */
		SET_BIT(MRCC_Ptr -> CFGR, 0);
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <MRCC_enuInitSysClock+0x80>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <MRCC_enuInitSysClock+0x80>)
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	6053      	str	r3, [r2, #4]
		CLR_BIT(MRCC_Ptr-> CFGR, 1);
 8004d26:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <MRCC_enuInitSysClock+0x80>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <MRCC_enuInitSysClock+0x80>)
 8004d2c:	f023 0302 	bic.w	r3, r3, #2
 8004d30:	6053      	str	r3, [r2, #4]
		/* Bit 16 -> Enable The HSE Clock */
		SET_BIT(MRCC_Ptr -> CR, 16);
 8004d32:	4b16      	ldr	r3, [pc, #88]	; (8004d8c <MRCC_enuInitSysClock+0x80>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <MRCC_enuInitSysClock+0x80>)
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3c:	6013      	str	r3, [r2, #0]
		/* Bit 17 -> Checking Whether The HSE Clock Is Stable (1) or not (0) :*/
		while( ( ( GET_BIT(MRCC_Ptr -> CR , 17) ) == 0 ) && ( LOC_u32TimeOut < 100000 ) ){ LOC_u32TimeOut++; }
 8004d3e:	e002      	b.n	8004d46 <MRCC_enuInitSysClock+0x3a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3301      	adds	r3, #1
 8004d44:	607b      	str	r3, [r7, #4]
 8004d46:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <MRCC_enuInitSysClock+0x80>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	0c5b      	lsrs	r3, r3, #17
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d103      	bne.n	8004d5c <MRCC_enuInitSysClock+0x50>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a0e      	ldr	r2, [pc, #56]	; (8004d90 <MRCC_enuInitSysClock+0x84>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d9f1      	bls.n	8004d40 <MRCC_enuInitSysClock+0x34>
		if(LOC_u32TimeOut >= 100000){ /*TimeOut*/ MRCC_Init_Status = LSTY_TIME_OUT; }
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <MRCC_enuInitSysClock+0x84>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d901      	bls.n	8004d68 <MRCC_enuInitSysClock+0x5c>
 8004d64:	2306      	movs	r3, #6
 8004d66:	70fb      	strb	r3, [r7, #3]
	#endif


	/* ----- To enable or disable Clock security system ----- */
	#if CLK_SECURITY_SYSTEM == ENABLE_CLOCK_SECURITY_SYSTEM 
		SET_BIT(MRCC_Ptr -> CR, 19);
 8004d68:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <MRCC_enuInitSysClock+0x80>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a07      	ldr	r2, [pc, #28]	; (8004d8c <MRCC_enuInitSysClock+0x80>)
 8004d6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d72:	6013      	str	r3, [r2, #0]
		#error "CSS Configuration error"
	#endif

	/* ----- Choosing output on MCO  Control Register Bits: 26-24 ----- */
	#if   RCC_MCO_PIN == NO_CLOCK 
		CLR_BIT(MRCC_Ptr -> CFGR , 26);  
 8004d74:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <MRCC_enuInitSysClock+0x80>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <MRCC_enuInitSysClock+0x80>)
 8004d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d7e:	6053      	str	r3, [r2, #4]
		SET_BIT(MRCC_Ptr -> CFGR , 26);
	#else
		#error "Invalid MCO Configuration"
	#endif	

    return MRCC_Init_Status;
 8004d80:	78fb      	ldrb	r3, [r7, #3]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	0001869f 	.word	0x0001869f

08004d94 <MRCC_enuEnableClock>:


tenumFncErrorState MRCC_enuEnableClock (u8 Copy_u8BusId , u8 Copy_u8PerId)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	460a      	mov	r2, r1
 8004d9e:	71fb      	strb	r3, [r7, #7]
 8004da0:	4613      	mov	r3, r2
 8004da2:	71bb      	strb	r3, [r7, #6]
    tenumFncErrorState MRCC_EnableClock_Status = LSTY_EXECUTED_SUCCESSFULLY;
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]

    if (Copy_u8PerId <= 31)
 8004da8:	79bb      	ldrb	r3, [r7, #6]
 8004daa:	2b1f      	cmp	r3, #31
 8004dac:	d82b      	bhi.n	8004e06 <MRCC_enuEnableClock+0x72>
    {
      switch (Copy_u8BusId) 
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d00e      	beq.n	8004dd2 <MRCC_enuEnableClock+0x3e>
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d017      	beq.n	8004de8 <MRCC_enuEnableClock+0x54>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d120      	bne.n	8004dfe <MRCC_enuEnableClock+0x6a>
      {
        case AHB_BUS  : SET_BIT(MRCC_Ptr -> AHBENR  , Copy_u8PerId ); break;
 8004dbc:	4b16      	ldr	r3, [pc, #88]	; (8004e18 <MRCC_enuEnableClock+0x84>)
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	79ba      	ldrb	r2, [r7, #6]
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc8:	4611      	mov	r1, r2
 8004dca:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <MRCC_enuEnableClock+0x84>)
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6153      	str	r3, [r2, #20]
 8004dd0:	e01b      	b.n	8004e0a <MRCC_enuEnableClock+0x76>
        case APB1_BUS : SET_BIT(MRCC_Ptr -> APB1ENR , Copy_u8PerId ); break;
 8004dd2:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <MRCC_enuEnableClock+0x84>)
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	79ba      	ldrb	r2, [r7, #6]
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f202 	lsl.w	r2, r1, r2
 8004dde:	4611      	mov	r1, r2
 8004de0:	4a0d      	ldr	r2, [pc, #52]	; (8004e18 <MRCC_enuEnableClock+0x84>)
 8004de2:	430b      	orrs	r3, r1
 8004de4:	61d3      	str	r3, [r2, #28]
 8004de6:	e010      	b.n	8004e0a <MRCC_enuEnableClock+0x76>
        case APB2_BUS : SET_BIT(MRCC_Ptr -> APB2ENR , Copy_u8PerId ); break;
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <MRCC_enuEnableClock+0x84>)
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	79ba      	ldrb	r2, [r7, #6]
 8004dee:	2101      	movs	r1, #1
 8004df0:	fa01 f202 	lsl.w	r2, r1, r2
 8004df4:	4611      	mov	r1, r2
 8004df6:	4a08      	ldr	r2, [pc, #32]	; (8004e18 <MRCC_enuEnableClock+0x84>)
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6193      	str	r3, [r2, #24]
 8004dfc:	e005      	b.n	8004e0a <MRCC_enuEnableClock+0x76>
        default       : MRCC_EnableClock_Status = LSTY_OUT_OF_RANGE;  break;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
 8004e02:	bf00      	nop
 8004e04:	e001      	b.n	8004e0a <MRCC_enuEnableClock+0x76>
      }
    }
    else 
    {
        /*Out Of Range*/ 
        MRCC_EnableClock_Status = LSTY_OUT_OF_RANGE;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
    }

    return MRCC_EnableClock_Status;
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40021000 	.word	0x40021000

08004e1c <MRCC_enuDisableClock>:

tenumFncErrorState MRCC_enuDisableClock(u8 Copy_u8BusId , u8 Copy_u8PerId)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	460a      	mov	r2, r1
 8004e26:	71fb      	strb	r3, [r7, #7]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	71bb      	strb	r3, [r7, #6]
    tenumFncErrorState MRCC_DisableClock_Status = LSTY_EXECUTED_SUCCESSFULLY;        
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	73fb      	strb	r3, [r7, #15]

    if (Copy_u8PerId <= 31)
 8004e30:	79bb      	ldrb	r3, [r7, #6]
 8004e32:	2b1f      	cmp	r3, #31
 8004e34:	d82e      	bhi.n	8004e94 <MRCC_enuDisableClock+0x78>
    {
      switch (Copy_u8BusId) 
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d00f      	beq.n	8004e5c <MRCC_enuDisableClock+0x40>
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d019      	beq.n	8004e74 <MRCC_enuDisableClock+0x58>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d123      	bne.n	8004e8c <MRCC_enuDisableClock+0x70>
      {
        case AHB_BUS  : CLR_BIT(MRCC_Ptr -> AHBENR  , Copy_u8PerId ); break;
 8004e44:	4b17      	ldr	r3, [pc, #92]	; (8004ea4 <MRCC_enuDisableClock+0x88>)
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	79ba      	ldrb	r2, [r7, #6]
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e50:	43d2      	mvns	r2, r2
 8004e52:	4611      	mov	r1, r2
 8004e54:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <MRCC_enuDisableClock+0x88>)
 8004e56:	400b      	ands	r3, r1
 8004e58:	6153      	str	r3, [r2, #20]
 8004e5a:	e01d      	b.n	8004e98 <MRCC_enuDisableClock+0x7c>
        case APB1_BUS : CLR_BIT(MRCC_Ptr -> APB1ENR , Copy_u8PerId ); break;
 8004e5c:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <MRCC_enuDisableClock+0x88>)
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	79ba      	ldrb	r2, [r7, #6]
 8004e62:	2101      	movs	r1, #1
 8004e64:	fa01 f202 	lsl.w	r2, r1, r2
 8004e68:	43d2      	mvns	r2, r2
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ea4 <MRCC_enuDisableClock+0x88>)
 8004e6e:	400b      	ands	r3, r1
 8004e70:	61d3      	str	r3, [r2, #28]
 8004e72:	e011      	b.n	8004e98 <MRCC_enuDisableClock+0x7c>
        case APB2_BUS : CLR_BIT(MRCC_Ptr -> APB2ENR , Copy_u8PerId ); break;
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <MRCC_enuDisableClock+0x88>)
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	79ba      	ldrb	r2, [r7, #6]
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e80:	43d2      	mvns	r2, r2
 8004e82:	4611      	mov	r1, r2
 8004e84:	4a07      	ldr	r2, [pc, #28]	; (8004ea4 <MRCC_enuDisableClock+0x88>)
 8004e86:	400b      	ands	r3, r1
 8004e88:	6193      	str	r3, [r2, #24]
 8004e8a:	e005      	b.n	8004e98 <MRCC_enuDisableClock+0x7c>
        default       : MRCC_DisableClock_Status = LSTY_OUT_OF_RANGE; break;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
 8004e90:	bf00      	nop
 8004e92:	e001      	b.n	8004e98 <MRCC_enuDisableClock+0x7c>
      }
    }
    else 
    {
        /*Out Of Range*/ 
        MRCC_DisableClock_Status = LSTY_OUT_OF_RANGE;
 8004e94:	2301      	movs	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
    }

    return MRCC_DisableClock_Status;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <Mtimer4_voidDelay_us>:

	TIM3_Callback = ptr;
}

void Mtimer4_voidDelay_us(u32 Copy_u32Micro_seconds)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	//if clk is 8 MHz clk then prescaller 8, will make period = 1 usec
	TIM4_BASE->TIMx_PSC = 7;
 8004eb0:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <Mtimer4_voidDelay_us+0x50>)
 8004eb2:	2207      	movs	r2, #7
 8004eb4:	629a      	str	r2, [r3, #40]	; 0x28
	// how many us till overflow ?
	TIM4_BASE->TIMx_ARR = Copy_u32Micro_seconds;
 8004eb6:	4a10      	ldr	r2, [pc, #64]	; (8004ef8 <Mtimer4_voidDelay_us+0x50>)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	62d3      	str	r3, [r2, #44]	; 0x2c
	//enable counter
	TIM4_BASE->TIMx_CR1 |=(1<<0);
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <Mtimer4_voidDelay_us+0x50>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a0d      	ldr	r2, [pc, #52]	; (8004ef8 <Mtimer4_voidDelay_us+0x50>)
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	6013      	str	r3, [r2, #0]

	//wait till update flag is set
	while(GETBIT(TIM4_BASE->TIMx_SR,0) != 1);
 8004ec8:	bf00      	nop
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <Mtimer4_voidDelay_us+0x50>)
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d1f9      	bne.n	8004eca <Mtimer4_voidDelay_us+0x22>
	// clear update flag
	TIM4_BASE->TIMx_SR &=~(1<<0);
 8004ed6:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <Mtimer4_voidDelay_us+0x50>)
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	4a07      	ldr	r2, [pc, #28]	; (8004ef8 <Mtimer4_voidDelay_us+0x50>)
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	6113      	str	r3, [r2, #16]

	//disable counter
	TIM4_BASE->TIMx_CR1 &=~(1<<0);
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <Mtimer4_voidDelay_us+0x50>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <Mtimer4_voidDelay_us+0x50>)
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	6013      	str	r3, [r2, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr
 8004ef8:	40000800 	.word	0x40000800

08004efc <Mtimer4_voidDelay_ms>:


void Mtimer4_voidDelay_ms(u32 Copy_u32Milli_seconds)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	//if clk is 8 MHz clk then prescaller 8000, will make period = 1 msec
	TIM4_BASE->TIMx_PSC = 7999;
 8004f04:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <Mtimer4_voidDelay_ms+0x54>)
 8004f06:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
	// how many ms till overflow ?
	TIM4_BASE->TIMx_ARR = Copy_u32Milli_seconds;
 8004f0c:	4a10      	ldr	r2, [pc, #64]	; (8004f50 <Mtimer4_voidDelay_ms+0x54>)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	62d3      	str	r3, [r2, #44]	; 0x2c
	//enable counter
	TIM4_BASE->TIMx_CR1 |=(1<<0);
 8004f12:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <Mtimer4_voidDelay_ms+0x54>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a0e      	ldr	r2, [pc, #56]	; (8004f50 <Mtimer4_voidDelay_ms+0x54>)
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	6013      	str	r3, [r2, #0]

	//wait till update flag is set
	while(GETBIT(TIM4_BASE->TIMx_SR,0) != 1);
 8004f1e:	bf00      	nop
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <Mtimer4_voidDelay_ms+0x54>)
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d1f9      	bne.n	8004f20 <Mtimer4_voidDelay_ms+0x24>
	// clear update flag
	TIM4_BASE->TIMx_SR &=~(1<<0);
 8004f2c:	4b08      	ldr	r3, [pc, #32]	; (8004f50 <Mtimer4_voidDelay_ms+0x54>)
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	4a07      	ldr	r2, [pc, #28]	; (8004f50 <Mtimer4_voidDelay_ms+0x54>)
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	6113      	str	r3, [r2, #16]

	//disable counter
	TIM4_BASE->TIMx_CR1 &=~(1<<0);
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <Mtimer4_voidDelay_ms+0x54>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a04      	ldr	r2, [pc, #16]	; (8004f50 <Mtimer4_voidDelay_ms+0x54>)
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	6013      	str	r3, [r2, #0]
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40000800 	.word	0x40000800

08004f54 <TIM3_IRQHandler>:
	//disable counter
	TIM3_BASE->TIMx_CR1 &=~(1<<0);
}

void TIM3_IRQHandler(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
	// clear update flag, to generate another interrupt periodically
	TIM3_BASE->TIMx_SR &=~(1<<0);
 8004f58:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <TIM3_IRQHandler+0x24>)
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	4a06      	ldr	r2, [pc, #24]	; (8004f78 <TIM3_IRQHandler+0x24>)
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	6113      	str	r3, [r2, #16]

    /*if assigned to a function by user == not NULL (because NULL is the initiated value)*/
    if(TIM3_Callback != LSTY_NULL)
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <TIM3_IRQHandler+0x28>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <TIM3_IRQHandler+0x1e>
    {
        /*start executing the passed function by user*/
    	TIM3_Callback();
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <TIM3_IRQHandler+0x28>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4798      	blx	r3
    }
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40000400 	.word	0x40000400
 8004f7c:	200045d0 	.word	0x200045d0

08004f80 <MUSART1_voidInit>:
#include "MCAL/USART_private.h"
#include "MCAL/USART1_config.h"


void MUSART1_voidInit(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
			Mantissa += 1; 
			Fraction = 0; 
		}	*/
	/* ------ BAUD Rate Configuration ------ */
	#if   USART1_BAUD_RATE == BAUD_9600
		    USART1_Ptr -> USART_BRR = 0x341;
 8004f84:	4b23      	ldr	r3, [pc, #140]	; (8005014 <MUSART1_voidInit+0x94>)
 8004f86:	f240 3241 	movw	r2, #833	; 0x341
 8004f8a:	609a      	str	r2, [r3, #8]
    /* ------ USART_1 Settings ------ */
	#if USART1_STATUS == USART_ENABLE

                /* Set the word size */
		#if   USART1_WORD_LENGTH == _8BIT_WORD_LENGTH       
					CLR_BIT(USART1_Ptr -> USART_CR1, 12);   
 8004f8c:	4b21      	ldr	r3, [pc, #132]	; (8005014 <MUSART1_voidInit+0x94>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4a20      	ldr	r2, [pc, #128]	; (8005014 <MUSART1_voidInit+0x94>)
 8004f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f96:	60d3      	str	r3, [r2, #12]
					SET_BIT(USART1_Ptr -> USART_CR1, 12);
		#endif

                /* ------ Parity Check Configuration ------ */
		#if   USART1_PARITY == PARITY_DISABLE
					CLR_BIT(USART1_Ptr -> USART_CR1, 10);
 8004f98:	4b1e      	ldr	r3, [pc, #120]	; (8005014 <MUSART1_voidInit+0x94>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <MUSART1_voidInit+0x94>)
 8004f9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fa2:	60d3      	str	r3, [r2, #12]
		#endif
	

             /* ------ Tx/Rx Interrupt Configuration ------ */
		#if  USART1_INTERRUPT == INT_DISABLE
					CLR_BIT(USART1_Ptr -> USART_CR1, 5);
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <MUSART1_voidInit+0x94>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a1a      	ldr	r2, [pc, #104]	; (8005014 <MUSART1_voidInit+0x94>)
 8004faa:	f023 0320 	bic.w	r3, r3, #32
 8004fae:	60d3      	str	r3, [r2, #12]
					CLR_BIT(USART1_Ptr -> USART_CR1, 6);
 8004fb0:	4b18      	ldr	r3, [pc, #96]	; (8005014 <MUSART1_voidInit+0x94>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a17      	ldr	r2, [pc, #92]	; (8005014 <MUSART1_voidInit+0x94>)
 8004fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fba:	60d3      	str	r3, [r2, #12]
					CLR_BIT(USART1_Ptr -> USART_CR1, 7);
 8004fbc:	4b15      	ldr	r3, [pc, #84]	; (8005014 <MUSART1_voidInit+0x94>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a14      	ldr	r2, [pc, #80]	; (8005014 <MUSART1_voidInit+0x94>)
 8004fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc6:	60d3      	str	r3, [r2, #12]
					SET_BIT(USART1_Ptr -> USART_CR1, 5);
		#endif

            /* ------ USART_1 Trasmitter Configeration ------ */
		#if   USART1_TRANSMITTER == TRANSMITTER_ENABLE
					SET_BIT(USART1_Ptr -> USART_CR1, 3);
 8004fc8:	4b12      	ldr	r3, [pc, #72]	; (8005014 <MUSART1_voidInit+0x94>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4a11      	ldr	r2, [pc, #68]	; (8005014 <MUSART1_voidInit+0x94>)
 8004fce:	f043 0308 	orr.w	r3, r3, #8
 8004fd2:	60d3      	str	r3, [r2, #12]
					CLR_BIT(USART1_Ptr -> USART_CR1, 3);
		#endif

            /* ------ USART_1 Trasmitter Configeration ------ */
		#if   USART1_RECEIVER == RECEIVER_ENABLE
					SET_BIT(USART1_Ptr -> USART_CR1, 2);
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <MUSART1_voidInit+0x94>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	4a0e      	ldr	r2, [pc, #56]	; (8005014 <MUSART1_voidInit+0x94>)
 8004fda:	f043 0304 	orr.w	r3, r3, #4
 8004fde:	60d3      	str	r3, [r2, #12]
					CLR_BIT(USART1_Ptr -> USART_CR1, 2);
		#endif

            /* ------ USART_1 Stop Bit Configeration ------ */
		#if   USART1_STOP_BITS == ONE_STOP_BIT
					CLR_BIT(USART1_Ptr -> USART_CR2, 12); 
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <MUSART1_voidInit+0x94>)
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	4a0b      	ldr	r2, [pc, #44]	; (8005014 <MUSART1_voidInit+0x94>)
 8004fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fea:	6113      	str	r3, [r2, #16]
                    CLR_BIT(USART1_Ptr -> USART_CR2, 13);
 8004fec:	4b09      	ldr	r3, [pc, #36]	; (8005014 <MUSART1_voidInit+0x94>)
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	4a08      	ldr	r2, [pc, #32]	; (8005014 <MUSART1_voidInit+0x94>)
 8004ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ff6:	6113      	str	r3, [r2, #16]
					SET_BIT(USART1_Ptr -> USART_CR2, 12); 
                    SET_BIT(USART1_Ptr -> USART_CR2, 13);
		#endif

		/* Enable USART_1 */
		SET_BIT(USART1_Ptr -> USART_CR1, 13);
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <MUSART1_voidInit+0x94>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4a05      	ldr	r2, [pc, #20]	; (8005014 <MUSART1_voidInit+0x94>)
 8004ffe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005002:	60d3      	str	r3, [r2, #12]
		/* Reset the Status Register */
		USART1_Ptr -> USART_SR = 0; 
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <MUSART1_voidInit+0x94>)
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]

	#elif USART1_STATUS == USART1_DISABLE
		CLR_BIT(USART1_Ptr -> USART_CR1, 0);
	#endif
}
 800500a:	bf00      	nop
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40013800 	.word	0x40013800

08005018 <MUSART1_voidTransmitChar>:

void MUSART1_voidTransmitChar(u8 Copy_u8Char )
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	71fb      	strb	r3, [r7, #7]

	USART1_Ptr -> USART_DR = Copy_u8Char ;
 8005022:	4a0b      	ldr	r2, [pc, #44]	; (8005050 <MUSART1_voidTransmitChar+0x38>)
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	6053      	str	r3, [r2, #4]

	while( GET_BIT( USART1_Ptr -> USART_SR , 6 ) == 0 );
 8005028:	bf00      	nop
 800502a:	4b09      	ldr	r3, [pc, #36]	; (8005050 <MUSART1_voidTransmitChar+0x38>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	099b      	lsrs	r3, r3, #6
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f8      	beq.n	800502a <MUSART1_voidTransmitChar+0x12>

	CLR_BIT( USART1_Ptr -> USART_SR , 6 );
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <MUSART1_voidTransmitChar+0x38>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a04      	ldr	r2, [pc, #16]	; (8005050 <MUSART1_voidTransmitChar+0x38>)
 800503e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005042:	6013      	str	r3, [r2, #0]
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40013800 	.word	0x40013800

08005054 <MUSART1_voidTransmitStringln>:

void MUSART1_voidTransmitStringln(pu8 Copy_pu8String)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	u8 u8Iterator = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8String[u8Iterator] != '\0')
 8005060:	e009      	b.n	8005076 <MUSART1_voidTransmitStringln+0x22>
	{
		MUSART1_voidTransmitChar(Copy_pu8String[u8Iterator] );
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	4413      	add	r3, r2
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff ffd4 	bl	8005018 <MUSART1_voidTransmitChar>
		u8Iterator++;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	3301      	adds	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8String[u8Iterator] != '\0')
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	4413      	add	r3, r2
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1ef      	bne.n	8005062 <MUSART1_voidTransmitStringln+0xe>
	}
	MUSART1_voidTransmitChar('\n');
 8005082:	200a      	movs	r0, #10
 8005084:	f7ff ffc8 	bl	8005018 <MUSART1_voidTransmitChar>
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <MUSART1_u8Receive>:
{
	MUSART1_voidTransmitChar('\n');
}

u8 MUSART1_u8Receive(u32 Copy_u32TimeOut)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	u8  LOC_u8Data  = 0 ;
 8005098:	2300      	movs	r3, #0
 800509a:	73fb      	strb	r3, [r7, #15]
	u32 LOC_TimeOut = 0 ;
 800509c:	2300      	movs	r3, #0
 800509e:	60bb      	str	r3, [r7, #8]

	CLR_BIT ( USART1_Ptr -> USART_SR , 5);
 80050a0:	4b12      	ldr	r3, [pc, #72]	; (80050ec <MUSART1_u8Receive+0x5c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a11      	ldr	r2, [pc, #68]	; (80050ec <MUSART1_u8Receive+0x5c>)
 80050a6:	f023 0320 	bic.w	r3, r3, #32
 80050aa:	6013      	str	r3, [r2, #0]

	while( ( GET_BIT ( USART1_Ptr -> USART_SR , 5) == 0 ) && ( LOC_TimeOut < Copy_u32TimeOut ) )
 80050ac:	e002      	b.n	80050b4 <MUSART1_u8Receive+0x24>
	{
		LOC_TimeOut++;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	3301      	adds	r3, #1
 80050b2:	60bb      	str	r3, [r7, #8]
	while( ( GET_BIT ( USART1_Ptr -> USART_SR , 5) == 0 ) && ( LOC_TimeOut < Copy_u32TimeOut ) )
 80050b4:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <MUSART1_u8Receive+0x5c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d103      	bne.n	80050ca <MUSART1_u8Receive+0x3a>
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d3f1      	bcc.n	80050ae <MUSART1_u8Receive+0x1e>
	}

	if( LOC_TimeOut == Copy_u32TimeOut )
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d102      	bne.n	80050d8 <MUSART1_u8Receive+0x48>
	{
		LOC_u8Data = TIMEOUT;
 80050d2:	23ff      	movs	r3, #255	; 0xff
 80050d4:	73fb      	strb	r3, [r7, #15]
 80050d6:	e002      	b.n	80050de <MUSART1_u8Receive+0x4e>
	}
	else
	{

		LOC_u8Data = USART1_Ptr -> USART_DR;
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <MUSART1_u8Receive+0x5c>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	73fb      	strb	r3, [r7, #15]
	}

	return LOC_u8Data;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40013800 	.word	0x40013800

080050f0 <MUSART1_pu8ReceiveString>:

u8 String[20];
pu8 MUSART1_pu8ReceiveString ( u32 Copy_u32TimeOut )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	u8 LOC_Iterator = 0 , LOC_u8DataCome ;
 80050f8:	2300      	movs	r3, #0
 80050fa:	73fb      	strb	r3, [r7, #15]

	while( (( LOC_u8DataCome = MUSART1_u8Receive(1000) ) != '$') && Copy_u32TimeOut )
 80050fc:	e00c      	b.n	8005118 <MUSART1_pu8ReceiveString+0x28>
	{
		if(LOC_u8DataCome != TIMEOUT)
 80050fe:	7bbb      	ldrb	r3, [r7, #14]
 8005100:	2bff      	cmp	r3, #255	; 0xff
 8005102:	d006      	beq.n	8005112 <MUSART1_pu8ReceiveString+0x22>
		{
			String[ LOC_Iterator ] = LOC_u8DataCome ;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	4913      	ldr	r1, [pc, #76]	; (8005154 <MUSART1_pu8ReceiveString+0x64>)
 8005108:	7bba      	ldrb	r2, [r7, #14]
 800510a:	54ca      	strb	r2, [r1, r3]
			LOC_Iterator++;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	3301      	adds	r3, #1
 8005110:	73fb      	strb	r3, [r7, #15]
		}
		Copy_u32TimeOut--;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3b01      	subs	r3, #1
 8005116:	607b      	str	r3, [r7, #4]
	while( (( LOC_u8DataCome = MUSART1_u8Receive(1000) ) != '$') && Copy_u32TimeOut )
 8005118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800511c:	f7ff ffb8 	bl	8005090 <MUSART1_u8Receive>
 8005120:	4603      	mov	r3, r0
 8005122:	73bb      	strb	r3, [r7, #14]
 8005124:	7bbb      	ldrb	r3, [r7, #14]
 8005126:	2b24      	cmp	r3, #36	; 0x24
 8005128:	d002      	beq.n	8005130 <MUSART1_pu8ReceiveString+0x40>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e6      	bne.n	80050fe <MUSART1_pu8ReceiveString+0xe>
	}
	if(Copy_u32TimeOut == 0)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <MUSART1_pu8ReceiveString+0x50>
	{
		String[ 0 ] = '!';
 8005136:	4b07      	ldr	r3, [pc, #28]	; (8005154 <MUSART1_pu8ReceiveString+0x64>)
 8005138:	2221      	movs	r2, #33	; 0x21
 800513a:	701a      	strb	r2, [r3, #0]
		LOC_Iterator = 1;
 800513c:	2301      	movs	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
	}
	String[LOC_Iterator] = '\0';
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	4a04      	ldr	r2, [pc, #16]	; (8005154 <MUSART1_pu8ReceiveString+0x64>)
 8005144:	2100      	movs	r1, #0
 8005146:	54d1      	strb	r1, [r2, r3]

	return ( String );
 8005148:	4b02      	ldr	r3, [pc, #8]	; (8005154 <MUSART1_pu8ReceiveString+0x64>)
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	200045e4 	.word	0x200045e4

08005158 <main>:
MessageBufferHandle_t CurrentQuoteBuffer;
MessageBufferHandle_t CurrentPowerConsumptionBuffer;
MessageBufferHandle_t CurrentChargeBuffer;

int main(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
	/*system clock initialization*/
	MRCC_enuInitSysClock();
 800515c:	f7ff fdd6 	bl	8004d0c <MRCC_enuInitSysClock>

	/*global data containers initializations*/
	PowerReadingBuffer = xMessageBufferCreate(POWER_METER_MSG_LENGTH);
 8005160:	2201      	movs	r2, #1
 8005162:	2100      	movs	r1, #0
 8005164:	2002      	movs	r0, #2
 8005166:	f7fc fc38 	bl	80019da <xStreamBufferGenericCreate>
 800516a:	4602      	mov	r2, r0
 800516c:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <main+0x78>)
 800516e:	601a      	str	r2, [r3, #0]

	InputDataBuffer = xMessageBufferCreate(sizeof(InputData));
 8005170:	2201      	movs	r2, #1
 8005172:	2100      	movs	r1, #0
 8005174:	2008      	movs	r0, #8
 8005176:	f7fc fc30 	bl	80019da <xStreamBufferGenericCreate>
 800517a:	4602      	mov	r2, r0
 800517c:	4b15      	ldr	r3, [pc, #84]	; (80051d4 <main+0x7c>)
 800517e:	601a      	str	r2, [r3, #0]

	CurrentChargeBuffer = xMessageBufferCreate(sizeof(Tariff));
 8005180:	2201      	movs	r2, #1
 8005182:	2100      	movs	r1, #0
 8005184:	2002      	movs	r0, #2
 8005186:	f7fc fc28 	bl	80019da <xStreamBufferGenericCreate>
 800518a:	4602      	mov	r2, r0
 800518c:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <main+0x80>)
 800518e:	601a      	str	r2, [r3, #0]
	CurrentQuoteBuffer = xMessageBufferCreate(sizeof(Quote));
 8005190:	2201      	movs	r2, #1
 8005192:	2100      	movs	r1, #0
 8005194:	2008      	movs	r0, #8
 8005196:	f7fc fc20 	bl	80019da <xStreamBufferGenericCreate>
 800519a:	4602      	mov	r2, r0
 800519c:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <main+0x84>)
 800519e:	601a      	str	r2, [r3, #0]
	CurrentPowerConsumptionBuffer = xMessageBufferCreate(sizeof(u16));
 80051a0:	2201      	movs	r2, #1
 80051a2:	2100      	movs	r1, #0
 80051a4:	2004      	movs	r0, #4
 80051a6:	f7fc fc18 	bl	80019da <xStreamBufferGenericCreate>
 80051aa:	4602      	mov	r2, r0
 80051ac:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <main+0x88>)
 80051ae:	601a      	str	r2, [r3, #0]

	/*Initialization of modules*/
	PowerMeasureModule_voidInit();
 80051b0:	f7fb f8e0 	bl	8000374 <PowerMeasureModule_voidInit>
	ActivateSerialModule_voidInit();
 80051b4:	f7fa ffdc 	bl	8000170 <ActivateSerialModule_voidInit>
	UserInteractModule_voidInit();
 80051b8:	f7fb f980 	bl	80004bc <UserInteractModule_voidInit>
	DisplayModule_voidInit();
 80051bc:	f7fb f860 	bl	8000280 <DisplayModule_voidInit>
	StatusModule_voidInit();
 80051c0:	f7fb f924 	bl	800040c <StatusModule_voidInit>
	RegistryModule_voidInit();
 80051c4:	f7fb f91c 	bl	8000400 <RegistryModule_voidInit>

	/*OS Scheduler start*/
	vTaskStartScheduler();
 80051c8:	f7fd f8f4 	bl	80023b4 <vTaskStartScheduler>

	while(1)
 80051cc:	e7fe      	b.n	80051cc <main+0x74>
 80051ce:	bf00      	nop
 80051d0:	200045fc 	.word	0x200045fc
 80051d4:	20004604 	.word	0x20004604
 80051d8:	20004608 	.word	0x20004608
 80051dc:	200045f8 	.word	0x200045f8
 80051e0:	20004600 	.word	0x20004600

080051e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051e4:	480d      	ldr	r0, [pc, #52]	; (800521c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051e6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80051e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051ec:	480c      	ldr	r0, [pc, #48]	; (8005220 <LoopForever+0x6>)
  ldr r1, =_edata
 80051ee:	490d      	ldr	r1, [pc, #52]	; (8005224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80051f0:	4a0d      	ldr	r2, [pc, #52]	; (8005228 <LoopForever+0xe>)
  movs r3, #0
 80051f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051f4:	e002      	b.n	80051fc <LoopCopyDataInit>

080051f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051fa:	3304      	adds	r3, #4

080051fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005200:	d3f9      	bcc.n	80051f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005202:	4a0a      	ldr	r2, [pc, #40]	; (800522c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005204:	4c0a      	ldr	r4, [pc, #40]	; (8005230 <LoopForever+0x16>)
  movs r3, #0
 8005206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005208:	e001      	b.n	800520e <LoopFillZerobss>

0800520a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800520a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800520c:	3204      	adds	r2, #4

0800520e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800520e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005210:	d3fb      	bcc.n	800520a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005212:	f000 f811 	bl	8005238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005216:	f7ff ff9f 	bl	8005158 <main>

0800521a <LoopForever>:

LoopForever:
    b LoopForever
 800521a:	e7fe      	b.n	800521a <LoopForever>
  ldr   r0, =_estack
 800521c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8005220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005224:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8005228:	080055dc 	.word	0x080055dc
  ldr r2, =_sbss
 800522c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8005230:	2000460c 	.word	0x2000460c

08005234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005234:	e7fe      	b.n	8005234 <ADC1_2_IRQHandler>
	...

08005238 <__libc_init_array>:
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	2500      	movs	r5, #0
 800523c:	4e0c      	ldr	r6, [pc, #48]	; (8005270 <__libc_init_array+0x38>)
 800523e:	4c0d      	ldr	r4, [pc, #52]	; (8005274 <__libc_init_array+0x3c>)
 8005240:	1ba4      	subs	r4, r4, r6
 8005242:	10a4      	asrs	r4, r4, #2
 8005244:	42a5      	cmp	r5, r4
 8005246:	d109      	bne.n	800525c <__libc_init_array+0x24>
 8005248:	f000 f82e 	bl	80052a8 <_init>
 800524c:	2500      	movs	r5, #0
 800524e:	4e0a      	ldr	r6, [pc, #40]	; (8005278 <__libc_init_array+0x40>)
 8005250:	4c0a      	ldr	r4, [pc, #40]	; (800527c <__libc_init_array+0x44>)
 8005252:	1ba4      	subs	r4, r4, r6
 8005254:	10a4      	asrs	r4, r4, #2
 8005256:	42a5      	cmp	r5, r4
 8005258:	d105      	bne.n	8005266 <__libc_init_array+0x2e>
 800525a:	bd70      	pop	{r4, r5, r6, pc}
 800525c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005260:	4798      	blx	r3
 8005262:	3501      	adds	r5, #1
 8005264:	e7ee      	b.n	8005244 <__libc_init_array+0xc>
 8005266:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800526a:	4798      	blx	r3
 800526c:	3501      	adds	r5, #1
 800526e:	e7f2      	b.n	8005256 <__libc_init_array+0x1e>
 8005270:	080055d4 	.word	0x080055d4
 8005274:	080055d4 	.word	0x080055d4
 8005278:	080055d4 	.word	0x080055d4
 800527c:	080055d8 	.word	0x080055d8

08005280 <memcpy>:
 8005280:	b510      	push	{r4, lr}
 8005282:	1e43      	subs	r3, r0, #1
 8005284:	440a      	add	r2, r1
 8005286:	4291      	cmp	r1, r2
 8005288:	d100      	bne.n	800528c <memcpy+0xc>
 800528a:	bd10      	pop	{r4, pc}
 800528c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005290:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005294:	e7f7      	b.n	8005286 <memcpy+0x6>

08005296 <memset>:
 8005296:	4603      	mov	r3, r0
 8005298:	4402      	add	r2, r0
 800529a:	4293      	cmp	r3, r2
 800529c:	d100      	bne.n	80052a0 <memset+0xa>
 800529e:	4770      	bx	lr
 80052a0:	f803 1b01 	strb.w	r1, [r3], #1
 80052a4:	e7f9      	b.n	800529a <memset+0x4>
	...

080052a8 <_init>:
 80052a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052aa:	bf00      	nop
 80052ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ae:	bc08      	pop	{r3}
 80052b0:	469e      	mov	lr, r3
 80052b2:	4770      	bx	lr

080052b4 <_fini>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	bf00      	nop
 80052b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ba:	bc08      	pop	{r3}
 80052bc:	469e      	mov	lr, r3
 80052be:	4770      	bx	lr
